//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ddex_net.xml.ern._341 {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    using ddex_net.xml._20120404.ddexC;
    using ddex_net.xml._20120404.ddex;
    using ddex_net.xml._20120404.iso639a2;
    using ddex_net.xml._20120404.iso4217a;
    using ddex_net.xml._20120404.iso3166a2;
    
    
    /// <summary>
    /// <para>
    /// Regular expression: (MessageHeader, UpdateIndicator, CatalogTransfer?, WorkList?, CueSheetList?, ResourceList, CollectionList?, ReleaseList, DealList?)
    /// </para>
    /// </summary>
    public partial class NewReleaseMessage : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator NewReleaseMessage(XElement xe) { return XTypedServices.ToXTypedElement<NewReleaseMessage>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static NewReleaseMessage() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("MessageHeader", "")), new NamedContentModelEntity(XName.Get("UpdateIndicator", "")), new NamedContentModelEntity(XName.Get("CatalogTransfer", "")), new NamedContentModelEntity(XName.Get("WorkList", "")), new NamedContentModelEntity(XName.Get("CueSheetList", "")), new NamedContentModelEntity(XName.Get("ResourceList", "")), new NamedContentModelEntity(XName.Get("CollectionList", "")), new NamedContentModelEntity(XName.Get("ReleaseList", "")), new NamedContentModelEntity(XName.Get("DealList", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (MessageHeader, UpdateIndicator, CatalogTransfer?, WorkList?, CueSheetList?, ResourceList, CollectionList?, ReleaseList, DealList?)
        /// </para>
        /// </summary>
        public NewReleaseMessage() {
        }
        
        /// <summary>
        /// <para>
        /// The MessageHeader for the ern:NewReleaseMessage.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (MessageHeader, UpdateIndicator, CatalogTransfer?, WorkList?, CueSheetList?, ResourceList, CollectionList?, ReleaseList, DealList?)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.MessageHeader MessageHeader {
            get {
                XElement x = this.GetElement(XName.Get("MessageHeader", ""));
                return ((ddex_net.xml._20120404.ddexC.MessageHeader)(x));
            }
            set {
                this.SetElement(XName.Get("MessageHeader", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The indicator which distinguishes whether the ddex:Message contains original data or updates to previously sent data.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (MessageHeader, UpdateIndicator, CatalogTransfer?, WorkList?, CueSheetList?, ResourceList, CollectionList?, ReleaseList, DealList?)
        /// </para>
        /// </summary>
        public string UpdateIndicator {
            get {
                XElement x = this.GetElement(XName.Get("UpdateIndicator", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("UpdateIndicator", ""), value, "UpdateIndicator", global::ddex_net.xml._20120404.ddex.UpdateIndicator.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Price change.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MessageHeader, UpdateIndicator, CatalogTransfer?, WorkList?, CueSheetList?, ResourceList, CollectionList?, ReleaseList, DealList?)
        /// </para>
        /// </summary>
        public CatalogTransfer CatalogTransfer {
            get {
                XElement x = this.GetElement(XName.Get("CatalogTransfer", ""));
                return ((CatalogTransfer)(x));
            }
            set {
                this.SetElement(XName.Get("CatalogTransfer", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of one or more ddex:MusicalWorks, a ddex:Performance of which is contained in the ddex:Resources of the ern:NewReleaseMessage.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MessageHeader, UpdateIndicator, CatalogTransfer?, WorkList?, CueSheetList?, ResourceList, CollectionList?, ReleaseList, DealList?)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.WorkList WorkList {
            get {
                XElement x = this.GetElement(XName.Get("WorkList", ""));
                return ((ddex_net.xml._20120404.ddexC.WorkList)(x));
            }
            set {
                this.SetElement(XName.Get("WorkList", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of one or more ddex:CueSheets contained in ddex:Releases for which data is provided in the ern:NewReleaseMessage.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MessageHeader, UpdateIndicator, CatalogTransfer?, WorkList?, CueSheetList?, ResourceList, CollectionList?, ReleaseList, DealList?)
        /// </para>
        /// </summary>
        public CueSheetList CueSheetList {
            get {
                XElement x = this.GetElement(XName.Get("CueSheetList", ""));
                return ((CueSheetList)(x));
            }
            set {
                this.SetElement(XName.Get("CueSheetList", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of one or more ddex:Resources.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (MessageHeader, UpdateIndicator, CatalogTransfer?, WorkList?, CueSheetList?, ResourceList, CollectionList?, ReleaseList, DealList?)
        /// </para>
        /// </summary>
        public ResourceList ResourceList {
            get {
                XElement x = this.GetElement(XName.Get("ResourceList", ""));
                return ((ResourceList)(x));
            }
            set {
                this.SetElement(XName.Get("ResourceList", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of one or more ddex:Collections contained in ddex:Releases for which data is provided in the ern:NewReleaseMessage.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MessageHeader, UpdateIndicator, CatalogTransfer?, WorkList?, CueSheetList?, ResourceList, CollectionList?, ReleaseList, DealList?)
        /// </para>
        /// </summary>
        public CollectionList CollectionList {
            get {
                XElement x = this.GetElement(XName.Get("CollectionList", ""));
                return ((CollectionList)(x));
            }
            set {
                this.SetElement(XName.Get("CollectionList", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of one or more ddex:DDEX ddex:Releases contained in the ern:NewReleaseMessage.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (MessageHeader, UpdateIndicator, CatalogTransfer?, WorkList?, CueSheetList?, ResourceList, CollectionList?, ReleaseList, DealList?)
        /// </para>
        /// </summary>
        public ReleaseList ReleaseList {
            get {
                XElement x = this.GetElement(XName.Get("ReleaseList", ""));
                return ((ReleaseList)(x));
            }
            set {
                this.SetElement(XName.Get("ReleaseList", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of one or more ddex:Deals governing the Usage of the ddex:Releases in the ddex:Message.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MessageHeader, UpdateIndicator, CatalogTransfer?, WorkList?, CueSheetList?, ResourceList, CollectionList?, ReleaseList, DealList?)
        /// </para>
        /// </summary>
        public DealList DealList {
            get {
                XElement x = this.GetElement(XName.Get("DealList", ""));
                return ((DealList)(x));
            }
            set {
                this.SetElement(XName.Get("DealList", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Identifier of the ddex:Version of the XML schema used for the ddex:Message. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string MessageSchemaVersionId {
            get {
                XAttribute x = this.Attribute(XName.Get("MessageSchemaVersionId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("MessageSchemaVersionId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Identifier of the ddex:Version of the business profile used for the ddex:Message. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string BusinessProfileVersionId {
            get {
                XAttribute x = this.Attribute(XName.Get("BusinessProfileVersionId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("BusinessProfileVersionId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Identifier of the ddex:Version of the release profile used for the ddex:Message. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ReleaseProfileVersionId {
            get {
                XAttribute x = this.Attribute(XName.Get("ReleaseProfileVersionId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ReleaseProfileVersionId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the ern:NewReleaseMessage as defined in IETF RfC 4646. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("NewReleaseMessage", "http://ddex.net/xml/ern/341");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static NewReleaseMessage Load(string xmlFile) {
            return XTypedServices.Load<NewReleaseMessage>(xmlFile);
        }
        
        public static NewReleaseMessage Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<NewReleaseMessage>(xmlFile);
        }
        
        public static NewReleaseMessage Parse(string xml) {
            return XTypedServices.Parse<NewReleaseMessage>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<NewReleaseMessage>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("MessageHeader", ""), typeof(ddex_net.xml._20120404.ddexC.MessageHeader));
            localElementDictionary.Add(XName.Get("UpdateIndicator", ""), typeof(string));
            localElementDictionary.Add(XName.Get("CatalogTransfer", ""), typeof(CatalogTransfer));
            localElementDictionary.Add(XName.Get("WorkList", ""), typeof(ddex_net.xml._20120404.ddexC.WorkList));
            localElementDictionary.Add(XName.Get("CueSheetList", ""), typeof(CueSheetList));
            localElementDictionary.Add(XName.Get("ResourceList", ""), typeof(ResourceList));
            localElementDictionary.Add(XName.Get("CollectionList", ""), typeof(CollectionList));
            localElementDictionary.Add(XName.Get("ReleaseList", ""), typeof(ReleaseList));
            localElementDictionary.Add(XName.Get("DealList", ""), typeof(DealList));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (MessageHeader, PublicationDate, CatalogItem+)
    /// </para>
    /// </summary>
    public partial class CatalogListMessage : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CatalogItem> CatalogItemField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CatalogListMessage(XElement xe) { return XTypedServices.ToXTypedElement<CatalogListMessage>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CatalogListMessage() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("MessageHeader", "")), new NamedContentModelEntity(XName.Get("PublicationDate", "")), new NamedContentModelEntity(XName.Get("CatalogItem", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (MessageHeader, PublicationDate, CatalogItem+)
        /// </para>
        /// </summary>
        public CatalogListMessage() {
        }
        
        /// <summary>
        /// <para>
        /// The MessageHeader for the ern:CatalogListMessage.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (MessageHeader, PublicationDate, CatalogItem+)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.MessageHeader MessageHeader {
            get {
                XElement x = this.GetElement(XName.Get("MessageHeader", ""));
                return ((ddex_net.xml._20120404.ddexC.MessageHeader)(x));
            }
            set {
                this.SetElement(XName.Get("MessageHeader", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:DateTime at which the catalog will become available (the only allowed format is ISO 8601:2004: YYYY-MM-DDThh:mm:ssTZD).
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (MessageHeader, PublicationDate, CatalogItem+)
        /// </para>
        /// </summary>
        public System.DateTime PublicationDate {
            get {
                XElement x = this.GetElement(XName.Get("PublicationDate", ""));
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetElement(XName.Get("PublicationDate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Release which is an item of the catalog.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (MessageHeader, PublicationDate, CatalogItem+)
        /// </para>
        /// </summary>
        public IList<CatalogItem> CatalogItem {
            get {
                if ((this.CatalogItemField == null)) {
                    this.CatalogItemField = new XTypedList<CatalogItem>(this, LinqToXsdTypeManager.Instance, XName.Get("CatalogItem", ""));
                }
                return this.CatalogItemField;
            }
            set {
                if ((value == null)) {
                    this.CatalogItemField = null;
                }
                else {
                    if ((this.CatalogItemField == null)) {
                        this.CatalogItemField = XTypedList<CatalogItem>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CatalogItem", ""));
                    }
                    else {
                        XTypedServices.SetList<CatalogItem>(this.CatalogItemField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Identifier of the ddex:Version of the XML schema used for the ddex:Message. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string MessageSchemaVersionId {
            get {
                XAttribute x = this.Attribute(XName.Get("MessageSchemaVersionId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("MessageSchemaVersionId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Identifier of the ddex:Version of the business profile used for the ddex:Message. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string BusinessProfileVersionId {
            get {
                XAttribute x = this.Attribute(XName.Get("BusinessProfileVersionId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("BusinessProfileVersionId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Identifier of the ddex:Version of the release profile used for the ddex:Message. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ReleaseProfileVersionId {
            get {
                XAttribute x = this.Attribute(XName.Get("ReleaseProfileVersionId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ReleaseProfileVersionId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the ern:CatalogListMessage as defined in IETF RfC 4646. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CatalogListMessage", "http://ddex.net/xml/ern/341");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static CatalogListMessage Load(string xmlFile) {
            return XTypedServices.Load<CatalogListMessage>(xmlFile);
        }
        
        public static CatalogListMessage Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<CatalogListMessage>(xmlFile);
        }
        
        public static CatalogListMessage Parse(string xml) {
            return XTypedServices.Parse<CatalogListMessage>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CatalogListMessage>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("MessageHeader", ""), typeof(ddex_net.xml._20120404.ddexC.MessageHeader));
            localElementDictionary.Add(XName.Get("PublicationDate", ""), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("CatalogItem", ""), typeof(CatalogItem));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:Release which is an item of a catalog.
    /// </para>
    /// <para>
    /// Regular expression: (TerritoryCode+, ReleaseId+, Title, DisplayArtistName, ContributorName+, DisplayTitle, LabelName+, Genre*, PLine*, CLine*, ReleaseDate)
    /// </para>
    /// </summary>
    public partial class CatalogItem : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<object> TerritoryCodeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.ReleaseId> ReleaseIdField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Name> ContributorNameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.LabelName> LabelNameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Genre> GenreField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.PLine> PLineField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.CLine> CLineField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CatalogItem(XElement xe) { return XTypedServices.ToXTypedElement<CatalogItem>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CatalogItem() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("TerritoryCode", "")), new NamedContentModelEntity(XName.Get("ReleaseId", "")), new NamedContentModelEntity(XName.Get("Title", "")), new NamedContentModelEntity(XName.Get("DisplayArtistName", "")), new NamedContentModelEntity(XName.Get("ContributorName", "")), new NamedContentModelEntity(XName.Get("DisplayTitle", "")), new NamedContentModelEntity(XName.Get("LabelName", "")), new NamedContentModelEntity(XName.Get("Genre", "")), new NamedContentModelEntity(XName.Get("PLine", "")), new NamedContentModelEntity(XName.Get("CLine", "")), new NamedContentModelEntity(XName.Get("ReleaseDate", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Release which is an item of a catalog.
        /// </para>
        /// <para>
        /// Regular expression: (TerritoryCode+, ReleaseId+, Title, DisplayArtistName, ContributorName+, DisplayTitle, LabelName+, Genre*, PLine*, CLine*, ReleaseDate)
        /// </para>
        /// </summary>
        public CatalogItem() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Territory for the ddex:Release (represented by an ISO 3166-1 iso3166a2:TerritoryCode).
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (TerritoryCode+, ReleaseId+, Title, DisplayArtistName, ContributorName+, DisplayTitle, LabelName+, Genre*, PLine*, CLine*, ReleaseDate)
        /// </para>
        /// </summary>
        public IList<object> TerritoryCode {
            get {
                if ((this.TerritoryCodeField == null)) {
                    this.TerritoryCodeField = new XSimpleList<object>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, XName.Get("TerritoryCode", ""));
                }
                return this.TerritoryCodeField;
            }
            set {
                if ((value == null)) {
                    this.TerritoryCodeField = null;
                }
                else {
                    if ((this.TerritoryCodeField == null)) {
                        this.TerritoryCodeField = XSimpleList<object>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, value, XName.Get("TerritoryCode", ""));
                    }
                    else {
                        XTypedServices.SetList<System.Object>(this.TerritoryCodeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:ReleaseIds. If available, a ddex:GRid has to be used. If the ern:Release contains only one ddex:SoundRecording, the ddex:ISRC of the ddex:SoundRecording may be used instead. If the ern:Release is an abstraction of a complete ddex:PhysicalProduct (such as a CD ddex:Album), the ddex:ICPN of the ddex:PhysicalProduct may be used instead.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (TerritoryCode+, ReleaseId+, Title, DisplayArtistName, ContributorName+, DisplayTitle, LabelName+, Genre*, PLine*, CLine*, ReleaseDate)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.ReleaseId> ReleaseId {
            get {
                if ((this.ReleaseIdField == null)) {
                    this.ReleaseIdField = new XTypedList<ddex_net.xml._20120404.ddexC.ReleaseId>(this, LinqToXsdTypeManager.Instance, XName.Get("ReleaseId", ""));
                }
                return this.ReleaseIdField;
            }
            set {
                if ((value == null)) {
                    this.ReleaseIdField = null;
                }
                else {
                    if ((this.ReleaseIdField == null)) {
                        this.ReleaseIdField = XTypedList<ddex_net.xml._20120404.ddexC.ReleaseId>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ReleaseId", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.ReleaseId>(this.ReleaseIdField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Title of the ddex:Release.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TerritoryCode+, ReleaseId+, Title, DisplayArtistName, ContributorName+, DisplayTitle, LabelName+, Genre*, PLine*, CLine*, ReleaseDate)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.Title Title {
            get {
                XElement x = this.GetElement(XName.Get("Title", ""));
                return ((ddex_net.xml._20120404.ddexC.Title)(x));
            }
            set {
                this.SetElement(XName.Get("Title", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing the ddex:Name to be used by a ddex:DSP when presenting ddex:Artist details of the ddex:Release to a ddex:Consumer.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TerritoryCode+, ReleaseId+, Title, DisplayArtistName, ContributorName+, DisplayTitle, LabelName+, Genre*, PLine*, CLine*, ReleaseDate)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.Name DisplayArtistName {
            get {
                XElement x = this.GetElement(XName.Get("DisplayArtistName", ""));
                return ((ddex_net.xml._20120404.ddexC.Name)(x));
            }
            set {
                this.SetElement(XName.Get("DisplayArtistName", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Contributor to the catalog, i.e. to at least one of the included ddex:Releases.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (TerritoryCode+, ReleaseId+, Title, DisplayArtistName, ContributorName+, DisplayTitle, LabelName+, Genre*, PLine*, CLine*, ReleaseDate)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Name> ContributorName {
            get {
                if ((this.ContributorNameField == null)) {
                    this.ContributorNameField = new XTypedList<ddex_net.xml._20120404.ddexC.Name>(this, LinqToXsdTypeManager.Instance, XName.Get("ContributorName", ""));
                }
                return this.ContributorNameField;
            }
            set {
                if ((value == null)) {
                    this.ContributorNameField = null;
                }
                else {
                    if ((this.ContributorNameField == null)) {
                        this.ContributorNameField = XTypedList<ddex_net.xml._20120404.ddexC.Name>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ContributorName", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Name>(this.ContributorNameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:DisplayTitle of the ddex:Release.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TerritoryCode+, ReleaseId+, Title, DisplayArtistName, ContributorName+, DisplayTitle, LabelName+, Genre*, PLine*, CLine*, ReleaseDate)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.ReferenceTitle DisplayTitle {
            get {
                XElement x = this.GetElement(XName.Get("DisplayTitle", ""));
                return ((ddex_net.xml._20120404.ddexC.ReferenceTitle)(x));
            }
            set {
                this.SetElement(XName.Get("DisplayTitle", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing the ddex:Name of the ddex:Label for the ddex:Release.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (TerritoryCode+, ReleaseId+, Title, DisplayArtistName, ContributorName+, DisplayTitle, LabelName+, Genre*, PLine*, CLine*, ReleaseDate)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.LabelName> LabelName {
            get {
                if ((this.LabelNameField == null)) {
                    this.LabelNameField = new XTypedList<ddex_net.xml._20120404.ddexC.LabelName>(this, LinqToXsdTypeManager.Instance, XName.Get("LabelName", ""));
                }
                return this.LabelNameField;
            }
            set {
                if ((value == null)) {
                    this.LabelNameField = null;
                }
                else {
                    if ((this.LabelNameField == null)) {
                        this.LabelNameField = XTypedList<ddex_net.xml._20120404.ddexC.LabelName>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("LabelName", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.LabelName>(this.LabelNameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Genre to which the ddex:Release belongs.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (TerritoryCode+, ReleaseId+, Title, DisplayArtistName, ContributorName+, DisplayTitle, LabelName+, Genre*, PLine*, CLine*, ReleaseDate)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Genre> Genre {
            get {
                if ((this.GenreField == null)) {
                    this.GenreField = new XTypedList<ddex_net.xml._20120404.ddexC.Genre>(this, LinqToXsdTypeManager.Instance, XName.Get("Genre", ""));
                }
                return this.GenreField;
            }
            set {
                if ((value == null)) {
                    this.GenreField = null;
                }
                else {
                    if ((this.GenreField == null)) {
                        this.GenreField = XTypedList<ddex_net.xml._20120404.ddexC.Genre>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Genre", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Genre>(this.GenreField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:PLine for the ern:Release.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (TerritoryCode+, ReleaseId+, Title, DisplayArtistName, ContributorName+, DisplayTitle, LabelName+, Genre*, PLine*, CLine*, ReleaseDate)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.PLine> PLine {
            get {
                if ((this.PLineField == null)) {
                    this.PLineField = new XTypedList<ddex_net.xml._20120404.ddexC.PLine>(this, LinqToXsdTypeManager.Instance, XName.Get("PLine", ""));
                }
                return this.PLineField;
            }
            set {
                if ((value == null)) {
                    this.PLineField = null;
                }
                else {
                    if ((this.PLineField == null)) {
                        this.PLineField = XTypedList<ddex_net.xml._20120404.ddexC.PLine>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("PLine", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.PLine>(this.PLineField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:CLine for the ern:Release.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (TerritoryCode+, ReleaseId+, Title, DisplayArtistName, ContributorName+, DisplayTitle, LabelName+, Genre*, PLine*, CLine*, ReleaseDate)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.CLine> CLine {
            get {
                if ((this.CLineField == null)) {
                    this.CLineField = new XTypedList<ddex_net.xml._20120404.ddexC.CLine>(this, LinqToXsdTypeManager.Instance, XName.Get("CLine", ""));
                }
                return this.CLineField;
            }
            set {
                if ((value == null)) {
                    this.CLineField = null;
                }
                else {
                    if ((this.CLineField == null)) {
                        this.CLineField = XTypedList<ddex_net.xml._20120404.ddexC.CLine>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CLine", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.CLine>(this.CLineField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ddex:Release was or will be first made available for Usage, whether for physical or electronic/online distribution (in ISO 8601:2004 format: YYYY-MM-DD).
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TerritoryCode+, ReleaseId+, Title, DisplayArtistName, ContributorName+, DisplayTitle, LabelName+, Genre*, PLine*, CLine*, ReleaseDate)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.EventDate ReleaseDate {
            get {
                XElement x = this.GetElement(XName.Get("ReleaseDate", ""));
                return ((ddex_net.xml._20120404.ddexC.EventDate)(x));
            }
            set {
                this.SetElement(XName.Get("ReleaseDate", ""), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CatalogItem", "http://ddex.net/xml/ern/341");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CatalogItem>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("TerritoryCode", ""), typeof(object));
            localElementDictionary.Add(XName.Get("ReleaseId", ""), typeof(ddex_net.xml._20120404.ddexC.ReleaseId));
            localElementDictionary.Add(XName.Get("Title", ""), typeof(ddex_net.xml._20120404.ddexC.Title));
            localElementDictionary.Add(XName.Get("DisplayArtistName", ""), typeof(ddex_net.xml._20120404.ddexC.Name));
            localElementDictionary.Add(XName.Get("ContributorName", ""), typeof(ddex_net.xml._20120404.ddexC.Name));
            localElementDictionary.Add(XName.Get("DisplayTitle", ""), typeof(ddex_net.xml._20120404.ddexC.ReferenceTitle));
            localElementDictionary.Add(XName.Get("LabelName", ""), typeof(ddex_net.xml._20120404.ddexC.LabelName));
            localElementDictionary.Add(XName.Get("Genre", ""), typeof(ddex_net.xml._20120404.ddexC.Genre));
            localElementDictionary.Add(XName.Get("PLine", ""), typeof(ddex_net.xml._20120404.ddexC.PLine));
            localElementDictionary.Add(XName.Get("CLine", ""), typeof(ddex_net.xml._20120404.ddexC.CLine));
            localElementDictionary.Add(XName.Get("ReleaseDate", ""), typeof(ddex_net.xml._20120404.ddexC.EventDate));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing a list of CatalogReleaseReferences.
    /// </para>
    /// <para>
    /// Regular expression: (CatalogReleaseReference+)
    /// </para>
    /// </summary>
    public partial class CatalogReleaseReferenceList : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> CatalogReleaseReferenceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CatalogReleaseReferenceList(XElement xe) { return XTypedServices.ToXTypedElement<CatalogReleaseReferenceList>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CatalogReleaseReferenceList() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("CatalogReleaseReference", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a list of CatalogReleaseReferences.
        /// </para>
        /// <para>
        /// Regular expression: (CatalogReleaseReference+)
        /// </para>
        /// </summary>
        public CatalogReleaseReferenceList() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Reference for a ddex:Release (specific to this ddex:Message) that is part of the catalog. This is a ddex:LocalReleaseAnchorReference starting with the letter R.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (CatalogReleaseReference+)
        /// </para>
        /// </summary>
        public IList<string> CatalogReleaseReference {
            get {
                if ((this.CatalogReleaseReferenceField == null)) {
                    this.CatalogReleaseReferenceField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype, XName.Get("CatalogReleaseReference", ""));
                }
                return this.CatalogReleaseReferenceField;
            }
            set {
                if ((value == null)) {
                    this.CatalogReleaseReferenceField = null;
                }
                else {
                    if ((this.CatalogReleaseReferenceField == null)) {
                        this.CatalogReleaseReferenceField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype, value, XName.Get("CatalogReleaseReference", ""));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.CatalogReleaseReferenceField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CatalogReleaseReferenceList", "http://ddex.net/xml/ern/341");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CatalogReleaseReferenceList>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("CatalogReleaseReference", ""), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class CatalogReleaseReferenceLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "R[\\d\\-_a-zA-Z]+"}, 0, XmlSchemaWhiteSpace.Collapse));
            
            private CatalogReleaseReferenceLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:CatalogTransfer.
    /// </para>
    /// <para>
    /// Regular expression: (CatalogTransferCompleted, EffectiveTransferDate?, CatalogReleaseReferenceList, (TerritoryCode+ | ExcludedTerritoryCode+), TransferringFrom, TransferringTo)
    /// </para>
    /// </summary>
    public partial class CatalogTransfer : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<object> TerritoryCodeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<object> ExcludedTerritoryCodeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator CatalogTransfer(XElement xe) { return XTypedServices.ToXTypedElement<CatalogTransfer>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CatalogTransfer() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:CatalogTransfer.
        /// </para>
        /// <para>
        /// Regular expression: (CatalogTransferCompleted, EffectiveTransferDate?, CatalogReleaseReferenceList, (TerritoryCode+ | ExcludedTerritoryCode+), TransferringFrom, TransferringTo)
        /// </para>
        /// </summary>
        public CatalogTransfer() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Flag indicating whether the ddex:CatalogTransfer has been made (=True) or still needs to be made (=False).
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CatalogTransferCompleted, EffectiveTransferDate?, CatalogReleaseReferenceList, (TerritoryCode+ | ExcludedTerritoryCode+), TransferringFrom, TransferringTo)
        /// </para>
        /// </summary>
        public bool CatalogTransferCompleted {
            get {
                XElement x = this.GetElement(XName.Get("CatalogTransferCompleted", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("CatalogTransferCompleted", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the catalog is or was transferred.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CatalogTransferCompleted, EffectiveTransferDate?, CatalogReleaseReferenceList, (TerritoryCode+ | ExcludedTerritoryCode+), TransferringFrom, TransferringTo)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.EventDate EffectiveTransferDate {
            get {
                XElement x = this.GetElement(XName.Get("EffectiveTransferDate", ""));
                return ((ddex_net.xml._20120404.ddexC.EventDate)(x));
            }
            set {
                this.SetElement(XName.Get("EffectiveTransferDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of one or more ddex:Releases contained in the catalog that is or was transferred.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CatalogTransferCompleted, EffectiveTransferDate?, CatalogReleaseReferenceList, (TerritoryCode+ | ExcludedTerritoryCode+), TransferringFrom, TransferringTo)
        /// </para>
        /// </summary>
        public CatalogReleaseReferenceList CatalogReleaseReferenceList {
            get {
                XElement x = this.GetElement(XName.Get("CatalogReleaseReferenceList", ""));
                return ((CatalogReleaseReferenceList)(x));
            }
            set {
                this.SetElement(XName.Get("CatalogReleaseReferenceList", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Territory to which the ddex:CatalogTransfer applies (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:ExcludedTerritory must be present, but not both. 
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (CatalogTransferCompleted, EffectiveTransferDate?, CatalogReleaseReferenceList, (TerritoryCode+ | ExcludedTerritoryCode+), TransferringFrom, TransferringTo)
        /// </para>
        /// </summary>
        public IList<object> TerritoryCode {
            get {
                if ((this.TerritoryCodeField == null)) {
                    this.TerritoryCodeField = new XSimpleList<object>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, XName.Get("TerritoryCode", ""));
                }
                return this.TerritoryCodeField;
            }
            set {
                if ((value == null)) {
                    this.TerritoryCodeField = null;
                }
                else {
                    if ((this.TerritoryCodeField == null)) {
                        this.TerritoryCodeField = XSimpleList<object>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, value, XName.Get("TerritoryCode", ""));
                    }
                    else {
                        XTypedServices.SetList<System.Object>(this.TerritoryCodeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Territory to which the ddex:CatalogTransfer does not apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:Territory must be present, but not both.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (CatalogTransferCompleted, EffectiveTransferDate?, CatalogReleaseReferenceList, (TerritoryCode+ | ExcludedTerritoryCode+), TransferringFrom, TransferringTo)
        /// </para>
        /// </summary>
        public IList<object> ExcludedTerritoryCode {
            get {
                if ((this.ExcludedTerritoryCodeField == null)) {
                    this.ExcludedTerritoryCodeField = new XSimpleList<object>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, XName.Get("ExcludedTerritoryCode", ""));
                }
                return this.ExcludedTerritoryCodeField;
            }
            set {
                if ((value == null)) {
                    this.ExcludedTerritoryCodeField = null;
                }
                else {
                    if ((this.ExcludedTerritoryCodeField == null)) {
                        this.ExcludedTerritoryCodeField = XSimpleList<object>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, value, XName.Get("ExcludedTerritoryCode", ""));
                    }
                    else {
                        XTypedServices.SetList<System.Object>(this.ExcludedTerritoryCodeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the old ddex:RightsController.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CatalogTransferCompleted, EffectiveTransferDate?, CatalogReleaseReferenceList, (TerritoryCode+ | ExcludedTerritoryCode+), TransferringFrom, TransferringTo)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.PartyDescriptor TransferringFrom {
            get {
                XElement x = this.GetElement(XName.Get("TransferringFrom", ""));
                return ((ddex_net.xml._20120404.ddexC.PartyDescriptor)(x));
            }
            set {
                this.SetElement(XName.Get("TransferringFrom", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the new ddex:RightsController.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CatalogTransferCompleted, EffectiveTransferDate?, CatalogReleaseReferenceList, (TerritoryCode+ | ExcludedTerritoryCode+), TransferringFrom, TransferringTo)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.PartyDescriptor TransferringTo {
            get {
                XElement x = this.GetElement(XName.Get("TransferringTo", ""));
                return ((ddex_net.xml._20120404.ddexC.PartyDescriptor)(x));
            }
            set {
                this.SetElement(XName.Get("TransferringTo", ""), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CatalogTransfer", "http://ddex.net/xml/ern/341");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CatalogTransfer>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("CatalogTransferCompleted", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("EffectiveTransferDate", ""), typeof(ddex_net.xml._20120404.ddexC.EventDate));
            localElementDictionary.Add(XName.Get("CatalogReleaseReferenceList", ""), typeof(CatalogReleaseReferenceList));
            localElementDictionary.Add(XName.Get("TerritoryCode", ""), typeof(object));
            localElementDictionary.Add(XName.Get("ExcludedTerritoryCode", ""), typeof(object));
            localElementDictionary.Add(XName.Get("TransferringFrom", ""), typeof(ddex_net.xml._20120404.ddexC.PartyDescriptor));
            localElementDictionary.Add(XName.Get("TransferringTo", ""), typeof(ddex_net.xml._20120404.ddexC.PartyDescriptor));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:Collection. ddex:Collections referenced from ddex:Video ddex:Resources are of ddex:CollectionType ddex:VideoChapter . ddex:Collections referenced from a ddex:Release composite are of ddex:CollectionType ddex:Series, ddex:Season or ddex:Episode.
    /// </para>
    /// <para>
    /// Regular expression: (CollectionId+, CollectionType*, CollectionReference, Title*, Contributor*, Character*, CollectionCollectionReferenceList?, IsComplete, Duration?, DurationOfMusicalContent?, CreationDate?, OriginalReleaseDate?, OriginalLanguage?, CollectionDetailsByTerritory*, CollectionResourceReferenceList?, CollectionWorkReferenceList?, RepresentativeImageReference?, PLine*, CLine*)
    /// </para>
    /// </summary>
    public partial class Collection : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.CollectionId> CollectionIdField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.CollectionType> CollectionTypeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Title> TitleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.ResourceContributor> ContributorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Character> CharacterField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CollectionDetailsByTerritory> CollectionDetailsByTerritoryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.PLine> PLineField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.CLine> CLineField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Collection(XElement xe) { return XTypedServices.ToXTypedElement<Collection>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Collection() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("CollectionId", "")), new NamedContentModelEntity(XName.Get("CollectionType", "")), new NamedContentModelEntity(XName.Get("CollectionReference", "")), new NamedContentModelEntity(XName.Get("Title", "")), new NamedContentModelEntity(XName.Get("Contributor", "")), new NamedContentModelEntity(XName.Get("Character", "")), new NamedContentModelEntity(XName.Get("CollectionCollectionReferenceList", "")), new NamedContentModelEntity(XName.Get("IsComplete", "")), new NamedContentModelEntity(XName.Get("Duration", "")), new NamedContentModelEntity(XName.Get("DurationOfMusicalContent", "")), new NamedContentModelEntity(XName.Get("CreationDate", "")), new NamedContentModelEntity(XName.Get("OriginalReleaseDate", "")), new NamedContentModelEntity(XName.Get("OriginalLanguage", "")), new NamedContentModelEntity(XName.Get("CollectionDetailsByTerritory", "")), new NamedContentModelEntity(XName.Get("CollectionResourceReferenceList", "")), new NamedContentModelEntity(XName.Get("CollectionWorkReferenceList", "")), new NamedContentModelEntity(XName.Get("RepresentativeImageReference", "")), new NamedContentModelEntity(XName.Get("PLine", "")), new NamedContentModelEntity(XName.Get("CLine", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Collection. ddex:Collections referenced from ddex:Video ddex:Resources are of ddex:CollectionType ddex:VideoChapter . ddex:Collections referenced from a ddex:Release composite are of ddex:CollectionType ddex:Series, ddex:Season or ddex:Episode.
        /// </para>
        /// <para>
        /// Regular expression: (CollectionId+, CollectionType*, CollectionReference, Title*, Contributor*, Character*, CollectionCollectionReferenceList?, IsComplete, Duration?, DurationOfMusicalContent?, CreationDate?, OriginalReleaseDate?, OriginalLanguage?, CollectionDetailsByTerritory*, CollectionResourceReferenceList?, CollectionWorkReferenceList?, RepresentativeImageReference?, PLine*, CLine*)
        /// </para>
        /// </summary>
        public Collection() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of an ddex:Identifier of the ddex:Collection.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (CollectionId+, CollectionType*, CollectionReference, Title*, Contributor*, Character*, CollectionCollectionReferenceList?, IsComplete, Duration?, DurationOfMusicalContent?, CreationDate?, OriginalReleaseDate?, OriginalLanguage?, CollectionDetailsByTerritory*, CollectionResourceReferenceList?, CollectionWorkReferenceList?, RepresentativeImageReference?, PLine*, CLine*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.CollectionId> CollectionId {
            get {
                if ((this.CollectionIdField == null)) {
                    this.CollectionIdField = new XTypedList<ddex_net.xml._20120404.ddexC.CollectionId>(this, LinqToXsdTypeManager.Instance, XName.Get("CollectionId", ""));
                }
                return this.CollectionIdField;
            }
            set {
                if ((value == null)) {
                    this.CollectionIdField = null;
                }
                else {
                    if ((this.CollectionIdField == null)) {
                        this.CollectionIdField = XTypedList<ddex_net.xml._20120404.ddexC.CollectionId>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CollectionId", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.CollectionId>(this.CollectionIdField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:Type of the ddex:Collection.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (CollectionId+, CollectionType*, CollectionReference, Title*, Contributor*, Character*, CollectionCollectionReferenceList?, IsComplete, Duration?, DurationOfMusicalContent?, CreationDate?, OriginalReleaseDate?, OriginalLanguage?, CollectionDetailsByTerritory*, CollectionResourceReferenceList?, CollectionWorkReferenceList?, RepresentativeImageReference?, PLine*, CLine*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.CollectionType> CollectionType {
            get {
                if ((this.CollectionTypeField == null)) {
                    this.CollectionTypeField = new XTypedList<ddex_net.xml._20120404.ddexC.CollectionType>(this, LinqToXsdTypeManager.Instance, XName.Get("CollectionType", ""));
                }
                return this.CollectionTypeField;
            }
            set {
                if ((value == null)) {
                    this.CollectionTypeField = null;
                }
                else {
                    if ((this.CollectionTypeField == null)) {
                        this.CollectionTypeField = XTypedList<ddex_net.xml._20120404.ddexC.CollectionType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CollectionType", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.CollectionType>(this.CollectionTypeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Identifier (specific to the ddex:Message) of the ddex:Collection within the ddex:Release which contains it. This is a ddex:LocalCollectionAnchor starting with the letter X.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CollectionId+, CollectionType*, CollectionReference, Title*, Contributor*, Character*, CollectionCollectionReferenceList?, IsComplete, Duration?, DurationOfMusicalContent?, CreationDate?, OriginalReleaseDate?, OriginalLanguage?, CollectionDetailsByTerritory*, CollectionResourceReferenceList?, CollectionWorkReferenceList?, RepresentativeImageReference?, PLine*, CLine*)
        /// </para>
        /// </summary>
        public string CollectionReference {
            get {
                XElement x = this.GetElement(XName.Get("CollectionReference", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("CollectionReference", ""), value, "CollectionReference", CollectionReferenceLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Title of the ddex:Collection.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (CollectionId+, CollectionType*, CollectionReference, Title*, Contributor*, Character*, CollectionCollectionReferenceList?, IsComplete, Duration?, DurationOfMusicalContent?, CreationDate?, OriginalReleaseDate?, OriginalLanguage?, CollectionDetailsByTerritory*, CollectionResourceReferenceList?, CollectionWorkReferenceList?, RepresentativeImageReference?, PLine*, CLine*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Title> Title {
            get {
                if ((this.TitleField == null)) {
                    this.TitleField = new XTypedList<ddex_net.xml._20120404.ddexC.Title>(this, LinqToXsdTypeManager.Instance, XName.Get("Title", ""));
                }
                return this.TitleField;
            }
            set {
                if ((value == null)) {
                    this.TitleField = null;
                }
                else {
                    if ((this.TitleField == null)) {
                        this.TitleField = XTypedList<ddex_net.xml._20120404.ddexC.Title>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Title", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Title>(this.TitleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details a ddex:Contributor to the ddex:Collection.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (CollectionId+, CollectionType*, CollectionReference, Title*, Contributor*, Character*, CollectionCollectionReferenceList?, IsComplete, Duration?, DurationOfMusicalContent?, CreationDate?, OriginalReleaseDate?, OriginalLanguage?, CollectionDetailsByTerritory*, CollectionResourceReferenceList?, CollectionWorkReferenceList?, RepresentativeImageReference?, PLine*, CLine*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.ResourceContributor> Contributor {
            get {
                if ((this.ContributorField == null)) {
                    this.ContributorField = new XTypedList<ddex_net.xml._20120404.ddexC.ResourceContributor>(this, LinqToXsdTypeManager.Instance, XName.Get("Contributor", ""));
                }
                return this.ContributorField;
            }
            set {
                if ((value == null)) {
                    this.ContributorField = null;
                }
                else {
                    if ((this.ContributorField == null)) {
                        this.ContributorField = XTypedList<ddex_net.xml._20120404.ddexC.ResourceContributor>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Contributor", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.ResourceContributor>(this.ContributorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Character in the ddex:Collection. A ddex:Character may be described through ddex:Name, ddex:Identifier and Roles.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (CollectionId+, CollectionType*, CollectionReference, Title*, Contributor*, Character*, CollectionCollectionReferenceList?, IsComplete, Duration?, DurationOfMusicalContent?, CreationDate?, OriginalReleaseDate?, OriginalLanguage?, CollectionDetailsByTerritory*, CollectionResourceReferenceList?, CollectionWorkReferenceList?, RepresentativeImageReference?, PLine*, CLine*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Character> Character {
            get {
                if ((this.CharacterField == null)) {
                    this.CharacterField = new XTypedList<ddex_net.xml._20120404.ddexC.Character>(this, LinqToXsdTypeManager.Instance, XName.Get("Character", ""));
                }
                return this.CharacterField;
            }
            set {
                if ((value == null)) {
                    this.CharacterField = null;
                }
                else {
                    if ((this.CharacterField == null)) {
                        this.CharacterField = XTypedList<ddex_net.xml._20120404.ddexC.Character>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Character", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Character>(this.CharacterField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a list of ddex:CollectionCollectionReferences for a ddex:Collection (specific to this ddex:Message).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CollectionId+, CollectionType*, CollectionReference, Title*, Contributor*, Character*, CollectionCollectionReferenceList?, IsComplete, Duration?, DurationOfMusicalContent?, CreationDate?, OriginalReleaseDate?, OriginalLanguage?, CollectionDetailsByTerritory*, CollectionResourceReferenceList?, CollectionWorkReferenceList?, RepresentativeImageReference?, PLine*, CLine*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.CollectionCollectionReferenceList CollectionCollectionReferenceList {
            get {
                XElement x = this.GetElement(XName.Get("CollectionCollectionReferenceList", ""));
                return ((ddex_net.xml._20120404.ddexC.CollectionCollectionReferenceList)(x));
            }
            set {
                this.SetElement(XName.Get("CollectionCollectionReferenceList", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ddex:Collection is complete (=True) or not (=False). Only one of the Elements ddex:IsComplete here and in the ern:CollectionDetailsByTerritory is valid for a given ern:Collection.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CollectionId+, CollectionType*, CollectionReference, Title*, Contributor*, Character*, CollectionCollectionReferenceList?, IsComplete, Duration?, DurationOfMusicalContent?, CreationDate?, OriginalReleaseDate?, OriginalLanguage?, CollectionDetailsByTerritory*, CollectionResourceReferenceList?, CollectionWorkReferenceList?, RepresentativeImageReference?, PLine*, CLine*)
        /// </para>
        /// </summary>
        public bool IsComplete {
            get {
                XElement x = this.GetElement(XName.Get("IsComplete", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("IsComplete", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The sum of the ddex:Durations of all ddex:Resources contained in the ddexC:Collection (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CollectionId+, CollectionType*, CollectionReference, Title*, Contributor*, Character*, CollectionCollectionReferenceList?, IsComplete, Duration?, DurationOfMusicalContent?, CreationDate?, OriginalReleaseDate?, OriginalLanguage?, CollectionDetailsByTerritory*, CollectionResourceReferenceList?, CollectionWorkReferenceList?, RepresentativeImageReference?, PLine*, CLine*)
        /// </para>
        /// </summary>
        public System.Nullable<System.TimeSpan> Duration {
            get {
                XElement x = this.GetElement(XName.Get("Duration", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
            set {
                this.SetElement(XName.Get("Duration", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Duration of the musical content (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CollectionId+, CollectionType*, CollectionReference, Title*, Contributor*, Character*, CollectionCollectionReferenceList?, IsComplete, Duration?, DurationOfMusicalContent?, CreationDate?, OriginalReleaseDate?, OriginalLanguage?, CollectionDetailsByTerritory*, CollectionResourceReferenceList?, CollectionWorkReferenceList?, RepresentativeImageReference?, PLine*, CLine*)
        /// </para>
        /// </summary>
        public System.Nullable<System.TimeSpan> DurationOfMusicalContent {
            get {
                XElement x = this.GetElement(XName.Get("DurationOfMusicalContent", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
            set {
                this.SetElement(XName.Get("DurationOfMusicalContent", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ddex:Collection was created.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CollectionId+, CollectionType*, CollectionReference, Title*, Contributor*, Character*, CollectionCollectionReferenceList?, IsComplete, Duration?, DurationOfMusicalContent?, CreationDate?, OriginalReleaseDate?, OriginalLanguage?, CollectionDetailsByTerritory*, CollectionResourceReferenceList?, CollectionWorkReferenceList?, RepresentativeImageReference?, PLine*, CLine*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.EventDate CreationDate {
            get {
                XElement x = this.GetElement(XName.Get("CreationDate", ""));
                return ((ddex_net.xml._20120404.ddexC.EventDate)(x));
            }
            set {
                this.SetElement(XName.Get("CreationDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ddex:Collection was or will be first made available for Usage, whether for physical or electronic/online distribution (in ISO 8601:2004 format: YYYY-MM-DD).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CollectionId+, CollectionType*, CollectionReference, Title*, Contributor*, Character*, CollectionCollectionReferenceList?, IsComplete, Duration?, DurationOfMusicalContent?, CreationDate?, OriginalReleaseDate?, OriginalLanguage?, CollectionDetailsByTerritory*, CollectionResourceReferenceList?, CollectionWorkReferenceList?, RepresentativeImageReference?, PLine*, CLine*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.EventDate OriginalReleaseDate {
            get {
                XElement x = this.GetElement(XName.Get("OriginalReleaseDate", ""));
                return ((ddex_net.xml._20120404.ddexC.EventDate)(x));
            }
            set {
                this.SetElement(XName.Get("OriginalReleaseDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The orignal ddex:Language of the ddex:Collection (represented by an ISO 639-2 iso639a2:LanguageCode).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CollectionId+, CollectionType*, CollectionReference, Title*, Contributor*, Character*, CollectionCollectionReferenceList?, IsComplete, Duration?, DurationOfMusicalContent?, CreationDate?, OriginalReleaseDate?, OriginalLanguage?, CollectionDetailsByTerritory*, CollectionResourceReferenceList?, CollectionWorkReferenceList?, RepresentativeImageReference?, PLine*, CLine*)
        /// </para>
        /// </summary>
        public string OriginalLanguage {
            get {
                XElement x = this.GetElement(XName.Get("OriginalLanguage", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("OriginalLanguage", ""), value, "OriginalLanguage", global::ddex_net.xml._20120404.iso639a2.LanguageCode.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:Descriptors and other attributes of the ddex:Collection which may vary according to ddex:Territory of release.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (CollectionId+, CollectionType*, CollectionReference, Title*, Contributor*, Character*, CollectionCollectionReferenceList?, IsComplete, Duration?, DurationOfMusicalContent?, CreationDate?, OriginalReleaseDate?, OriginalLanguage?, CollectionDetailsByTerritory*, CollectionResourceReferenceList?, CollectionWorkReferenceList?, RepresentativeImageReference?, PLine*, CLine*)
        /// </para>
        /// </summary>
        public IList<CollectionDetailsByTerritory> CollectionDetailsByTerritory {
            get {
                if ((this.CollectionDetailsByTerritoryField == null)) {
                    this.CollectionDetailsByTerritoryField = new XTypedList<CollectionDetailsByTerritory>(this, LinqToXsdTypeManager.Instance, XName.Get("CollectionDetailsByTerritory", ""));
                }
                return this.CollectionDetailsByTerritoryField;
            }
            set {
                if ((value == null)) {
                    this.CollectionDetailsByTerritoryField = null;
                }
                else {
                    if ((this.CollectionDetailsByTerritoryField == null)) {
                        this.CollectionDetailsByTerritoryField = XTypedList<CollectionDetailsByTerritory>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CollectionDetailsByTerritory", ""));
                    }
                    else {
                        XTypedServices.SetList<CollectionDetailsByTerritory>(this.CollectionDetailsByTerritoryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a list of ddex:CollectionResourceReferences for a ddex:Resource (specific to this ddex:Message).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CollectionId+, CollectionType*, CollectionReference, Title*, Contributor*, Character*, CollectionCollectionReferenceList?, IsComplete, Duration?, DurationOfMusicalContent?, CreationDate?, OriginalReleaseDate?, OriginalLanguage?, CollectionDetailsByTerritory*, CollectionResourceReferenceList?, CollectionWorkReferenceList?, RepresentativeImageReference?, PLine*, CLine*)
        /// </para>
        /// </summary>
        public CollectionResourceReferenceList CollectionResourceReferenceList {
            get {
                XElement x = this.GetElement(XName.Get("CollectionResourceReferenceList", ""));
                return ((CollectionResourceReferenceList)(x));
            }
            set {
                this.SetElement(XName.Get("CollectionResourceReferenceList", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a list of ddex:CollectionWorkReferences for a ddex:Work (specific to this ddex:Message).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CollectionId+, CollectionType*, CollectionReference, Title*, Contributor*, Character*, CollectionCollectionReferenceList?, IsComplete, Duration?, DurationOfMusicalContent?, CreationDate?, OriginalReleaseDate?, OriginalLanguage?, CollectionDetailsByTerritory*, CollectionResourceReferenceList?, CollectionWorkReferenceList?, RepresentativeImageReference?, PLine*, CLine*)
        /// </para>
        /// </summary>
        public CollectionWorkReferenceList CollectionWorkReferenceList {
            get {
                XElement x = this.GetElement(XName.Get("CollectionWorkReferenceList", ""));
                return ((CollectionWorkReferenceList)(x));
            }
            set {
                this.SetElement(XName.Get("CollectionWorkReferenceList", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Reference for an ddex:Image (specific to this ddex:Message). This is a ddex:LocalResourceAnchorReference starting with the letter A.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CollectionId+, CollectionType*, CollectionReference, Title*, Contributor*, Character*, CollectionCollectionReferenceList?, IsComplete, Duration?, DurationOfMusicalContent?, CreationDate?, OriginalReleaseDate?, OriginalLanguage?, CollectionDetailsByTerritory*, CollectionResourceReferenceList?, CollectionWorkReferenceList?, RepresentativeImageReference?, PLine*, CLine*)
        /// </para>
        /// </summary>
        public string RepresentativeImageReference {
            get {
                XElement x = this.GetElement(XName.Get("RepresentativeImageReference", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("RepresentativeImageReference", ""), value, "RepresentativeImageReference", RepresentativeImageReferenceLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:PLine for the ern:Collection.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (CollectionId+, CollectionType*, CollectionReference, Title*, Contributor*, Character*, CollectionCollectionReferenceList?, IsComplete, Duration?, DurationOfMusicalContent?, CreationDate?, OriginalReleaseDate?, OriginalLanguage?, CollectionDetailsByTerritory*, CollectionResourceReferenceList?, CollectionWorkReferenceList?, RepresentativeImageReference?, PLine*, CLine*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.PLine> PLine {
            get {
                if ((this.PLineField == null)) {
                    this.PLineField = new XTypedList<ddex_net.xml._20120404.ddexC.PLine>(this, LinqToXsdTypeManager.Instance, XName.Get("PLine", ""));
                }
                return this.PLineField;
            }
            set {
                if ((value == null)) {
                    this.PLineField = null;
                }
                else {
                    if ((this.PLineField == null)) {
                        this.PLineField = XTypedList<ddex_net.xml._20120404.ddexC.PLine>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("PLine", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.PLine>(this.PLineField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:CLine for the ern:Collection.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (CollectionId+, CollectionType*, CollectionReference, Title*, Contributor*, Character*, CollectionCollectionReferenceList?, IsComplete, Duration?, DurationOfMusicalContent?, CreationDate?, OriginalReleaseDate?, OriginalLanguage?, CollectionDetailsByTerritory*, CollectionResourceReferenceList?, CollectionWorkReferenceList?, RepresentativeImageReference?, PLine*, CLine*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.CLine> CLine {
            get {
                if ((this.CLineField == null)) {
                    this.CLineField = new XTypedList<ddex_net.xml._20120404.ddexC.CLine>(this, LinqToXsdTypeManager.Instance, XName.Get("CLine", ""));
                }
                return this.CLineField;
            }
            set {
                if ((value == null)) {
                    this.CLineField = null;
                }
                else {
                    if ((this.CLineField == null)) {
                        this.CLineField = XTypedList<ddex_net.xml._20120404.ddexC.CLine>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CLine", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.CLine>(this.CLineField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the ddex:Collection as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Collection", "http://ddex.net/xml/ern/341");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Collection>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("CollectionId", ""), typeof(ddex_net.xml._20120404.ddexC.CollectionId));
            localElementDictionary.Add(XName.Get("CollectionType", ""), typeof(ddex_net.xml._20120404.ddexC.CollectionType));
            localElementDictionary.Add(XName.Get("CollectionReference", ""), typeof(string));
            localElementDictionary.Add(XName.Get("Title", ""), typeof(ddex_net.xml._20120404.ddexC.Title));
            localElementDictionary.Add(XName.Get("Contributor", ""), typeof(ddex_net.xml._20120404.ddexC.ResourceContributor));
            localElementDictionary.Add(XName.Get("Character", ""), typeof(ddex_net.xml._20120404.ddexC.Character));
            localElementDictionary.Add(XName.Get("CollectionCollectionReferenceList", ""), typeof(ddex_net.xml._20120404.ddexC.CollectionCollectionReferenceList));
            localElementDictionary.Add(XName.Get("IsComplete", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("Duration", ""), typeof(System.TimeSpan));
            localElementDictionary.Add(XName.Get("DurationOfMusicalContent", ""), typeof(System.TimeSpan));
            localElementDictionary.Add(XName.Get("CreationDate", ""), typeof(ddex_net.xml._20120404.ddexC.EventDate));
            localElementDictionary.Add(XName.Get("OriginalReleaseDate", ""), typeof(ddex_net.xml._20120404.ddexC.EventDate));
            localElementDictionary.Add(XName.Get("OriginalLanguage", ""), typeof(string));
            localElementDictionary.Add(XName.Get("CollectionDetailsByTerritory", ""), typeof(CollectionDetailsByTerritory));
            localElementDictionary.Add(XName.Get("CollectionResourceReferenceList", ""), typeof(CollectionResourceReferenceList));
            localElementDictionary.Add(XName.Get("CollectionWorkReferenceList", ""), typeof(CollectionWorkReferenceList));
            localElementDictionary.Add(XName.Get("RepresentativeImageReference", ""), typeof(string));
            localElementDictionary.Add(XName.Get("PLine", ""), typeof(ddex_net.xml._20120404.ddexC.PLine));
            localElementDictionary.Add(XName.Get("CLine", ""), typeof(ddex_net.xml._20120404.ddexC.CLine));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class CollectionReferenceLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "X[\\d\\-_a-zA-Z]+"}, 0, XmlSchemaWhiteSpace.Collapse));
            
            private CollectionReferenceLocalType() {
            }
        }
        
        private class RepresentativeImageReferenceLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "A[\\d\\-_a-zA-Z]+"}, 0, XmlSchemaWhiteSpace.Collapse));
            
            private RepresentativeImageReferenceLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of ddex:Descriptors and other attributes of a ddex:Collection which may vary according to ddex:Territory of release. 
    /// </para>
    /// <para>
    /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, Contributor*, IsComplete?, Character*)
    /// </para>
    /// </summary>
    public partial class CollectionDetailsByTerritory : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<object> TerritoryCodeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<object> ExcludedTerritoryCodeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Title> TitleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.ResourceContributor> ContributorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Character> CharacterField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator CollectionDetailsByTerritory(XElement xe) { return XTypedServices.ToXTypedElement<CollectionDetailsByTerritory>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CollectionDetailsByTerritory() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:Descriptors and other attributes of a ddex:Collection which may vary according to ddex:Territory of release. 
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, Contributor*, IsComplete?, Character*)
        /// </para>
        /// </summary>
        public CollectionDetailsByTerritory() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Territory to which the ddex:Collection details apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:ExcludedTerritory shall be present, but not both. 
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, Contributor*, IsComplete?, Character*)
        /// </para>
        /// </summary>
        public IList<object> TerritoryCode {
            get {
                if ((this.TerritoryCodeField == null)) {
                    this.TerritoryCodeField = new XSimpleList<object>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, XName.Get("TerritoryCode", ""));
                }
                return this.TerritoryCodeField;
            }
            set {
                if ((value == null)) {
                    this.TerritoryCodeField = null;
                }
                else {
                    if ((this.TerritoryCodeField == null)) {
                        this.TerritoryCodeField = XSimpleList<object>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, value, XName.Get("TerritoryCode", ""));
                    }
                    else {
                        XTypedServices.SetList<System.Object>(this.TerritoryCodeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Territory to which the ddex:Collection details do not apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:Territory shall be present, but not both.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, Contributor*, IsComplete?, Character*)
        /// </para>
        /// </summary>
        public IList<object> ExcludedTerritoryCode {
            get {
                if ((this.ExcludedTerritoryCodeField == null)) {
                    this.ExcludedTerritoryCodeField = new XSimpleList<object>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, XName.Get("ExcludedTerritoryCode", ""));
                }
                return this.ExcludedTerritoryCodeField;
            }
            set {
                if ((value == null)) {
                    this.ExcludedTerritoryCodeField = null;
                }
                else {
                    if ((this.ExcludedTerritoryCodeField == null)) {
                        this.ExcludedTerritoryCodeField = XSimpleList<object>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, value, XName.Get("ExcludedTerritoryCode", ""));
                    }
                    else {
                        XTypedServices.SetList<System.Object>(this.ExcludedTerritoryCodeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Title of the ddex:Collection.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, Contributor*, IsComplete?, Character*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Title> Title {
            get {
                if ((this.TitleField == null)) {
                    this.TitleField = new XTypedList<ddex_net.xml._20120404.ddexC.Title>(this, LinqToXsdTypeManager.Instance, XName.Get("Title", ""));
                }
                return this.TitleField;
            }
            set {
                if ((value == null)) {
                    this.TitleField = null;
                }
                else {
                    if ((this.TitleField == null)) {
                        this.TitleField = XTypedList<ddex_net.xml._20120404.ddexC.Title>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Title", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Title>(this.TitleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Contributor to the ddex:Collection.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, Contributor*, IsComplete?, Character*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.ResourceContributor> Contributor {
            get {
                if ((this.ContributorField == null)) {
                    this.ContributorField = new XTypedList<ddex_net.xml._20120404.ddexC.ResourceContributor>(this, LinqToXsdTypeManager.Instance, XName.Get("Contributor", ""));
                }
                return this.ContributorField;
            }
            set {
                if ((value == null)) {
                    this.ContributorField = null;
                }
                else {
                    if ((this.ContributorField == null)) {
                        this.ContributorField = XTypedList<ddex_net.xml._20120404.ddexC.ResourceContributor>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Contributor", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.ResourceContributor>(this.ContributorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ddex:Collection is complete (=True) or not (=False). Only one of the Elements ddex:IsComplete here and in the Collection is valid for a given Collection.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, Contributor*, IsComplete?, Character*)
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsComplete {
            get {
                XElement x = this.GetElement(XName.Get("IsComplete", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("IsComplete", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Character in the ddex:Collection. A ddex:Character may be described through ddex:Name, ddex:Identifier and Roles.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, Contributor*, IsComplete?, Character*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Character> Character {
            get {
                if ((this.CharacterField == null)) {
                    this.CharacterField = new XTypedList<ddex_net.xml._20120404.ddexC.Character>(this, LinqToXsdTypeManager.Instance, XName.Get("Character", ""));
                }
                return this.CharacterField;
            }
            set {
                if ((value == null)) {
                    this.CharacterField = null;
                }
                else {
                    if ((this.CharacterField == null)) {
                        this.CharacterField = XTypedList<ddex_net.xml._20120404.ddexC.Character>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Character", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Character>(this.CharacterField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CollectionDetailsByTerritory", "http://ddex.net/xml/ern/341");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CollectionDetailsByTerritory>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("TerritoryCode", ""), typeof(object));
            localElementDictionary.Add(XName.Get("ExcludedTerritoryCode", ""), typeof(object));
            localElementDictionary.Add(XName.Get("Title", ""), typeof(ddex_net.xml._20120404.ddexC.Title));
            localElementDictionary.Add(XName.Get("Contributor", ""), typeof(ddex_net.xml._20120404.ddexC.ResourceContributor));
            localElementDictionary.Add(XName.Get("IsComplete", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("Character", ""), typeof(ddex_net.xml._20120404.ddexC.Character));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of one or more ddex:Collections.
    /// </para>
    /// <para>
    /// Regular expression: (Collection+)
    /// </para>
    /// </summary>
    public partial class CollectionList : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Collection> CollectionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CollectionList(XElement xe) { return XTypedServices.ToXTypedElement<CollectionList>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CollectionList() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Collection", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of one or more ddex:Collections.
        /// </para>
        /// <para>
        /// Regular expression: (Collection+)
        /// </para>
        /// </summary>
        public CollectionList() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Collection contained in a ddex:Resource.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Collection+)
        /// </para>
        /// </summary>
        public IList<Collection> Collection {
            get {
                if ((this.CollectionField == null)) {
                    this.CollectionField = new XTypedList<Collection>(this, LinqToXsdTypeManager.Instance, XName.Get("Collection", ""));
                }
                return this.CollectionField;
            }
            set {
                if ((value == null)) {
                    this.CollectionField = null;
                }
                else {
                    if ((this.CollectionField == null)) {
                        this.CollectionField = XTypedList<Collection>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Collection", ""));
                    }
                    else {
                        XTypedServices.SetList<Collection>(this.CollectionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the CollectionList as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CollectionList", "http://ddex.net/xml/ern/341");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CollectionList>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Collection", ""), typeof(Collection));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing a ddex:CollectionResourceReference.
    /// </para>
    /// <para>
    /// Regular expression: (CollectionResourceReference1, Duration?)
    /// </para>
    /// </summary>
    public partial class CollectionResourceReference : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CollectionResourceReference(XElement xe) { return XTypedServices.ToXTypedElement<CollectionResourceReference>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CollectionResourceReference() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("CollectionResourceReference", "")), new NamedContentModelEntity(XName.Get("Duration", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a ddex:CollectionResourceReference.
        /// </para>
        /// <para>
        /// Regular expression: (CollectionResourceReference1, Duration?)
        /// </para>
        /// </summary>
        public CollectionResourceReference() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Reference for a ddex:Resource (specific to this ddex:Message). This is a ddex:LocalResourceAnchorReference starting with the letter A.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CollectionResourceReference1, Duration?)
        /// </para>
        /// </summary>
        public string CollectionResourceReference1 {
            get {
                XElement x = this.GetElement(XName.Get("CollectionResourceReference", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("CollectionResourceReference", ""), value, "CollectionResourceReference1", CollectionResourceReference1LocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Duration of the use of the ddex:Resource that is referenced in the ddex:CollectionResourceReference (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CollectionResourceReference1, Duration?)
        /// </para>
        /// </summary>
        public System.Nullable<System.TimeSpan> Duration {
            get {
                XElement x = this.GetElement(XName.Get("Duration", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
            set {
                this.SetElement(XName.Get("Duration", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CollectionResourceReference", "http://ddex.net/xml/ern/341");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CollectionResourceReference>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("CollectionResourceReference", ""), typeof(string));
            localElementDictionary.Add(XName.Get("Duration", ""), typeof(System.TimeSpan));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class CollectionResourceReference1LocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "A[\\d\\-_a-zA-Z]+"}, 0, XmlSchemaWhiteSpace.Collapse));
            
            private CollectionResourceReference1LocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing a list of ddex:CollectionResourceReferences.
    /// </para>
    /// <para>
    /// Regular expression: (CollectionResourceReference+)
    /// </para>
    /// </summary>
    public partial class CollectionResourceReferenceList : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CollectionResourceReference> CollectionResourceReferenceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CollectionResourceReferenceList(XElement xe) { return XTypedServices.ToXTypedElement<CollectionResourceReferenceList>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CollectionResourceReferenceList() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("CollectionResourceReference", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a list of ddex:CollectionResourceReferences.
        /// </para>
        /// <para>
        /// Regular expression: (CollectionResourceReference+)
        /// </para>
        /// </summary>
        public CollectionResourceReferenceList() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a ddex:CollectionResourceReference for a ddex:Collection (specific to this ddex:Message).
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (CollectionResourceReference+)
        /// </para>
        /// </summary>
        public IList<CollectionResourceReference> CollectionResourceReference {
            get {
                if ((this.CollectionResourceReferenceField == null)) {
                    this.CollectionResourceReferenceField = new XTypedList<CollectionResourceReference>(this, LinqToXsdTypeManager.Instance, XName.Get("CollectionResourceReference", ""));
                }
                return this.CollectionResourceReferenceField;
            }
            set {
                if ((value == null)) {
                    this.CollectionResourceReferenceField = null;
                }
                else {
                    if ((this.CollectionResourceReferenceField == null)) {
                        this.CollectionResourceReferenceField = XTypedList<CollectionResourceReference>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CollectionResourceReference", ""));
                    }
                    else {
                        XTypedServices.SetList<CollectionResourceReference>(this.CollectionResourceReferenceField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CollectionResourceReferenceList", "http://ddex.net/xml/ern/341");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CollectionResourceReferenceList>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("CollectionResourceReference", ""), typeof(CollectionResourceReference));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing a ddex:CollectionWorkReference.
    /// </para>
    /// <para>
    /// Regular expression: (CollectionWorkReference1, Duration?)
    /// </para>
    /// </summary>
    public partial class CollectionWorkReference : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CollectionWorkReference(XElement xe) { return XTypedServices.ToXTypedElement<CollectionWorkReference>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CollectionWorkReference() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("CollectionWorkReference", "")), new NamedContentModelEntity(XName.Get("Duration", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a ddex:CollectionWorkReference.
        /// </para>
        /// <para>
        /// Regular expression: (CollectionWorkReference1, Duration?)
        /// </para>
        /// </summary>
        public CollectionWorkReference() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Reference for a ddex:Work (specific to this ddex:Message). This is a ddex:LocalMusicalWorkAnchorReference starting with the letter W.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CollectionWorkReference1, Duration?)
        /// </para>
        /// </summary>
        public string CollectionWorkReference1 {
            get {
                XElement x = this.GetElement(XName.Get("CollectionWorkReference", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("CollectionWorkReference", ""), value, "CollectionWorkReference1", CollectionWorkReference1LocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Duration of the use of the ddex:Work that is referenced in the ddex:CollectionWorkReference (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CollectionWorkReference1, Duration?)
        /// </para>
        /// </summary>
        public System.Nullable<System.TimeSpan> Duration {
            get {
                XElement x = this.GetElement(XName.Get("Duration", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
            set {
                this.SetElement(XName.Get("Duration", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CollectionWorkReference", "http://ddex.net/xml/ern/341");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CollectionWorkReference>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("CollectionWorkReference", ""), typeof(string));
            localElementDictionary.Add(XName.Get("Duration", ""), typeof(System.TimeSpan));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class CollectionWorkReference1LocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "W[\\d\\-_a-zA-Z]+"}, 0, XmlSchemaWhiteSpace.Collapse));
            
            private CollectionWorkReference1LocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing a list of ddex:CollectionWorkReferences.
    /// </para>
    /// <para>
    /// Regular expression: (CollectionWorkReference+)
    /// </para>
    /// </summary>
    public partial class CollectionWorkReferenceList : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CollectionWorkReference> CollectionWorkReferenceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CollectionWorkReferenceList(XElement xe) { return XTypedServices.ToXTypedElement<CollectionWorkReferenceList>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CollectionWorkReferenceList() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("CollectionWorkReference", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a list of ddex:CollectionWorkReferences.
        /// </para>
        /// <para>
        /// Regular expression: (CollectionWorkReference+)
        /// </para>
        /// </summary>
        public CollectionWorkReferenceList() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a ddex:CollectionWorkReference for a ddex:Collection (specific to this ddex:Message).
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (CollectionWorkReference+)
        /// </para>
        /// </summary>
        public IList<CollectionWorkReference> CollectionWorkReference {
            get {
                if ((this.CollectionWorkReferenceField == null)) {
                    this.CollectionWorkReferenceField = new XTypedList<CollectionWorkReference>(this, LinqToXsdTypeManager.Instance, XName.Get("CollectionWorkReference", ""));
                }
                return this.CollectionWorkReferenceField;
            }
            set {
                if ((value == null)) {
                    this.CollectionWorkReferenceField = null;
                }
                else {
                    if ((this.CollectionWorkReferenceField == null)) {
                        this.CollectionWorkReferenceField = XTypedList<CollectionWorkReference>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CollectionWorkReference", ""));
                    }
                    else {
                        XTypedServices.SetList<CollectionWorkReference>(this.CollectionWorkReferenceField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CollectionWorkReferenceList", "http://ddex.net/xml/ern/341");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CollectionWorkReferenceList>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("CollectionWorkReference", ""), typeof(CollectionWorkReference));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a condition.
    /// </para>
    /// <para>
    /// Regular expression: (Value, Unit, RelationalRelator)
    /// </para>
    /// </summary>
    public partial class Condition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Condition(XElement xe) { return XTypedServices.ToXTypedElement<Condition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Condition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Value", "")), new NamedContentModelEntity(XName.Get("Unit", "")), new NamedContentModelEntity(XName.Get("RelationalRelator", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a condition.
        /// </para>
        /// <para>
        /// Regular expression: (Value, Unit, RelationalRelator)
        /// </para>
        /// </summary>
        public Condition() {
        }
        
        /// <summary>
        /// <para>
        /// The numeric value of the condition.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Value, Unit, RelationalRelator)
        /// </para>
        /// </summary>
        public decimal Value {
            get {
                XElement x = this.GetElement(XName.Get("Value", ""));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElement(XName.Get("Value", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UnitOfMeasure for the condition value.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Value, Unit, RelationalRelator)
        /// </para>
        /// </summary>
        public string Unit {
            get {
                XElement x = this.GetElement(XName.Get("Unit", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("Unit", ""), value, "Unit", global::ddex_net.xml._20120404.ddex.UnitOfConditionValue.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Relator expressing the accuracy of the condition value.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Value, Unit, RelationalRelator)
        /// </para>
        /// </summary>
        public string RelationalRelator {
            get {
                XElement x = this.GetElement(XName.Get("RelationalRelator", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("RelationalRelator", ""), value, "RelationalRelator", global::ddex_net.xml._20120404.ddex.RelationalRelator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Condition", "http://ddex.net/xml/ern/341");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Condition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Value", ""), typeof(decimal));
            localElementDictionary.Add(XName.Get("Unit", ""), typeof(string));
            localElementDictionary.Add(XName.Get("RelationalRelator", ""), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:Cue.
    /// </para>
    /// <para>
    /// Regular expression: (CueUseType?, CueThemeType?, CueVocalType?, IsDance?, CueVisualPerceptionType?, CueOrigin?, (CueCreationReference+ | (ReferencedCreationType?, ReferencedCreationId?, ReferencedCreationTitle*, ReferencedCreationContributor*, ReferencedCreationCharacter*)), HasMusicalContent?, StartTime?, Duration?, EndTime?, PLine*, CLine*)
    /// </para>
    /// </summary>
    public partial class Cue : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.CueCreationReference> CueCreationReferenceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Title> ReferencedCreationTitleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.ResourceContributor> ReferencedCreationContributorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Character> ReferencedCreationCharacterField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.PLine> PLineField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.CLine> CLineField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator Cue(XElement xe) { return XTypedServices.ToXTypedElement<Cue>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Cue() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Cue.
        /// </para>
        /// <para>
        /// Regular expression: (CueUseType?, CueThemeType?, CueVocalType?, IsDance?, CueVisualPerceptionType?, CueOrigin?, (CueCreationReference+ | (ReferencedCreationType?, ReferencedCreationId?, ReferencedCreationTitle*, ReferencedCreationContributor*, ReferencedCreationCharacter*)), HasMusicalContent?, StartTime?, Duration?, EndTime?, PLine*, CLine*)
        /// </para>
        /// </summary>
        public Cue() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:UseType of the ddexC:Cue. It can be expected that this element will be contractually mandatory in many communications of cue sheets to music rights societies.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CueUseType?, CueThemeType?, CueVocalType?, IsDance?, CueVisualPerceptionType?, CueOrigin?, (CueCreationReference+ | (ReferencedCreationType?, ReferencedCreationId?, ReferencedCreationTitle*, ReferencedCreationContributor*, ReferencedCreationCharacter*)), HasMusicalContent?, StartTime?, Duration?, EndTime?, PLine*, CLine*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.CueUseType CueUseType {
            get {
                XElement x = this.GetElement(XName.Get("CueUseType", ""));
                return ((ddex_net.xml._20120404.ddexC.CueUseType)(x));
            }
            set {
                this.SetElement(XName.Get("CueUseType", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:ThemeType for the ddex:Creation referenced in the ddexC:Cue.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CueUseType?, CueThemeType?, CueVocalType?, IsDance?, CueVisualPerceptionType?, CueOrigin?, (CueCreationReference+ | (ReferencedCreationType?, ReferencedCreationId?, ReferencedCreationTitle*, ReferencedCreationContributor*, ReferencedCreationCharacter*)), HasMusicalContent?, StartTime?, Duration?, EndTime?, PLine*, CLine*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.CueThemeType CueThemeType {
            get {
                XElement x = this.GetElement(XName.Get("CueThemeType", ""));
                return ((ddex_net.xml._20120404.ddexC.CueThemeType)(x));
            }
            set {
                this.SetElement(XName.Get("CueThemeType", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:VocalType for the ddex:Creation referenced in the ddexC:Cue.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CueUseType?, CueThemeType?, CueVocalType?, IsDance?, CueVisualPerceptionType?, CueOrigin?, (CueCreationReference+ | (ReferencedCreationType?, ReferencedCreationId?, ReferencedCreationTitle*, ReferencedCreationContributor*, ReferencedCreationCharacter*)), HasMusicalContent?, StartTime?, Duration?, EndTime?, PLine*, CLine*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.CueVocalType CueVocalType {
            get {
                XElement x = this.GetElement(XName.Get("CueVocalType", ""));
                return ((ddex_net.xml._20120404.ddexC.CueVocalType)(x));
            }
            set {
                this.SetElement(XName.Get("CueVocalType", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Flag indicating whether a ddex:Creation contains dancing (=True) or not (=False).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CueUseType?, CueThemeType?, CueVocalType?, IsDance?, CueVisualPerceptionType?, CueOrigin?, (CueCreationReference+ | (ReferencedCreationType?, ReferencedCreationId?, ReferencedCreationTitle*, ReferencedCreationContributor*, ReferencedCreationCharacter*)), HasMusicalContent?, StartTime?, Duration?, EndTime?, PLine*, CLine*)
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsDance {
            get {
                XElement x = this.GetElement(XName.Get("IsDance", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("IsDance", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:VisualPerceptionType for the ddex:Creation referenced in the ddexC:Cue.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CueUseType?, CueThemeType?, CueVocalType?, IsDance?, CueVisualPerceptionType?, CueOrigin?, (CueCreationReference+ | (ReferencedCreationType?, ReferencedCreationId?, ReferencedCreationTitle*, ReferencedCreationContributor*, ReferencedCreationCharacter*)), HasMusicalContent?, StartTime?, Duration?, EndTime?, PLine*, CLine*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.CueVisualPerceptionType CueVisualPerceptionType {
            get {
                XElement x = this.GetElement(XName.Get("CueVisualPerceptionType", ""));
                return ((ddex_net.xml._20120404.ddexC.CueVisualPerceptionType)(x));
            }
            set {
                this.SetElement(XName.Get("CueVisualPerceptionType", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:CueOrigin for the ddexC:Cue. It can be expected that this element will be contractually mandatory in many communications of cue sheets to music rights societies.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CueUseType?, CueThemeType?, CueVocalType?, IsDance?, CueVisualPerceptionType?, CueOrigin?, (CueCreationReference+ | (ReferencedCreationType?, ReferencedCreationId?, ReferencedCreationTitle*, ReferencedCreationContributor*, ReferencedCreationCharacter*)), HasMusicalContent?, StartTime?, Duration?, EndTime?, PLine*, CLine*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.CueOrigin CueOrigin {
            get {
                XElement x = this.GetElement(XName.Get("CueOrigin", ""));
                return ((ddex_net.xml._20120404.ddexC.CueOrigin)(x));
            }
            set {
                this.SetElement(XName.Get("CueOrigin", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a ddex:CueCreationReference for a ddex:Creation (specific to this ddex:Message).
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (CueUseType?, CueThemeType?, CueVocalType?, IsDance?, CueVisualPerceptionType?, CueOrigin?, (CueCreationReference+ | (ReferencedCreationType?, ReferencedCreationId?, ReferencedCreationTitle*, ReferencedCreationContributor*, ReferencedCreationCharacter*)), HasMusicalContent?, StartTime?, Duration?, EndTime?, PLine*, CLine*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.CueCreationReference> CueCreationReference {
            get {
                if ((this.CueCreationReferenceField == null)) {
                    this.CueCreationReferenceField = new XTypedList<ddex_net.xml._20120404.ddexC.CueCreationReference>(this, LinqToXsdTypeManager.Instance, XName.Get("CueCreationReference", ""));
                }
                return this.CueCreationReferenceField;
            }
            set {
                if ((value == null)) {
                    this.CueCreationReferenceField = null;
                }
                else {
                    if ((this.CueCreationReferenceField == null)) {
                        this.CueCreationReferenceField = XTypedList<ddex_net.xml._20120404.ddexC.CueCreationReference>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CueCreationReference", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.CueCreationReference>(this.CueCreationReferenceField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Type of the ddex:Creation referenced in the ddexC:Cue.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (CueUseType?, CueThemeType?, CueVocalType?, IsDance?, CueVisualPerceptionType?, CueOrigin?, (CueCreationReference+ | (ReferencedCreationType?, ReferencedCreationId?, ReferencedCreationTitle*, ReferencedCreationContributor*, ReferencedCreationCharacter*)), HasMusicalContent?, StartTime?, Duration?, EndTime?, PLine*, CLine*)
        /// </para>
        /// </summary>
        public string ReferencedCreationType {
            get {
                XElement x = this.GetElement(XName.Get("ReferencedCreationType", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("ReferencedCreationType", ""), value, "ReferencedCreationType", global::ddex_net.xml._20120404.ddex.CreationType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:CreationIds.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (CueUseType?, CueThemeType?, CueVocalType?, IsDance?, CueVisualPerceptionType?, CueOrigin?, (CueCreationReference+ | (ReferencedCreationType?, ReferencedCreationId?, ReferencedCreationTitle*, ReferencedCreationContributor*, ReferencedCreationCharacter*)), HasMusicalContent?, StartTime?, Duration?, EndTime?, PLine*, CLine*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.CreationId ReferencedCreationId {
            get {
                XElement x = this.GetElement(XName.Get("ReferencedCreationId", ""));
                return ((ddex_net.xml._20120404.ddexC.CreationId)(x));
            }
            set {
                this.SetElement(XName.Get("ReferencedCreationId", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Title of the ddex:Creation referenced in the ddexC:Cue.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (CueUseType?, CueThemeType?, CueVocalType?, IsDance?, CueVisualPerceptionType?, CueOrigin?, (CueCreationReference+ | (ReferencedCreationType?, ReferencedCreationId?, ReferencedCreationTitle*, ReferencedCreationContributor*, ReferencedCreationCharacter*)), HasMusicalContent?, StartTime?, Duration?, EndTime?, PLine*, CLine*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Title> ReferencedCreationTitle {
            get {
                if ((this.ReferencedCreationTitleField == null)) {
                    this.ReferencedCreationTitleField = new XTypedList<ddex_net.xml._20120404.ddexC.Title>(this, LinqToXsdTypeManager.Instance, XName.Get("ReferencedCreationTitle", ""));
                }
                return this.ReferencedCreationTitleField;
            }
            set {
                if ((value == null)) {
                    this.ReferencedCreationTitleField = null;
                }
                else {
                    if ((this.ReferencedCreationTitleField == null)) {
                        this.ReferencedCreationTitleField = XTypedList<ddex_net.xml._20120404.ddexC.Title>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ReferencedCreationTitle", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Title>(this.ReferencedCreationTitleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details a ddex:Contributor of the ddex:Creation referenced in the ddexC:Cue.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (CueUseType?, CueThemeType?, CueVocalType?, IsDance?, CueVisualPerceptionType?, CueOrigin?, (CueCreationReference+ | (ReferencedCreationType?, ReferencedCreationId?, ReferencedCreationTitle*, ReferencedCreationContributor*, ReferencedCreationCharacter*)), HasMusicalContent?, StartTime?, Duration?, EndTime?, PLine*, CLine*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.ResourceContributor> ReferencedCreationContributor {
            get {
                if ((this.ReferencedCreationContributorField == null)) {
                    this.ReferencedCreationContributorField = new XTypedList<ddex_net.xml._20120404.ddexC.ResourceContributor>(this, LinqToXsdTypeManager.Instance, XName.Get("ReferencedCreationContributor", ""));
                }
                return this.ReferencedCreationContributorField;
            }
            set {
                if ((value == null)) {
                    this.ReferencedCreationContributorField = null;
                }
                else {
                    if ((this.ReferencedCreationContributorField == null)) {
                        this.ReferencedCreationContributorField = XTypedList<ddex_net.xml._20120404.ddexC.ResourceContributor>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ReferencedCreationContributor", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.ResourceContributor>(this.ReferencedCreationContributorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Character in the ddex:Creation referenced in the ddexC:Cue. A ddex:Character may be described through ddex:Name, ddex:Identifier and Roles.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (CueUseType?, CueThemeType?, CueVocalType?, IsDance?, CueVisualPerceptionType?, CueOrigin?, (CueCreationReference+ | (ReferencedCreationType?, ReferencedCreationId?, ReferencedCreationTitle*, ReferencedCreationContributor*, ReferencedCreationCharacter*)), HasMusicalContent?, StartTime?, Duration?, EndTime?, PLine*, CLine*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Character> ReferencedCreationCharacter {
            get {
                if ((this.ReferencedCreationCharacterField == null)) {
                    this.ReferencedCreationCharacterField = new XTypedList<ddex_net.xml._20120404.ddexC.Character>(this, LinqToXsdTypeManager.Instance, XName.Get("ReferencedCreationCharacter", ""));
                }
                return this.ReferencedCreationCharacterField;
            }
            set {
                if ((value == null)) {
                    this.ReferencedCreationCharacterField = null;
                }
                else {
                    if ((this.ReferencedCreationCharacterField == null)) {
                        this.ReferencedCreationCharacterField = XTypedList<ddex_net.xml._20120404.ddexC.Character>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ReferencedCreationCharacter", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Character>(this.ReferencedCreationCharacterField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Flag indicating whether whether the ddex:Creation referenced in the ddexC:Cue contains musical content such as a ddex:SoundRecording or a ddex:MusicalWork (=True) or not (=False).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CueUseType?, CueThemeType?, CueVocalType?, IsDance?, CueVisualPerceptionType?, CueOrigin?, (CueCreationReference+ | (ReferencedCreationType?, ReferencedCreationId?, ReferencedCreationTitle*, ReferencedCreationContributor*, ReferencedCreationCharacter*)), HasMusicalContent?, StartTime?, Duration?, EndTime?, PLine*, CLine*)
        /// </para>
        /// </summary>
        public System.Nullable<bool> HasMusicalContent {
            get {
                XElement x = this.GetElement(XName.Get("HasMusicalContent", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("HasMusicalContent", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The start time of the ddex:Creation, measured from the start of the ddex:Resource from which the ddex:CueSheet is referenced (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CueUseType?, CueThemeType?, CueVocalType?, IsDance?, CueVisualPerceptionType?, CueOrigin?, (CueCreationReference+ | (ReferencedCreationType?, ReferencedCreationId?, ReferencedCreationTitle*, ReferencedCreationContributor*, ReferencedCreationCharacter*)), HasMusicalContent?, StartTime?, Duration?, EndTime?, PLine*, CLine*)
        /// </para>
        /// </summary>
        public System.Nullable<System.TimeSpan> StartTime {
            get {
                XElement x = this.GetElement(XName.Get("StartTime", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
            set {
                this.SetElement(XName.Get("StartTime", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Duration of the use of the ddex:Creation that is referenced in the ddex:CueCreationReference (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CueUseType?, CueThemeType?, CueVocalType?, IsDance?, CueVisualPerceptionType?, CueOrigin?, (CueCreationReference+ | (ReferencedCreationType?, ReferencedCreationId?, ReferencedCreationTitle*, ReferencedCreationContributor*, ReferencedCreationCharacter*)), HasMusicalContent?, StartTime?, Duration?, EndTime?, PLine*, CLine*)
        /// </para>
        /// </summary>
        public System.Nullable<System.TimeSpan> Duration {
            get {
                XElement x = this.GetElement(XName.Get("Duration", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
            set {
                this.SetElement(XName.Get("Duration", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The end time of the ddex:Creation, measured from the start of the ddex:Resource from which the ddex:CueSheet is referenced (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CueUseType?, CueThemeType?, CueVocalType?, IsDance?, CueVisualPerceptionType?, CueOrigin?, (CueCreationReference+ | (ReferencedCreationType?, ReferencedCreationId?, ReferencedCreationTitle*, ReferencedCreationContributor*, ReferencedCreationCharacter*)), HasMusicalContent?, StartTime?, Duration?, EndTime?, PLine*, CLine*)
        /// </para>
        /// </summary>
        public System.Nullable<System.TimeSpan> EndTime {
            get {
                XElement x = this.GetElement(XName.Get("EndTime", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
            set {
                this.SetElement(XName.Get("EndTime", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:PLine for the ern:Cue.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (CueUseType?, CueThemeType?, CueVocalType?, IsDance?, CueVisualPerceptionType?, CueOrigin?, (CueCreationReference+ | (ReferencedCreationType?, ReferencedCreationId?, ReferencedCreationTitle*, ReferencedCreationContributor*, ReferencedCreationCharacter*)), HasMusicalContent?, StartTime?, Duration?, EndTime?, PLine*, CLine*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.PLine> PLine {
            get {
                if ((this.PLineField == null)) {
                    this.PLineField = new XTypedList<ddex_net.xml._20120404.ddexC.PLine>(this, LinqToXsdTypeManager.Instance, XName.Get("PLine", ""));
                }
                return this.PLineField;
            }
            set {
                if ((value == null)) {
                    this.PLineField = null;
                }
                else {
                    if ((this.PLineField == null)) {
                        this.PLineField = XTypedList<ddex_net.xml._20120404.ddexC.PLine>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("PLine", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.PLine>(this.PLineField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:CLine for the ern:Cue.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (CueUseType?, CueThemeType?, CueVocalType?, IsDance?, CueVisualPerceptionType?, CueOrigin?, (CueCreationReference+ | (ReferencedCreationType?, ReferencedCreationId?, ReferencedCreationTitle*, ReferencedCreationContributor*, ReferencedCreationCharacter*)), HasMusicalContent?, StartTime?, Duration?, EndTime?, PLine*, CLine*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.CLine> CLine {
            get {
                if ((this.CLineField == null)) {
                    this.CLineField = new XTypedList<ddex_net.xml._20120404.ddexC.CLine>(this, LinqToXsdTypeManager.Instance, XName.Get("CLine", ""));
                }
                return this.CLineField;
            }
            set {
                if ((value == null)) {
                    this.CLineField = null;
                }
                else {
                    if ((this.CLineField == null)) {
                        this.CLineField = XTypedList<ddex_net.xml._20120404.ddexC.CLine>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CLine", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.CLine>(this.CLineField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Cue", "http://ddex.net/xml/ern/341");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Cue>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("CueUseType", ""), typeof(ddex_net.xml._20120404.ddexC.CueUseType));
            localElementDictionary.Add(XName.Get("CueThemeType", ""), typeof(ddex_net.xml._20120404.ddexC.CueThemeType));
            localElementDictionary.Add(XName.Get("CueVocalType", ""), typeof(ddex_net.xml._20120404.ddexC.CueVocalType));
            localElementDictionary.Add(XName.Get("IsDance", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("CueVisualPerceptionType", ""), typeof(ddex_net.xml._20120404.ddexC.CueVisualPerceptionType));
            localElementDictionary.Add(XName.Get("CueOrigin", ""), typeof(ddex_net.xml._20120404.ddexC.CueOrigin));
            localElementDictionary.Add(XName.Get("CueCreationReference", ""), typeof(ddex_net.xml._20120404.ddexC.CueCreationReference));
            localElementDictionary.Add(XName.Get("ReferencedCreationType", ""), typeof(string));
            localElementDictionary.Add(XName.Get("ReferencedCreationId", ""), typeof(ddex_net.xml._20120404.ddexC.CreationId));
            localElementDictionary.Add(XName.Get("ReferencedCreationTitle", ""), typeof(ddex_net.xml._20120404.ddexC.Title));
            localElementDictionary.Add(XName.Get("ReferencedCreationContributor", ""), typeof(ddex_net.xml._20120404.ddexC.ResourceContributor));
            localElementDictionary.Add(XName.Get("ReferencedCreationCharacter", ""), typeof(ddex_net.xml._20120404.ddexC.Character));
            localElementDictionary.Add(XName.Get("HasMusicalContent", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("StartTime", ""), typeof(System.TimeSpan));
            localElementDictionary.Add(XName.Get("Duration", ""), typeof(System.TimeSpan));
            localElementDictionary.Add(XName.Get("EndTime", ""), typeof(System.TimeSpan));
            localElementDictionary.Add(XName.Get("PLine", ""), typeof(ddex_net.xml._20120404.ddexC.PLine));
            localElementDictionary.Add(XName.Get("CLine", ""), typeof(ddex_net.xml._20120404.ddexC.CLine));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:CueSheet.
    /// </para>
    /// <para>
    /// Regular expression: (CueSheetId*, CueSheetReference, CueSheetType, Cue+)
    /// </para>
    /// </summary>
    public partial class CueSheet : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.ProprietaryId> CueSheetIdField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Cue> CueField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CueSheet(XElement xe) { return XTypedServices.ToXTypedElement<CueSheet>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CueSheet() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("CueSheetId", "")), new NamedContentModelEntity(XName.Get("CueSheetReference", "")), new NamedContentModelEntity(XName.Get("CueSheetType", "")), new NamedContentModelEntity(XName.Get("Cue", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:CueSheet.
        /// </para>
        /// <para>
        /// Regular expression: (CueSheetId*, CueSheetReference, CueSheetType, Cue+)
        /// </para>
        /// </summary>
        public CueSheet() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:CueSheetId of the ddexC:CueSheet.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (CueSheetId*, CueSheetReference, CueSheetType, Cue+)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.ProprietaryId> CueSheetId {
            get {
                if ((this.CueSheetIdField == null)) {
                    this.CueSheetIdField = new XTypedList<ddex_net.xml._20120404.ddexC.ProprietaryId>(this, LinqToXsdTypeManager.Instance, XName.Get("CueSheetId", ""));
                }
                return this.CueSheetIdField;
            }
            set {
                if ((value == null)) {
                    this.CueSheetIdField = null;
                }
                else {
                    if ((this.CueSheetIdField == null)) {
                        this.CueSheetIdField = XTypedList<ddex_net.xml._20120404.ddexC.ProprietaryId>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CueSheetId", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.ProprietaryId>(this.CueSheetIdField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Identifier (specific to the ddex:Message) of the ddexC:CueSheet within the ddex:Release which contains it. This is a ddex:LocalCueSheetAnchor starting with the letter Q.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CueSheetId*, CueSheetReference, CueSheetType, Cue+)
        /// </para>
        /// </summary>
        public string CueSheetReference {
            get {
                XElement x = this.GetElement(XName.Get("CueSheetReference", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("CueSheetReference", ""), value, "CueSheetReference", CueSheetReferenceLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Type of the ddexC:CueSheet.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CueSheetId*, CueSheetReference, CueSheetType, Cue+)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.CueSheetType CueSheetType {
            get {
                XElement x = this.GetElement(XName.Get("CueSheetType", ""));
                return ((ddex_net.xml._20120404.ddexC.CueSheetType)(x));
            }
            set {
                this.SetElement(XName.Get("CueSheetType", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Cue.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (CueSheetId*, CueSheetReference, CueSheetType, Cue+)
        /// </para>
        /// </summary>
        public IList<Cue> Cue {
            get {
                if ((this.CueField == null)) {
                    this.CueField = new XTypedList<Cue>(this, LinqToXsdTypeManager.Instance, XName.Get("Cue", ""));
                }
                return this.CueField;
            }
            set {
                if ((value == null)) {
                    this.CueField = null;
                }
                else {
                    if ((this.CueField == null)) {
                        this.CueField = XTypedList<Cue>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Cue", ""));
                    }
                    else {
                        XTypedServices.SetList<Cue>(this.CueField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CueSheet", "http://ddex.net/xml/ern/341");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CueSheet>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("CueSheetId", ""), typeof(ddex_net.xml._20120404.ddexC.ProprietaryId));
            localElementDictionary.Add(XName.Get("CueSheetReference", ""), typeof(string));
            localElementDictionary.Add(XName.Get("CueSheetType", ""), typeof(ddex_net.xml._20120404.ddexC.CueSheetType));
            localElementDictionary.Add(XName.Get("Cue", ""), typeof(Cue));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class CueSheetReferenceLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "Q[\\d\\-_a-zA-Z]+"}, 0, XmlSchemaWhiteSpace.Collapse));
            
            private CueSheetReferenceLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of one or more ddex:CueSheets.
    /// </para>
    /// <para>
    /// Regular expression: (CueSheet+)
    /// </para>
    /// </summary>
    public partial class CueSheetList : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CueSheet> CueSheetField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CueSheetList(XElement xe) { return XTypedServices.ToXTypedElement<CueSheetList>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CueSheetList() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("CueSheet", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of one or more ddex:CueSheets.
        /// </para>
        /// <para>
        /// Regular expression: (CueSheet+)
        /// </para>
        /// </summary>
        public CueSheetList() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:CueSheet contained in a ddex:Resource.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (CueSheet+)
        /// </para>
        /// </summary>
        public IList<CueSheet> CueSheet {
            get {
                if ((this.CueSheetField == null)) {
                    this.CueSheetField = new XTypedList<CueSheet>(this, LinqToXsdTypeManager.Instance, XName.Get("CueSheet", ""));
                }
                return this.CueSheetField;
            }
            set {
                if ((value == null)) {
                    this.CueSheetField = null;
                }
                else {
                    if ((this.CueSheetField == null)) {
                        this.CueSheetField = XTypedList<CueSheet>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CueSheet", ""));
                    }
                    else {
                        XTypedServices.SetList<CueSheet>(this.CueSheetField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CueSheetList", "http://ddex.net/xml/ern/341");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CueSheetList>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("CueSheet", ""), typeof(CueSheet));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details (in full or in summary) of a ddex:Deal made between a ddex:DSP (as ddex:Licensee) and a ddex:Licensor of ddex:Works or ddex:Releases. When any new DealTerms are added or removed from an existing ddex:Deal (different ddex:UseTypes, ddex:Prices, Territories, ddex:DistributionChannels) then a new ddex:Deal is created, and (if appropriate) the ddex:ValidityPeriod of the existing ddex:Deal should be terminated. The only changes which should be made to the DealTerms of an existing ddex:Deal are corrections required because of an earlier error or omission, or the addition of an ddex:EndDate to the Deal's ddex:ValidityPeriod.
    /// </para>
    /// <para>
    /// Regular expression: (DealReference*, DealTerms?, ResourceUsage?, DealTechnicalResourceDetailsReferenceList?, DistributionChannelPage*)
    /// </para>
    /// </summary>
    public partial class Deal : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.DealReference> DealReferenceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.WebPage> DistributionChannelPageField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Deal(XElement xe) { return XTypedServices.ToXTypedElement<Deal>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Deal() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("DealReference", "")), new NamedContentModelEntity(XName.Get("DealTerms", "")), new NamedContentModelEntity(XName.Get("ResourceUsage", "")), new NamedContentModelEntity(XName.Get("DealTechnicalResourceDetailsReferenceList", "")), new NamedContentModelEntity(XName.Get("DistributionChannelPage", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details (in full or in summary) of a ddex:Deal made between a ddex:DSP (as ddex:Licensee) and a ddex:Licensor of ddex:Works or ddex:Releases. When any new DealTerms are added or removed from an existing ddex:Deal (different ddex:UseTypes, ddex:Prices, Territories, ddex:DistributionChannels) then a new ddex:Deal is created, and (if appropriate) the ddex:ValidityPeriod of the existing ddex:Deal should be terminated. The only changes which should be made to the DealTerms of an existing ddex:Deal are corrections required because of an earlier error or omission, or the addition of an ddex:EndDate to the Deal's ddex:ValidityPeriod.
        /// </para>
        /// <para>
        /// Regular expression: (DealReference*, DealTerms?, ResourceUsage?, DealTechnicalResourceDetailsReferenceList?, DistributionChannelPage*)
        /// </para>
        /// </summary>
        public Deal() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a ddex:Reference to a ddex:TextDocument containing details of the ern:Deal (in the form of an ddex:Identifier, ddex:Name or ddex:Description).
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DealReference*, DealTerms?, ResourceUsage?, DealTechnicalResourceDetailsReferenceList?, DistributionChannelPage*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.DealReference> DealReference {
            get {
                if ((this.DealReferenceField == null)) {
                    this.DealReferenceField = new XTypedList<ddex_net.xml._20120404.ddexC.DealReference>(this, LinqToXsdTypeManager.Instance, XName.Get("DealReference", ""));
                }
                return this.DealReferenceField;
            }
            set {
                if ((value == null)) {
                    this.DealReferenceField = null;
                }
                else {
                    if ((this.DealReferenceField == null)) {
                        this.DealReferenceField = XTypedList<ddex_net.xml._20120404.ddexC.DealReference>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("DealReference", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.DealReference>(this.DealReferenceField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the terms of the ern:Deal.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DealReference*, DealTerms?, ResourceUsage?, DealTechnicalResourceDetailsReferenceList?, DistributionChannelPage*)
        /// </para>
        /// </summary>
        public DealTerms DealTerms {
            get {
                XElement x = this.GetElement(XName.Get("DealTerms", ""));
                return ((DealTerms)(x));
            }
            set {
                this.SetElement(XName.Get("DealTerms", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of one or more Usages that govern a ddex:Resource in the ern:Deal where the Usage of the ddex:Resource differs from the Usage of the other ddex:Resources in the same ddex:Release.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DealReference*, DealTerms?, ResourceUsage?, DealTechnicalResourceDetailsReferenceList?, DistributionChannelPage*)
        /// </para>
        /// </summary>
        public ResourceUsage ResourceUsage {
            get {
                XElement x = this.GetElement(XName.Get("ResourceUsage", ""));
                return ((ResourceUsage)(x));
            }
            set {
                this.SetElement(XName.Get("ResourceUsage", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a list of ddex:DealTechnicalResourceDetailsReferences for the ern:Deal.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DealReference*, DealTerms?, ResourceUsage?, DealTechnicalResourceDetailsReferenceList?, DistributionChannelPage*)
        /// </para>
        /// </summary>
        public DealTechnicalResourceDetailsReferenceList DealTechnicalResourceDetailsReferenceList {
            get {
                XElement x = this.GetElement(XName.Get("DealTechnicalResourceDetailsReferenceList", ""));
                return ((DealTechnicalResourceDetailsReferenceList)(x));
            }
            set {
                this.SetElement(XName.Get("DealTechnicalResourceDetailsReferenceList", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:WebPage for the ddex:DistributionChannel.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DealReference*, DealTerms?, ResourceUsage?, DealTechnicalResourceDetailsReferenceList?, DistributionChannelPage*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.WebPage> DistributionChannelPage {
            get {
                if ((this.DistributionChannelPageField == null)) {
                    this.DistributionChannelPageField = new XTypedList<ddex_net.xml._20120404.ddexC.WebPage>(this, LinqToXsdTypeManager.Instance, XName.Get("DistributionChannelPage", ""));
                }
                return this.DistributionChannelPageField;
            }
            set {
                if ((value == null)) {
                    this.DistributionChannelPageField = null;
                }
                else {
                    if ((this.DistributionChannelPageField == null)) {
                        this.DistributionChannelPageField = XTypedList<ddex_net.xml._20120404.ddexC.WebPage>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("DistributionChannelPage", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.WebPage>(this.DistributionChannelPageField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the ern:Deal as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Deal", "http://ddex.net/xml/ern/341");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Deal>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("DealReference", ""), typeof(ddex_net.xml._20120404.ddexC.DealReference));
            localElementDictionary.Add(XName.Get("DealTerms", ""), typeof(DealTerms));
            localElementDictionary.Add(XName.Get("ResourceUsage", ""), typeof(ResourceUsage));
            localElementDictionary.Add(XName.Get("DealTechnicalResourceDetailsReferenceList", ""), typeof(DealTechnicalResourceDetailsReferenceList));
            localElementDictionary.Add(XName.Get("DistributionChannelPage", ""), typeof(ddex_net.xml._20120404.ddexC.WebPage));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of one or more ddex:Deals.
    /// </para>
    /// <para>
    /// Regular expression: (ReleaseDeal*)
    /// </para>
    /// </summary>
    public partial class DealList : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ReleaseDeal> ReleaseDealField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator DealList(XElement xe) { return XTypedServices.ToXTypedElement<DealList>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DealList() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ReleaseDeal", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of one or more ddex:Deals.
        /// </para>
        /// <para>
        /// Regular expression: (ReleaseDeal*)
        /// </para>
        /// </summary>
        public DealList() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of one or more ddex:Deals pertaining to one or more ddex:Releases.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ReleaseDeal*)
        /// </para>
        /// </summary>
        public IList<ReleaseDeal> ReleaseDeal {
            get {
                if ((this.ReleaseDealField == null)) {
                    this.ReleaseDealField = new XTypedList<ReleaseDeal>(this, LinqToXsdTypeManager.Instance, XName.Get("ReleaseDeal", ""));
                }
                return this.ReleaseDealField;
            }
            set {
                if ((value == null)) {
                    this.ReleaseDealField = null;
                }
                else {
                    if ((this.ReleaseDealField == null)) {
                        this.ReleaseDealField = XTypedList<ReleaseDeal>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ReleaseDeal", ""));
                    }
                    else {
                        XTypedServices.SetList<ReleaseDeal>(this.ReleaseDealField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the ern:DealList as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("DealList", "http://ddex.net/xml/ern/341");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DealList>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ReleaseDeal", ""), typeof(ReleaseDeal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing a list of ddex:DealTechnicalResourceDetailsReferences.
    /// </para>
    /// <para>
    /// Regular expression: (DealTechnicalResourceDetailsReference+)
    /// </para>
    /// </summary>
    public partial class DealTechnicalResourceDetailsReferenceList : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> DealTechnicalResourceDetailsReferenceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator DealTechnicalResourceDetailsReferenceList(XElement xe) { return XTypedServices.ToXTypedElement<DealTechnicalResourceDetailsReferenceList>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DealTechnicalResourceDetailsReferenceList() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("DealTechnicalResourceDetailsReference", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a list of ddex:DealTechnicalResourceDetailsReferences.
        /// </para>
        /// <para>
        /// Regular expression: (DealTechnicalResourceDetailsReference+)
        /// </para>
        /// </summary>
        public DealTechnicalResourceDetailsReferenceList() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Reference for a ddex:Composite specifying technical details of a ddex:Resource (specific to this ddex:Message). This is a ddex:LocalTechnicalResourceDetailsAnchorReference starting with the letter T.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DealTechnicalResourceDetailsReference+)
        /// </para>
        /// </summary>
        public IList<string> DealTechnicalResourceDetailsReference {
            get {
                if ((this.DealTechnicalResourceDetailsReferenceField == null)) {
                    this.DealTechnicalResourceDetailsReferenceField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype, XName.Get("DealTechnicalResourceDetailsReference", ""));
                }
                return this.DealTechnicalResourceDetailsReferenceField;
            }
            set {
                if ((value == null)) {
                    this.DealTechnicalResourceDetailsReferenceField = null;
                }
                else {
                    if ((this.DealTechnicalResourceDetailsReferenceField == null)) {
                        this.DealTechnicalResourceDetailsReferenceField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype, value, XName.Get("DealTechnicalResourceDetailsReference", ""));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.DealTechnicalResourceDetailsReferenceField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("DealTechnicalResourceDetailsReferenceList", "http://ddex.net/xml/ern/341");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DealTechnicalResourceDetailsReferenceList>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("DealTechnicalResourceDetailsReference", ""), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class DealTechnicalResourceDetailsReferenceLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "T[\\d\\-_a-zA-Z]+"}, 0, XmlSchemaWhiteSpace.Collapse));
            
            private DealTechnicalResourceDetailsReferenceLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of the terms of a ddex:Deal.
    /// </para>
    /// <para>
    /// Regular expression: (CommercialModelType*, (Usage+ | AllDealsCancelled? | TakeDown?), (TerritoryCode+ | ExcludedTerritoryCode+), (DistributionChannel+ | ExcludedDistributionChannel+)?, PriceInformation*, (IsPromotional | PromotionalCode)?, ValidityPeriod+, ConsumerRentalPeriod?, PreOrderReleaseDate?, PreOrderPreviewDate?, IsExclusive?, RelatedReleaseOfferSet*, PhysicalReturns?, NumberOfProductsPerCarton?, RightsClaimPolicy*, WebPolicy*)
    /// </para>
    /// </summary>
    public partial class DealTerms : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.CommercialModelType> CommercialModelTypeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Usage> UsageField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<object> TerritoryCodeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<object> ExcludedTerritoryCodeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.DSP> DistributionChannelField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.DSP> ExcludedDistributionChannelField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.PriceInformation> PriceInformationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Period> ValidityPeriodField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<RelatedReleaseOfferSet> RelatedReleaseOfferSetField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<RightsClaimPolicy> RightsClaimPolicyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<WebPolicy> WebPolicyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator DealTerms(XElement xe) { return XTypedServices.ToXTypedElement<DealTerms>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DealTerms() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the terms of a ddex:Deal.
        /// </para>
        /// <para>
        /// Regular expression: (CommercialModelType*, (Usage+ | AllDealsCancelled? | TakeDown?), (TerritoryCode+ | ExcludedTerritoryCode+), (DistributionChannel+ | ExcludedDistributionChannel+)?, PriceInformation*, (IsPromotional | PromotionalCode)?, ValidityPeriod+, ConsumerRentalPeriod?, PreOrderReleaseDate?, PreOrderPreviewDate?, IsExclusive?, RelatedReleaseOfferSet*, PhysicalReturns?, NumberOfProductsPerCarton?, RightsClaimPolicy*, WebPolicy*)
        /// </para>
        /// </summary>
        public DealTerms() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the fundamental business model which applies to the ddex:Deal (e.g. ddex:SubscriptionModel and ddex:PayAsYouGoModel). The ddex:CommercialModelType indicates how the ddex:Consumer pays for the ddex:Service or ddex:Release.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (CommercialModelType*, (Usage+ | AllDealsCancelled? | TakeDown?), (TerritoryCode+ | ExcludedTerritoryCode+), (DistributionChannel+ | ExcludedDistributionChannel+)?, PriceInformation*, (IsPromotional | PromotionalCode)?, ValidityPeriod+, ConsumerRentalPeriod?, PreOrderReleaseDate?, PreOrderPreviewDate?, IsExclusive?, RelatedReleaseOfferSet*, PhysicalReturns?, NumberOfProductsPerCarton?, RightsClaimPolicy*, WebPolicy*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.CommercialModelType> CommercialModelType {
            get {
                if ((this.CommercialModelTypeField == null)) {
                    this.CommercialModelTypeField = new XTypedList<ddex_net.xml._20120404.ddexC.CommercialModelType>(this, LinqToXsdTypeManager.Instance, XName.Get("CommercialModelType", ""));
                }
                return this.CommercialModelTypeField;
            }
            set {
                if ((value == null)) {
                    this.CommercialModelTypeField = null;
                }
                else {
                    if ((this.CommercialModelTypeField == null)) {
                        this.CommercialModelTypeField = XTypedList<ddex_net.xml._20120404.ddexC.CommercialModelType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CommercialModelType", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.CommercialModelType>(this.CommercialModelTypeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing the ddex:Types and number of Usages applicable to a ddex:Release to which the ddex:Deal applies.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (CommercialModelType*, (Usage+ | AllDealsCancelled? | TakeDown?), (TerritoryCode+ | ExcludedTerritoryCode+), (DistributionChannel+ | ExcludedDistributionChannel+)?, PriceInformation*, (IsPromotional | PromotionalCode)?, ValidityPeriod+, ConsumerRentalPeriod?, PreOrderReleaseDate?, PreOrderPreviewDate?, IsExclusive?, RelatedReleaseOfferSet*, PhysicalReturns?, NumberOfProductsPerCarton?, RightsClaimPolicy*, WebPolicy*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Usage> Usage {
            get {
                if ((this.UsageField == null)) {
                    this.UsageField = new XTypedList<ddex_net.xml._20120404.ddexC.Usage>(this, LinqToXsdTypeManager.Instance, XName.Get("Usage", ""));
                }
                return this.UsageField;
            }
            set {
                if ((value == null)) {
                    this.UsageField = null;
                }
                else {
                    if ((this.UsageField == null)) {
                        this.UsageField = XTypedList<ddex_net.xml._20120404.ddexC.Usage>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Usage", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Usage>(this.UsageField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether all ddex:Deals are cancelled for the given Territories (=True) or not (=False). This ddex:Flag can be used in conjunction with a ddex:StartDate of a ddex:ValidityPeriod to indicate the point in time from which all ddex:Deals are cancelled.
        /// </para>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (CommercialModelType*, (Usage+ | AllDealsCancelled? | TakeDown?), (TerritoryCode+ | ExcludedTerritoryCode+), (DistributionChannel+ | ExcludedDistributionChannel+)?, PriceInformation*, (IsPromotional | PromotionalCode)?, ValidityPeriod+, ConsumerRentalPeriod?, PreOrderReleaseDate?, PreOrderPreviewDate?, IsExclusive?, RelatedReleaseOfferSet*, PhysicalReturns?, NumberOfProductsPerCarton?, RightsClaimPolicy*, WebPolicy*)
        /// </para>
        /// </summary>
        public System.Nullable<bool> AllDealsCancelled {
            get {
                XElement x = this.GetElement(XName.Get("AllDealsCancelled", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("AllDealsCancelled", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether all ddex:Releases referred to are to be taken down by the ddex:MessageRecipient. This includes that all ddex:Deals referred to in a specific ddex:Composite are cancelled and no information about the ddex:Releases should be displayed to the end user on the DSP's website (=True) or not (=False). This ddex:Flag can be used in conjunction with a ddex:StartDate of a ddex:ValidityPeriod to indicate the point in time from which all ddex:Deals are cancelled.
        /// </para>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (CommercialModelType*, (Usage+ | AllDealsCancelled? | TakeDown?), (TerritoryCode+ | ExcludedTerritoryCode+), (DistributionChannel+ | ExcludedDistributionChannel+)?, PriceInformation*, (IsPromotional | PromotionalCode)?, ValidityPeriod+, ConsumerRentalPeriod?, PreOrderReleaseDate?, PreOrderPreviewDate?, IsExclusive?, RelatedReleaseOfferSet*, PhysicalReturns?, NumberOfProductsPerCarton?, RightsClaimPolicy*, WebPolicy*)
        /// </para>
        /// </summary>
        public System.Nullable<bool> TakeDown {
            get {
                XElement x = this.GetElement(XName.Get("TakeDown", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("TakeDown", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Territory in which the ddex:Deal applies (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:ExcludedTerritory must be present, but not both. 
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (CommercialModelType*, (Usage+ | AllDealsCancelled? | TakeDown?), (TerritoryCode+ | ExcludedTerritoryCode+), (DistributionChannel+ | ExcludedDistributionChannel+)?, PriceInformation*, (IsPromotional | PromotionalCode)?, ValidityPeriod+, ConsumerRentalPeriod?, PreOrderReleaseDate?, PreOrderPreviewDate?, IsExclusive?, RelatedReleaseOfferSet*, PhysicalReturns?, NumberOfProductsPerCarton?, RightsClaimPolicy*, WebPolicy*)
        /// </para>
        /// </summary>
        public IList<object> TerritoryCode {
            get {
                if ((this.TerritoryCodeField == null)) {
                    this.TerritoryCodeField = new XSimpleList<object>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, XName.Get("TerritoryCode", ""));
                }
                return this.TerritoryCodeField;
            }
            set {
                if ((value == null)) {
                    this.TerritoryCodeField = null;
                }
                else {
                    if ((this.TerritoryCodeField == null)) {
                        this.TerritoryCodeField = XSimpleList<object>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, value, XName.Get("TerritoryCode", ""));
                    }
                    else {
                        XTypedServices.SetList<System.Object>(this.TerritoryCodeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Territory in which the ddex:Deal does not apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:Territory must be present, but not both.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (CommercialModelType*, (Usage+ | AllDealsCancelled? | TakeDown?), (TerritoryCode+ | ExcludedTerritoryCode+), (DistributionChannel+ | ExcludedDistributionChannel+)?, PriceInformation*, (IsPromotional | PromotionalCode)?, ValidityPeriod+, ConsumerRentalPeriod?, PreOrderReleaseDate?, PreOrderPreviewDate?, IsExclusive?, RelatedReleaseOfferSet*, PhysicalReturns?, NumberOfProductsPerCarton?, RightsClaimPolicy*, WebPolicy*)
        /// </para>
        /// </summary>
        public IList<object> ExcludedTerritoryCode {
            get {
                if ((this.ExcludedTerritoryCodeField == null)) {
                    this.ExcludedTerritoryCodeField = new XSimpleList<object>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, XName.Get("ExcludedTerritoryCode", ""));
                }
                return this.ExcludedTerritoryCodeField;
            }
            set {
                if ((value == null)) {
                    this.ExcludedTerritoryCodeField = null;
                }
                else {
                    if ((this.ExcludedTerritoryCodeField == null)) {
                        this.ExcludedTerritoryCodeField = XSimpleList<object>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, value, XName.Get("ExcludedTerritoryCode", ""));
                    }
                    else {
                        XTypedServices.SetList<System.Object>(this.ExcludedTerritoryCodeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:DSP through whose ddex:DistributionChannel the sales are permitted. If none are provided no limitations on the ddex:DistributionChannels are given.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (CommercialModelType*, (Usage+ | AllDealsCancelled? | TakeDown?), (TerritoryCode+ | ExcludedTerritoryCode+), (DistributionChannel+ | ExcludedDistributionChannel+)?, PriceInformation*, (IsPromotional | PromotionalCode)?, ValidityPeriod+, ConsumerRentalPeriod?, PreOrderReleaseDate?, PreOrderPreviewDate?, IsExclusive?, RelatedReleaseOfferSet*, PhysicalReturns?, NumberOfProductsPerCarton?, RightsClaimPolicy*, WebPolicy*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.DSP> DistributionChannel {
            get {
                if ((this.DistributionChannelField == null)) {
                    this.DistributionChannelField = new XTypedList<ddex_net.xml._20120404.ddexC.DSP>(this, LinqToXsdTypeManager.Instance, XName.Get("DistributionChannel", ""));
                }
                return this.DistributionChannelField;
            }
            set {
                if ((value == null)) {
                    this.DistributionChannelField = null;
                }
                else {
                    if ((this.DistributionChannelField == null)) {
                        this.DistributionChannelField = XTypedList<ddex_net.xml._20120404.ddexC.DSP>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("DistributionChannel", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.DSP>(this.DistributionChannelField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of excluded ddex:DSP. This is used in an aggregator model where all agreed partners of the aggregators may use a ddex:ReleaseDeal, except those that are listed herein.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (CommercialModelType*, (Usage+ | AllDealsCancelled? | TakeDown?), (TerritoryCode+ | ExcludedTerritoryCode+), (DistributionChannel+ | ExcludedDistributionChannel+)?, PriceInformation*, (IsPromotional | PromotionalCode)?, ValidityPeriod+, ConsumerRentalPeriod?, PreOrderReleaseDate?, PreOrderPreviewDate?, IsExclusive?, RelatedReleaseOfferSet*, PhysicalReturns?, NumberOfProductsPerCarton?, RightsClaimPolicy*, WebPolicy*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.DSP> ExcludedDistributionChannel {
            get {
                if ((this.ExcludedDistributionChannelField == null)) {
                    this.ExcludedDistributionChannelField = new XTypedList<ddex_net.xml._20120404.ddexC.DSP>(this, LinqToXsdTypeManager.Instance, XName.Get("ExcludedDistributionChannel", ""));
                }
                return this.ExcludedDistributionChannelField;
            }
            set {
                if ((value == null)) {
                    this.ExcludedDistributionChannelField = null;
                }
                else {
                    if ((this.ExcludedDistributionChannelField == null)) {
                        this.ExcludedDistributionChannelField = XTypedList<ddex_net.xml._20120404.ddexC.DSP>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ExcludedDistributionChannel", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.DSP>(this.ExcludedDistributionChannelField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Price. Note that this ddex:Price applies to all ddex:UseTypes referenced in this ddex:Composite.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (CommercialModelType*, (Usage+ | AllDealsCancelled? | TakeDown?), (TerritoryCode+ | ExcludedTerritoryCode+), (DistributionChannel+ | ExcludedDistributionChannel+)?, PriceInformation*, (IsPromotional | PromotionalCode)?, ValidityPeriod+, ConsumerRentalPeriod?, PreOrderReleaseDate?, PreOrderPreviewDate?, IsExclusive?, RelatedReleaseOfferSet*, PhysicalReturns?, NumberOfProductsPerCarton?, RightsClaimPolicy*, WebPolicy*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.PriceInformation> PriceInformation {
            get {
                if ((this.PriceInformationField == null)) {
                    this.PriceInformationField = new XTypedList<ddex_net.xml._20120404.ddexC.PriceInformation>(this, LinqToXsdTypeManager.Instance, XName.Get("PriceInformation", ""));
                }
                return this.PriceInformationField;
            }
            set {
                if ((value == null)) {
                    this.PriceInformationField = null;
                }
                else {
                    if ((this.PriceInformationField == null)) {
                        this.PriceInformationField = XTypedList<ddex_net.xml._20120404.ddexC.PriceInformation>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("PriceInformation", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.PriceInformation>(this.PriceInformationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether a special ddex:Deal is made between the ddex:Licensor and the ddex:Licensee (=True) or not (=False) regarding the royalties or payments due to be paid for Releases distributed under this ddex:Deal.
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (CommercialModelType*, (Usage+ | AllDealsCancelled? | TakeDown?), (TerritoryCode+ | ExcludedTerritoryCode+), (DistributionChannel+ | ExcludedDistributionChannel+)?, PriceInformation*, (IsPromotional | PromotionalCode)?, ValidityPeriod+, ConsumerRentalPeriod?, PreOrderReleaseDate?, PreOrderPreviewDate?, IsExclusive?, RelatedReleaseOfferSet*, PhysicalReturns?, NumberOfProductsPerCarton?, RightsClaimPolicy*, WebPolicy*)
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsPromotional {
            get {
                XElement x = this.GetElement(XName.Get("IsPromotional", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("IsPromotional", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:PromotionalCode.
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (CommercialModelType*, (Usage+ | AllDealsCancelled? | TakeDown?), (TerritoryCode+ | ExcludedTerritoryCode+), (DistributionChannel+ | ExcludedDistributionChannel+)?, PriceInformation*, (IsPromotional | PromotionalCode)?, ValidityPeriod+, ConsumerRentalPeriod?, PreOrderReleaseDate?, PreOrderPreviewDate?, IsExclusive?, RelatedReleaseOfferSet*, PhysicalReturns?, NumberOfProductsPerCarton?, RightsClaimPolicy*, WebPolicy*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.PromotionalCode PromotionalCode {
            get {
                XElement x = this.GetElement(XName.Get("PromotionalCode", ""));
                return ((ddex_net.xml._20120404.ddexC.PromotionalCode)(x));
            }
            set {
                this.SetElement(XName.Get("PromotionalCode", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details about a ddex:Period of ddex:Time during which the ddex:Deal is valid. No ddex:StartDate in this ddex:Composite means that the ddex:Deal is valid as per contractual relationship between ddex:MessageSender and ddex:MessageRecipient. No ddex:EndDate in this ddex:Composite means that the ddex:Deal is valid until further notice.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (CommercialModelType*, (Usage+ | AllDealsCancelled? | TakeDown?), (TerritoryCode+ | ExcludedTerritoryCode+), (DistributionChannel+ | ExcludedDistributionChannel+)?, PriceInformation*, (IsPromotional | PromotionalCode)?, ValidityPeriod+, ConsumerRentalPeriod?, PreOrderReleaseDate?, PreOrderPreviewDate?, IsExclusive?, RelatedReleaseOfferSet*, PhysicalReturns?, NumberOfProductsPerCarton?, RightsClaimPolicy*, WebPolicy*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Period> ValidityPeriod {
            get {
                if ((this.ValidityPeriodField == null)) {
                    this.ValidityPeriodField = new XTypedList<ddex_net.xml._20120404.ddexC.Period>(this, LinqToXsdTypeManager.Instance, XName.Get("ValidityPeriod", ""));
                }
                return this.ValidityPeriodField;
            }
            set {
                if ((value == null)) {
                    this.ValidityPeriodField = null;
                }
                else {
                    if ((this.ValidityPeriodField == null)) {
                        this.ValidityPeriodField = XTypedList<ddex_net.xml._20120404.ddexC.Period>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ValidityPeriod", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Period>(this.ValidityPeriodField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Period the ddex:DSP may rent something to a ddex:Customer.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CommercialModelType*, (Usage+ | AllDealsCancelled? | TakeDown?), (TerritoryCode+ | ExcludedTerritoryCode+), (DistributionChannel+ | ExcludedDistributionChannel+)?, PriceInformation*, (IsPromotional | PromotionalCode)?, ValidityPeriod+, ConsumerRentalPeriod?, PreOrderReleaseDate?, PreOrderPreviewDate?, IsExclusive?, RelatedReleaseOfferSet*, PhysicalReturns?, NumberOfProductsPerCarton?, RightsClaimPolicy*, WebPolicy*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.ConsumerRentalPeriod ConsumerRentalPeriod {
            get {
                XElement x = this.GetElement(XName.Get("ConsumerRentalPeriod", ""));
                return ((ddex_net.xml._20120404.ddexC.ConsumerRentalPeriod)(x));
            }
            set {
                this.SetElement(XName.Get("ConsumerRentalPeriod", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the related ddex:Release is made available for pre-ordering.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CommercialModelType*, (Usage+ | AllDealsCancelled? | TakeDown?), (TerritoryCode+ | ExcludedTerritoryCode+), (DistributionChannel+ | ExcludedDistributionChannel+)?, PriceInformation*, (IsPromotional | PromotionalCode)?, ValidityPeriod+, ConsumerRentalPeriod?, PreOrderReleaseDate?, PreOrderPreviewDate?, IsExclusive?, RelatedReleaseOfferSet*, PhysicalReturns?, NumberOfProductsPerCarton?, RightsClaimPolicy*, WebPolicy*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.EventDate PreOrderReleaseDate {
            get {
                XElement x = this.GetElement(XName.Get("PreOrderReleaseDate", ""));
                return ((ddex_net.xml._20120404.ddexC.EventDate)(x));
            }
            set {
                this.SetElement(XName.Get("PreOrderReleaseDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the pre-ordered ddex:Release is made first available for previewing.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CommercialModelType*, (Usage+ | AllDealsCancelled? | TakeDown?), (TerritoryCode+ | ExcludedTerritoryCode+), (DistributionChannel+ | ExcludedDistributionChannel+)?, PriceInformation*, (IsPromotional | PromotionalCode)?, ValidityPeriod+, ConsumerRentalPeriod?, PreOrderReleaseDate?, PreOrderPreviewDate?, IsExclusive?, RelatedReleaseOfferSet*, PhysicalReturns?, NumberOfProductsPerCarton?, RightsClaimPolicy*, WebPolicy*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.EventDate PreOrderPreviewDate {
            get {
                XElement x = this.GetElement(XName.Get("PreOrderPreviewDate", ""));
                return ((ddex_net.xml._20120404.ddexC.EventDate)(x));
            }
            set {
                this.SetElement(XName.Get("PreOrderPreviewDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ddex:Deal is exclusive (=True) or not (=False) to the ddex:MessageRecipient with respect to the relevant Territory(ies), Time(s) and Release(s). For other Territory(ies), or Time(s), other ddex:DSPs might be able to sell the Release(s). The exclusivity is in accordance with the agreement between the ddex:MessageSender and ddex:MessageRecipient.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CommercialModelType*, (Usage+ | AllDealsCancelled? | TakeDown?), (TerritoryCode+ | ExcludedTerritoryCode+), (DistributionChannel+ | ExcludedDistributionChannel+)?, PriceInformation*, (IsPromotional | PromotionalCode)?, ValidityPeriod+, ConsumerRentalPeriod?, PreOrderReleaseDate?, PreOrderPreviewDate?, IsExclusive?, RelatedReleaseOfferSet*, PhysicalReturns?, NumberOfProductsPerCarton?, RightsClaimPolicy*, WebPolicy*)
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsExclusive {
            get {
                XElement x = this.GetElement(XName.Get("IsExclusive", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("IsExclusive", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of one or more offers related to the ddex:Release.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (CommercialModelType*, (Usage+ | AllDealsCancelled? | TakeDown?), (TerritoryCode+ | ExcludedTerritoryCode+), (DistributionChannel+ | ExcludedDistributionChannel+)?, PriceInformation*, (IsPromotional | PromotionalCode)?, ValidityPeriod+, ConsumerRentalPeriod?, PreOrderReleaseDate?, PreOrderPreviewDate?, IsExclusive?, RelatedReleaseOfferSet*, PhysicalReturns?, NumberOfProductsPerCarton?, RightsClaimPolicy*, WebPolicy*)
        /// </para>
        /// </summary>
        public IList<RelatedReleaseOfferSet> RelatedReleaseOfferSet {
            get {
                if ((this.RelatedReleaseOfferSetField == null)) {
                    this.RelatedReleaseOfferSetField = new XTypedList<RelatedReleaseOfferSet>(this, LinqToXsdTypeManager.Instance, XName.Get("RelatedReleaseOfferSet", ""));
                }
                return this.RelatedReleaseOfferSetField;
            }
            set {
                if ((value == null)) {
                    this.RelatedReleaseOfferSetField = null;
                }
                else {
                    if ((this.RelatedReleaseOfferSetField == null)) {
                        this.RelatedReleaseOfferSetField = XTypedList<RelatedReleaseOfferSet>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("RelatedReleaseOfferSet", ""));
                    }
                    else {
                        XTypedServices.SetList<RelatedReleaseOfferSet>(this.RelatedReleaseOfferSetField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of physical returns.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CommercialModelType*, (Usage+ | AllDealsCancelled? | TakeDown?), (TerritoryCode+ | ExcludedTerritoryCode+), (DistributionChannel+ | ExcludedDistributionChannel+)?, PriceInformation*, (IsPromotional | PromotionalCode)?, ValidityPeriod+, ConsumerRentalPeriod?, PreOrderReleaseDate?, PreOrderPreviewDate?, IsExclusive?, RelatedReleaseOfferSet*, PhysicalReturns?, NumberOfProductsPerCarton?, RightsClaimPolicy*, WebPolicy*)
        /// </para>
        /// </summary>
        public PhysicalReturns PhysicalReturns {
            get {
                XElement x = this.GetElement(XName.Get("PhysicalReturns", ""));
                return ((PhysicalReturns)(x));
            }
            set {
                this.SetElement(XName.Get("PhysicalReturns", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A number of ddex:Products per carton. This is the smallest number of ddex:Products that can be ordered.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CommercialModelType*, (Usage+ | AllDealsCancelled? | TakeDown?), (TerritoryCode+ | ExcludedTerritoryCode+), (DistributionChannel+ | ExcludedDistributionChannel+)?, PriceInformation*, (IsPromotional | PromotionalCode)?, ValidityPeriod+, ConsumerRentalPeriod?, PreOrderReleaseDate?, PreOrderPreviewDate?, IsExclusive?, RelatedReleaseOfferSet*, PhysicalReturns?, NumberOfProductsPerCarton?, RightsClaimPolicy*, WebPolicy*)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> NumberOfProductsPerCarton {
            get {
                XElement x = this.GetElement(XName.Get("NumberOfProductsPerCarton", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElement(XName.Get("NumberOfProductsPerCarton", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a rights claim policy.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (CommercialModelType*, (Usage+ | AllDealsCancelled? | TakeDown?), (TerritoryCode+ | ExcludedTerritoryCode+), (DistributionChannel+ | ExcludedDistributionChannel+)?, PriceInformation*, (IsPromotional | PromotionalCode)?, ValidityPeriod+, ConsumerRentalPeriod?, PreOrderReleaseDate?, PreOrderPreviewDate?, IsExclusive?, RelatedReleaseOfferSet*, PhysicalReturns?, NumberOfProductsPerCarton?, RightsClaimPolicy*, WebPolicy*)
        /// </para>
        /// </summary>
        public IList<RightsClaimPolicy> RightsClaimPolicy {
            get {
                if ((this.RightsClaimPolicyField == null)) {
                    this.RightsClaimPolicyField = new XTypedList<RightsClaimPolicy>(this, LinqToXsdTypeManager.Instance, XName.Get("RightsClaimPolicy", ""));
                }
                return this.RightsClaimPolicyField;
            }
            set {
                if ((value == null)) {
                    this.RightsClaimPolicyField = null;
                }
                else {
                    if ((this.RightsClaimPolicyField == null)) {
                        this.RightsClaimPolicyField = XTypedList<RightsClaimPolicy>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("RightsClaimPolicy", ""));
                    }
                    else {
                        XTypedServices.SetList<RightsClaimPolicy>(this.RightsClaimPolicyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:UserGeneratedContent permissions.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (CommercialModelType*, (Usage+ | AllDealsCancelled? | TakeDown?), (TerritoryCode+ | ExcludedTerritoryCode+), (DistributionChannel+ | ExcludedDistributionChannel+)?, PriceInformation*, (IsPromotional | PromotionalCode)?, ValidityPeriod+, ConsumerRentalPeriod?, PreOrderReleaseDate?, PreOrderPreviewDate?, IsExclusive?, RelatedReleaseOfferSet*, PhysicalReturns?, NumberOfProductsPerCarton?, RightsClaimPolicy*, WebPolicy*)
        /// </para>
        /// </summary>
        public IList<WebPolicy> WebPolicy {
            get {
                if ((this.WebPolicyField == null)) {
                    this.WebPolicyField = new XTypedList<WebPolicy>(this, LinqToXsdTypeManager.Instance, XName.Get("WebPolicy", ""));
                }
                return this.WebPolicyField;
            }
            set {
                if ((value == null)) {
                    this.WebPolicyField = null;
                }
                else {
                    if ((this.WebPolicyField == null)) {
                        this.WebPolicyField = XTypedList<WebPolicy>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("WebPolicy", ""));
                    }
                    else {
                        XTypedServices.SetList<WebPolicy>(this.WebPolicyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the ern:DealTerms as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("DealTerms", "http://ddex.net/xml/ern/341");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DealTerms>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("CommercialModelType", ""), typeof(ddex_net.xml._20120404.ddexC.CommercialModelType));
            localElementDictionary.Add(XName.Get("Usage", ""), typeof(ddex_net.xml._20120404.ddexC.Usage));
            localElementDictionary.Add(XName.Get("AllDealsCancelled", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("TakeDown", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("TerritoryCode", ""), typeof(object));
            localElementDictionary.Add(XName.Get("ExcludedTerritoryCode", ""), typeof(object));
            localElementDictionary.Add(XName.Get("DistributionChannel", ""), typeof(ddex_net.xml._20120404.ddexC.DSP));
            localElementDictionary.Add(XName.Get("ExcludedDistributionChannel", ""), typeof(ddex_net.xml._20120404.ddexC.DSP));
            localElementDictionary.Add(XName.Get("PriceInformation", ""), typeof(ddex_net.xml._20120404.ddexC.PriceInformation));
            localElementDictionary.Add(XName.Get("IsPromotional", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("PromotionalCode", ""), typeof(ddex_net.xml._20120404.ddexC.PromotionalCode));
            localElementDictionary.Add(XName.Get("ValidityPeriod", ""), typeof(ddex_net.xml._20120404.ddexC.Period));
            localElementDictionary.Add(XName.Get("ConsumerRentalPeriod", ""), typeof(ddex_net.xml._20120404.ddexC.ConsumerRentalPeriod));
            localElementDictionary.Add(XName.Get("PreOrderReleaseDate", ""), typeof(ddex_net.xml._20120404.ddexC.EventDate));
            localElementDictionary.Add(XName.Get("PreOrderPreviewDate", ""), typeof(ddex_net.xml._20120404.ddexC.EventDate));
            localElementDictionary.Add(XName.Get("IsExclusive", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("RelatedReleaseOfferSet", ""), typeof(RelatedReleaseOfferSet));
            localElementDictionary.Add(XName.Get("PhysicalReturns", ""), typeof(PhysicalReturns));
            localElementDictionary.Add(XName.Get("NumberOfProductsPerCarton", ""), typeof(decimal));
            localElementDictionary.Add(XName.Get("RightsClaimPolicy", ""), typeof(RightsClaimPolicy));
            localElementDictionary.Add(XName.Get("WebPolicy", ""), typeof(WebPolicy));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of an ddex:Image. 
    /// </para>
    /// <para>
    /// Regular expression: (ImageType?, IsArtistRelated?, ImageId+, ResourceReference, Title*, CreationDate?, ImageDetailsByTerritory+)
    /// </para>
    /// </summary>
    public partial class Image : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.ImageId> ImageIdField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Title> TitleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ImageDetailsByTerritory> ImageDetailsByTerritoryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Image(XElement xe) { return XTypedServices.ToXTypedElement<Image>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Image() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ImageType", "")), new NamedContentModelEntity(XName.Get("IsArtistRelated", "")), new NamedContentModelEntity(XName.Get("ImageId", "")), new NamedContentModelEntity(XName.Get("ResourceReference", "")), new NamedContentModelEntity(XName.Get("Title", "")), new NamedContentModelEntity(XName.Get("CreationDate", "")), new NamedContentModelEntity(XName.Get("ImageDetailsByTerritory", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of an ddex:Image. 
        /// </para>
        /// <para>
        /// Regular expression: (ImageType?, IsArtistRelated?, ImageId+, ResourceReference, Title*, CreationDate?, ImageDetailsByTerritory+)
        /// </para>
        /// </summary>
        public Image() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:Type of the ern:Image.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ImageType?, IsArtistRelated?, ImageId+, ResourceReference, Title*, CreationDate?, ImageDetailsByTerritory+)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.ImageType ImageType {
            get {
                XElement x = this.GetElement(XName.Get("ImageType", ""));
                return ((ddex_net.xml._20120404.ddexC.ImageType)(x));
            }
            set {
                this.SetElement(XName.Get("ImageType", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ern:Image is related to an ddex:Artist (=True) or not (=False).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ImageType?, IsArtistRelated?, ImageId+, ResourceReference, Title*, CreationDate?, ImageDetailsByTerritory+)
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsArtistRelated {
            get {
                XElement x = this.GetElement(XName.Get("IsArtistRelated", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("IsArtistRelated", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:Identifiers of the ern:Image.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ImageType?, IsArtistRelated?, ImageId+, ResourceReference, Title*, CreationDate?, ImageDetailsByTerritory+)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.ImageId> ImageId {
            get {
                if ((this.ImageIdField == null)) {
                    this.ImageIdField = new XTypedList<ddex_net.xml._20120404.ddexC.ImageId>(this, LinqToXsdTypeManager.Instance, XName.Get("ImageId", ""));
                }
                return this.ImageIdField;
            }
            set {
                if ((value == null)) {
                    this.ImageIdField = null;
                }
                else {
                    if ((this.ImageIdField == null)) {
                        this.ImageIdField = XTypedList<ddex_net.xml._20120404.ddexC.ImageId>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ImageId", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.ImageId>(this.ImageIdField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Identifier (specific to the ddex:Message) of the ern:Image within the ddex:Release which contains it. This is a ddex:LocalResourceAnchor starting with the letter A.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ImageType?, IsArtistRelated?, ImageId+, ResourceReference, Title*, CreationDate?, ImageDetailsByTerritory+)
        /// </para>
        /// </summary>
        public string ResourceReference {
            get {
                XElement x = this.GetElement(XName.Get("ResourceReference", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("ResourceReference", ""), value, "ResourceReference", ResourceReferenceLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Title of the ern:Image.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ImageType?, IsArtistRelated?, ImageId+, ResourceReference, Title*, CreationDate?, ImageDetailsByTerritory+)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Title> Title {
            get {
                if ((this.TitleField == null)) {
                    this.TitleField = new XTypedList<ddex_net.xml._20120404.ddexC.Title>(this, LinqToXsdTypeManager.Instance, XName.Get("Title", ""));
                }
                return this.TitleField;
            }
            set {
                if ((value == null)) {
                    this.TitleField = null;
                }
                else {
                    if ((this.TitleField == null)) {
                        this.TitleField = XTypedList<ddex_net.xml._20120404.ddexC.Title>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Title", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Title>(this.TitleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ern:Image was created.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ImageType?, IsArtistRelated?, ImageId+, ResourceReference, Title*, CreationDate?, ImageDetailsByTerritory+)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.EventDate CreationDate {
            get {
                XElement x = this.GetElement(XName.Get("CreationDate", ""));
                return ((ddex_net.xml._20120404.ddexC.EventDate)(x));
            }
            set {
                this.SetElement(XName.Get("CreationDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ern:Image which may vary according to ddex:Territory of release.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ImageType?, IsArtistRelated?, ImageId+, ResourceReference, Title*, CreationDate?, ImageDetailsByTerritory+)
        /// </para>
        /// </summary>
        public IList<ImageDetailsByTerritory> ImageDetailsByTerritory {
            get {
                if ((this.ImageDetailsByTerritoryField == null)) {
                    this.ImageDetailsByTerritoryField = new XTypedList<ImageDetailsByTerritory>(this, LinqToXsdTypeManager.Instance, XName.Get("ImageDetailsByTerritory", ""));
                }
                return this.ImageDetailsByTerritoryField;
            }
            set {
                if ((value == null)) {
                    this.ImageDetailsByTerritoryField = null;
                }
                else {
                    if ((this.ImageDetailsByTerritoryField == null)) {
                        this.ImageDetailsByTerritoryField = XTypedList<ImageDetailsByTerritory>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ImageDetailsByTerritory", ""));
                    }
                    else {
                        XTypedServices.SetList<ImageDetailsByTerritory>(this.ImageDetailsByTerritoryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ern:Image ddex:Element was updated (=True) or not (=False). The ddex:Flag may only be used when the ddex:UpdateIndicator is set to ddex:UpdateMessage. When this ddex:Boolean ddex:Flag is set to true, the ddex:MessageRecipient is expected to replace any previously provided ern:Image data with the now provided data.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsUpdated {
            get {
                XAttribute x = this.Attribute(XName.Get("IsUpdated", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("IsUpdated", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the ern:Image as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Image", "http://ddex.net/xml/ern/341");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Image>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ImageType", ""), typeof(ddex_net.xml._20120404.ddexC.ImageType));
            localElementDictionary.Add(XName.Get("IsArtistRelated", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("ImageId", ""), typeof(ddex_net.xml._20120404.ddexC.ImageId));
            localElementDictionary.Add(XName.Get("ResourceReference", ""), typeof(string));
            localElementDictionary.Add(XName.Get("Title", ""), typeof(ddex_net.xml._20120404.ddexC.Title));
            localElementDictionary.Add(XName.Get("CreationDate", ""), typeof(ddex_net.xml._20120404.ddexC.EventDate));
            localElementDictionary.Add(XName.Get("ImageDetailsByTerritory", ""), typeof(ImageDetailsByTerritory));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class ResourceReferenceLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "A[\\d\\-_a-zA-Z]+"}, 0, XmlSchemaWhiteSpace.Collapse));
            
            private ResourceReferenceLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of ddex:Descriptors, Dates and other attributes of an ddex:Image which may vary according to ddex:Territory of release.
    /// </para>
    /// <para>
    /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, CLine*, Description?, CourtesyLine?, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalImageDetails*)
    /// </para>
    /// </summary>
    public partial class ImageDetailsByTerritory : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<object> TerritoryCodeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<object> ExcludedTerritoryCodeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.ResourceContributor> ResourceContributorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.IndirectResourceContributor> IndirectResourceContributorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.CLine> CLineField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Keywords> KeywordsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Genre> GenreField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.ParentalWarningType> ParentalWarningTypeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TechnicalImageDetails> TechnicalImageDetailsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator ImageDetailsByTerritory(XElement xe) { return XTypedServices.ToXTypedElement<ImageDetailsByTerritory>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ImageDetailsByTerritory() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:Descriptors, Dates and other attributes of an ddex:Image which may vary according to ddex:Territory of release.
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, CLine*, Description?, CourtesyLine?, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalImageDetails*)
        /// </para>
        /// </summary>
        public ImageDetailsByTerritory() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Territory to which the ddex:Image details apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:ExcludedTerritory shall be present, but not both.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, CLine*, Description?, CourtesyLine?, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalImageDetails*)
        /// </para>
        /// </summary>
        public IList<object> TerritoryCode {
            get {
                if ((this.TerritoryCodeField == null)) {
                    this.TerritoryCodeField = new XSimpleList<object>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, XName.Get("TerritoryCode", ""));
                }
                return this.TerritoryCodeField;
            }
            set {
                if ((value == null)) {
                    this.TerritoryCodeField = null;
                }
                else {
                    if ((this.TerritoryCodeField == null)) {
                        this.TerritoryCodeField = XSimpleList<object>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, value, XName.Get("TerritoryCode", ""));
                    }
                    else {
                        XTypedServices.SetList<System.Object>(this.TerritoryCodeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Territory to which the ddex:Image details do not apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:Territory shall be present, but not both.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, CLine*, Description?, CourtesyLine?, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalImageDetails*)
        /// </para>
        /// </summary>
        public IList<object> ExcludedTerritoryCode {
            get {
                if ((this.ExcludedTerritoryCodeField == null)) {
                    this.ExcludedTerritoryCodeField = new XSimpleList<object>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, XName.Get("ExcludedTerritoryCode", ""));
                }
                return this.ExcludedTerritoryCodeField;
            }
            set {
                if ((value == null)) {
                    this.ExcludedTerritoryCodeField = null;
                }
                else {
                    if ((this.ExcludedTerritoryCodeField == null)) {
                        this.ExcludedTerritoryCodeField = XSimpleList<object>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, value, XName.Get("ExcludedTerritoryCode", ""));
                    }
                    else {
                        XTypedServices.SetList<System.Object>(this.ExcludedTerritoryCodeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Contributor to the ddex:Image.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, CLine*, Description?, CourtesyLine?, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalImageDetails*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.ResourceContributor> ResourceContributor {
            get {
                if ((this.ResourceContributorField == null)) {
                    this.ResourceContributorField = new XTypedList<ddex_net.xml._20120404.ddexC.ResourceContributor>(this, LinqToXsdTypeManager.Instance, XName.Get("ResourceContributor", ""));
                }
                return this.ResourceContributorField;
            }
            set {
                if ((value == null)) {
                    this.ResourceContributorField = null;
                }
                else {
                    if ((this.ResourceContributorField == null)) {
                        this.ResourceContributorField = XTypedList<ddex_net.xml._20120404.ddexC.ResourceContributor>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ResourceContributor", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.ResourceContributor>(this.ResourceContributorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of an indirect ddex:Contributor to the ddex:Image.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, CLine*, Description?, CourtesyLine?, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalImageDetails*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.IndirectResourceContributor> IndirectResourceContributor {
            get {
                if ((this.IndirectResourceContributorField == null)) {
                    this.IndirectResourceContributorField = new XTypedList<ddex_net.xml._20120404.ddexC.IndirectResourceContributor>(this, LinqToXsdTypeManager.Instance, XName.Get("IndirectResourceContributor", ""));
                }
                return this.IndirectResourceContributorField;
            }
            set {
                if ((value == null)) {
                    this.IndirectResourceContributorField = null;
                }
                else {
                    if ((this.IndirectResourceContributorField == null)) {
                        this.IndirectResourceContributorField = XTypedList<ddex_net.xml._20120404.ddexC.IndirectResourceContributor>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("IndirectResourceContributor", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.IndirectResourceContributor>(this.IndirectResourceContributorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:CLine for the ddex:Image.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, CLine*, Description?, CourtesyLine?, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalImageDetails*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.CLine> CLine {
            get {
                if ((this.CLineField == null)) {
                    this.CLineField = new XTypedList<ddex_net.xml._20120404.ddexC.CLine>(this, LinqToXsdTypeManager.Instance, XName.Get("CLine", ""));
                }
                return this.CLineField;
            }
            set {
                if ((value == null)) {
                    this.CLineField = null;
                }
                else {
                    if ((this.CLineField == null)) {
                        this.CLineField = XTypedList<ddex_net.xml._20120404.ddexC.CLine>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CLine", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.CLine>(this.CLineField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a ddex:Description of the subject of the ddex:Image.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, CLine*, Description?, CourtesyLine?, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalImageDetails*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.Description Description {
            get {
                XElement x = this.GetElement(XName.Get("Description", ""));
                return ((ddex_net.xml._20120404.ddexC.Description)(x));
            }
            set {
                this.SetElement(XName.Get("Description", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing an ddex:Annotation which acknowledges record companies and/or other Parties giving permission for ddex:Artists or others featured on the ddex:Image.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, CLine*, Description?, CourtesyLine?, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalImageDetails*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.CourtesyLine CourtesyLine {
            get {
                XElement x = this.GetElement(XName.Get("CourtesyLine", ""));
                return ((ddex_net.xml._20120404.ddexC.CourtesyLine)(x));
            }
            set {
                this.SetElement(XName.Get("CourtesyLine", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ddex:Image was originally published, whether for physical or electronic/online distribution.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, CLine*, Description?, CourtesyLine?, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalImageDetails*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.EventDate OriginalResourceReleaseDate {
            get {
                XElement x = this.GetElement(XName.Get("OriginalResourceReleaseDate", ""));
                return ((ddex_net.xml._20120404.ddexC.EventDate)(x));
            }
            set {
                this.SetElement(XName.Get("OriginalResourceReleaseDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:FulfillmentDate.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, CLine*, Description?, CourtesyLine?, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalImageDetails*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.FulfillmentDate FulfillmentDate {
            get {
                XElement x = this.GetElement(XName.Get("FulfillmentDate", ""));
                return ((ddex_net.xml._20120404.ddexC.FulfillmentDate)(x));
            }
            set {
                this.SetElement(XName.Get("FulfillmentDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Description of the ddex:Image containing ddex:Keywords.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, CLine*, Description?, CourtesyLine?, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalImageDetails*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Keywords> Keywords {
            get {
                if ((this.KeywordsField == null)) {
                    this.KeywordsField = new XTypedList<ddex_net.xml._20120404.ddexC.Keywords>(this, LinqToXsdTypeManager.Instance, XName.Get("Keywords", ""));
                }
                return this.KeywordsField;
            }
            set {
                if ((value == null)) {
                    this.KeywordsField = null;
                }
                else {
                    if ((this.KeywordsField == null)) {
                        this.KeywordsField = XTypedList<ddex_net.xml._20120404.ddexC.Keywords>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Keywords", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Keywords>(this.KeywordsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Synopsis of the ddex:Image.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, CLine*, Description?, CourtesyLine?, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalImageDetails*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.Synopsis Synopsis {
            get {
                XElement x = this.GetElement(XName.Get("Synopsis", ""));
                return ((ddex_net.xml._20120404.ddexC.Synopsis)(x));
            }
            set {
                this.SetElement(XName.Get("Synopsis", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Genre to which the ddex:Image belongs.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, CLine*, Description?, CourtesyLine?, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalImageDetails*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Genre> Genre {
            get {
                if ((this.GenreField == null)) {
                    this.GenreField = new XTypedList<ddex_net.xml._20120404.ddexC.Genre>(this, LinqToXsdTypeManager.Instance, XName.Get("Genre", ""));
                }
                return this.GenreField;
            }
            set {
                if ((value == null)) {
                    this.GenreField = null;
                }
                else {
                    if ((this.GenreField == null)) {
                        this.GenreField = XTypedList<ddex_net.xml._20120404.ddexC.Genre>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Genre", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Genre>(this.GenreField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the classification of the ddex:Image according to advice which it carries about the level of explicitness or offensiveness of its content.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, CLine*, Description?, CourtesyLine?, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalImageDetails*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.ParentalWarningType> ParentalWarningType {
            get {
                if ((this.ParentalWarningTypeField == null)) {
                    this.ParentalWarningTypeField = new XTypedList<ddex_net.xml._20120404.ddexC.ParentalWarningType>(this, LinqToXsdTypeManager.Instance, XName.Get("ParentalWarningType", ""));
                }
                return this.ParentalWarningTypeField;
            }
            set {
                if ((value == null)) {
                    this.ParentalWarningTypeField = null;
                }
                else {
                    if ((this.ParentalWarningTypeField == null)) {
                        this.ParentalWarningTypeField = XTypedList<ddex_net.xml._20120404.ddexC.ParentalWarningType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ParentalWarningType", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.ParentalWarningType>(this.ParentalWarningTypeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing technical details of the ddex:Image.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, CLine*, Description?, CourtesyLine?, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalImageDetails*)
        /// </para>
        /// </summary>
        public IList<TechnicalImageDetails> TechnicalImageDetails {
            get {
                if ((this.TechnicalImageDetailsField == null)) {
                    this.TechnicalImageDetailsField = new XTypedList<TechnicalImageDetails>(this, LinqToXsdTypeManager.Instance, XName.Get("TechnicalImageDetails", ""));
                }
                return this.TechnicalImageDetailsField;
            }
            set {
                if ((value == null)) {
                    this.TechnicalImageDetailsField = null;
                }
                else {
                    if ((this.TechnicalImageDetailsField == null)) {
                        this.TechnicalImageDetailsField = XTypedList<TechnicalImageDetails>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("TechnicalImageDetails", ""));
                    }
                    else {
                        XTypedServices.SetList<TechnicalImageDetails>(this.TechnicalImageDetailsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the ddexC:ImageDetailsByTerritory as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ImageDetailsByTerritory", "http://ddex.net/xml/ern/341");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ImageDetailsByTerritory>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("TerritoryCode", ""), typeof(object));
            localElementDictionary.Add(XName.Get("ExcludedTerritoryCode", ""), typeof(object));
            localElementDictionary.Add(XName.Get("ResourceContributor", ""), typeof(ddex_net.xml._20120404.ddexC.ResourceContributor));
            localElementDictionary.Add(XName.Get("IndirectResourceContributor", ""), typeof(ddex_net.xml._20120404.ddexC.IndirectResourceContributor));
            localElementDictionary.Add(XName.Get("CLine", ""), typeof(ddex_net.xml._20120404.ddexC.CLine));
            localElementDictionary.Add(XName.Get("Description", ""), typeof(ddex_net.xml._20120404.ddexC.Description));
            localElementDictionary.Add(XName.Get("CourtesyLine", ""), typeof(ddex_net.xml._20120404.ddexC.CourtesyLine));
            localElementDictionary.Add(XName.Get("OriginalResourceReleaseDate", ""), typeof(ddex_net.xml._20120404.ddexC.EventDate));
            localElementDictionary.Add(XName.Get("FulfillmentDate", ""), typeof(ddex_net.xml._20120404.ddexC.FulfillmentDate));
            localElementDictionary.Add(XName.Get("Keywords", ""), typeof(ddex_net.xml._20120404.ddexC.Keywords));
            localElementDictionary.Add(XName.Get("Synopsis", ""), typeof(ddex_net.xml._20120404.ddexC.Synopsis));
            localElementDictionary.Add(XName.Get("Genre", ""), typeof(ddex_net.xml._20120404.ddexC.Genre));
            localElementDictionary.Add(XName.Get("ParentalWarningType", ""), typeof(ddex_net.xml._20120404.ddexC.ParentalWarningType));
            localElementDictionary.Add(XName.Get("TechnicalImageDetails", ""), typeof(TechnicalImageDetails));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:MIDI.
    /// </para>
    /// <para>
    /// Regular expression: (MidiType?, IsArtistRelated?, MidiId+, IndirectMidiId*, ResourceReference, ReferenceTitle, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, IsComputerGenerated?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance?, Duration, RightsAgreementId?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, MidiDetailsByTerritory+)
    /// </para>
    /// </summary>
    public partial class MIDI : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.MidiId> MidiIdField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.MusicalWorkId> IndirectMidiIdField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<MidiDetailsByTerritory> MidiDetailsByTerritoryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator MIDI(XElement xe) { return XTypedServices.ToXTypedElement<MIDI>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MIDI() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("MidiType", "")), new NamedContentModelEntity(XName.Get("IsArtistRelated", "")), new NamedContentModelEntity(XName.Get("MidiId", "")), new NamedContentModelEntity(XName.Get("IndirectMidiId", "")), new NamedContentModelEntity(XName.Get("ResourceReference", "")), new NamedContentModelEntity(XName.Get("ReferenceTitle", "")), new NamedContentModelEntity(XName.Get("InstrumentationDescription", "")), new NamedContentModelEntity(XName.Get("IsMedley", "")), new NamedContentModelEntity(XName.Get("IsPotpourri", "")), new NamedContentModelEntity(XName.Get("IsInstrumental", "")), new NamedContentModelEntity(XName.Get("IsBackground", "")), new NamedContentModelEntity(XName.Get("IsHiddenResource", "")), new NamedContentModelEntity(XName.Get("IsBonusResource", "")), new NamedContentModelEntity(XName.Get("IsComputerGenerated", "")), new NamedContentModelEntity(XName.Get("NoSilenceBefore", "")), new NamedContentModelEntity(XName.Get("NoSilenceAfter", "")), new NamedContentModelEntity(XName.Get("PerformerInformationRequired", "")), new NamedContentModelEntity(XName.Get("LanguageOfPerformance", "")), new NamedContentModelEntity(XName.Get("Duration", "")), new NamedContentModelEntity(XName.Get("RightsAgreementId", "")), new NamedContentModelEntity(XName.Get("ResourceMusicalWorkReferenceList", "")), new NamedContentModelEntity(XName.Get("ResourceContainedResourceReferenceList", "")), new NamedContentModelEntity(XName.Get("CreationDate", "")), new NamedContentModelEntity(XName.Get("MasteredDate", "")), new NamedContentModelEntity(XName.Get("MidiDetailsByTerritory", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:MIDI.
        /// </para>
        /// <para>
        /// Regular expression: (MidiType?, IsArtistRelated?, MidiId+, IndirectMidiId*, ResourceReference, ReferenceTitle, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, IsComputerGenerated?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance?, Duration, RightsAgreementId?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, MidiDetailsByTerritory+)
        /// </para>
        /// </summary>
        public MIDI() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:Type of the ern:MIDI.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MidiType?, IsArtistRelated?, MidiId+, IndirectMidiId*, ResourceReference, ReferenceTitle, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, IsComputerGenerated?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance?, Duration, RightsAgreementId?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, MidiDetailsByTerritory+)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.MidiType MidiType {
            get {
                XElement x = this.GetElement(XName.Get("MidiType", ""));
                return ((ddex_net.xml._20120404.ddexC.MidiType)(x));
            }
            set {
                this.SetElement(XName.Get("MidiType", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ern:MIDI is related to an ddex:Artist (=True) or not (=False).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MidiType?, IsArtistRelated?, MidiId+, IndirectMidiId*, ResourceReference, ReferenceTitle, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, IsComputerGenerated?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance?, Duration, RightsAgreementId?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, MidiDetailsByTerritory+)
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsArtistRelated {
            get {
                XElement x = this.GetElement(XName.Get("IsArtistRelated", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("IsArtistRelated", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:Identifiers of the Midi.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (MidiType?, IsArtistRelated?, MidiId+, IndirectMidiId*, ResourceReference, ReferenceTitle, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, IsComputerGenerated?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance?, Duration, RightsAgreementId?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, MidiDetailsByTerritory+)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.MidiId> MidiId {
            get {
                if ((this.MidiIdField == null)) {
                    this.MidiIdField = new XTypedList<ddex_net.xml._20120404.ddexC.MidiId>(this, LinqToXsdTypeManager.Instance, XName.Get("MidiId", ""));
                }
                return this.MidiIdField;
            }
            set {
                if ((value == null)) {
                    this.MidiIdField = null;
                }
                else {
                    if ((this.MidiIdField == null)) {
                        this.MidiIdField = XTypedList<ddex_net.xml._20120404.ddexC.MidiId>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("MidiId", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.MidiId>(this.MidiIdField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:MusicalWorkId of a ddex:MusicalWork used in the ern:MIDI.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (MidiType?, IsArtistRelated?, MidiId+, IndirectMidiId*, ResourceReference, ReferenceTitle, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, IsComputerGenerated?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance?, Duration, RightsAgreementId?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, MidiDetailsByTerritory+)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.MusicalWorkId> IndirectMidiId {
            get {
                if ((this.IndirectMidiIdField == null)) {
                    this.IndirectMidiIdField = new XTypedList<ddex_net.xml._20120404.ddexC.MusicalWorkId>(this, LinqToXsdTypeManager.Instance, XName.Get("IndirectMidiId", ""));
                }
                return this.IndirectMidiIdField;
            }
            set {
                if ((value == null)) {
                    this.IndirectMidiIdField = null;
                }
                else {
                    if ((this.IndirectMidiIdField == null)) {
                        this.IndirectMidiIdField = XTypedList<ddex_net.xml._20120404.ddexC.MusicalWorkId>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("IndirectMidiId", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.MusicalWorkId>(this.IndirectMidiIdField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Identifier (specific to the ddex:Message) of the ern:MIDI within the ddex:Release which contains it. This is a ddex:LocalResourceAnchor starting with the letter A.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (MidiType?, IsArtistRelated?, MidiId+, IndirectMidiId*, ResourceReference, ReferenceTitle, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, IsComputerGenerated?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance?, Duration, RightsAgreementId?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, MidiDetailsByTerritory+)
        /// </para>
        /// </summary>
        public string ResourceReference {
            get {
                XElement x = this.GetElement(XName.Get("ResourceReference", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("ResourceReference", ""), value, "ResourceReference", ResourceReferenceLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:ReferenceTitle of the ern:MIDI.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (MidiType?, IsArtistRelated?, MidiId+, IndirectMidiId*, ResourceReference, ReferenceTitle, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, IsComputerGenerated?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance?, Duration, RightsAgreementId?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, MidiDetailsByTerritory+)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.ReferenceTitle ReferenceTitle {
            get {
                XElement x = this.GetElement(XName.Get("ReferenceTitle", ""));
                return ((ddex_net.xml._20120404.ddexC.ReferenceTitle)(x));
            }
            set {
                this.SetElement(XName.Get("ReferenceTitle", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a ddex:Description of the ddex:Type of instrumentation of the MusicalWork(s) in the ern:MIDI.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MidiType?, IsArtistRelated?, MidiId+, IndirectMidiId*, ResourceReference, ReferenceTitle, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, IsComputerGenerated?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance?, Duration, RightsAgreementId?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, MidiDetailsByTerritory+)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.Description InstrumentationDescription {
            get {
                XElement x = this.GetElement(XName.Get("InstrumentationDescription", ""));
                return ((ddex_net.xml._20120404.ddexC.Description)(x));
            }
            set {
                this.SetElement(XName.Get("InstrumentationDescription", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ern:MIDI is a ddex:Medley (=True) or not (=False).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MidiType?, IsArtistRelated?, MidiId+, IndirectMidiId*, ResourceReference, ReferenceTitle, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, IsComputerGenerated?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance?, Duration, RightsAgreementId?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, MidiDetailsByTerritory+)
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsMedley {
            get {
                XElement x = this.GetElement(XName.Get("IsMedley", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("IsMedley", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ern:MIDI is a ddex:Potpourri (=True) or not (=False).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MidiType?, IsArtistRelated?, MidiId+, IndirectMidiId*, ResourceReference, ReferenceTitle, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, IsComputerGenerated?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance?, Duration, RightsAgreementId?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, MidiDetailsByTerritory+)
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsPotpourri {
            get {
                XElement x = this.GetElement(XName.Get("IsPotpourri", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("IsPotpourri", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ern:MIDI is instrumental (=True) or not (=False).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MidiType?, IsArtistRelated?, MidiId+, IndirectMidiId*, ResourceReference, ReferenceTitle, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, IsComputerGenerated?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance?, Duration, RightsAgreementId?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, MidiDetailsByTerritory+)
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsInstrumental {
            get {
                XElement x = this.GetElement(XName.Get("IsInstrumental", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("IsInstrumental", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ern:MIDI is used as background to other audio or audiovisual material (=True) or not (=False).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MidiType?, IsArtistRelated?, MidiId+, IndirectMidiId*, ResourceReference, ReferenceTitle, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, IsComputerGenerated?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance?, Duration, RightsAgreementId?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, MidiDetailsByTerritory+)
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsBackground {
            get {
                XElement x = this.GetElement(XName.Get("IsBackground", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("IsBackground", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ern:MIDI is hidden in some way from the ddex:Consumer (=True) or not (=False).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MidiType?, IsArtistRelated?, MidiId+, IndirectMidiId*, ResourceReference, ReferenceTitle, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, IsComputerGenerated?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance?, Duration, RightsAgreementId?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, MidiDetailsByTerritory+)
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsHiddenResource {
            get {
                XElement x = this.GetElement(XName.Get("IsHiddenResource", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("IsHiddenResource", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ern:MIDI is additional to those on the original ddex:Release of which this is a ddex:Version (=True) or not (=False).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MidiType?, IsArtistRelated?, MidiId+, IndirectMidiId*, ResourceReference, ReferenceTitle, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, IsComputerGenerated?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance?, Duration, RightsAgreementId?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, MidiDetailsByTerritory+)
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsBonusResource {
            get {
                XElement x = this.GetElement(XName.Get("IsBonusResource", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("IsBonusResource", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ern:MIDI is generated by a computer (=True) or not (=False).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MidiType?, IsArtistRelated?, MidiId+, IndirectMidiId*, ResourceReference, ReferenceTitle, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, IsComputerGenerated?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance?, Duration, RightsAgreementId?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, MidiDetailsByTerritory+)
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsComputerGenerated {
            get {
                XElement x = this.GetElement(XName.Get("IsComputerGenerated", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("IsComputerGenerated", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ern:MIDI is preceded by a period of silence (=False) or not (=True). 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MidiType?, IsArtistRelated?, MidiId+, IndirectMidiId*, ResourceReference, ReferenceTitle, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, IsComputerGenerated?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance?, Duration, RightsAgreementId?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, MidiDetailsByTerritory+)
        /// </para>
        /// </summary>
        public System.Nullable<bool> NoSilenceBefore {
            get {
                XElement x = this.GetElement(XName.Get("NoSilenceBefore", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("NoSilenceBefore", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ern:MIDI is followed by a period of silence (=False) or not (=True). 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MidiType?, IsArtistRelated?, MidiId+, IndirectMidiId*, ResourceReference, ReferenceTitle, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, IsComputerGenerated?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance?, Duration, RightsAgreementId?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, MidiDetailsByTerritory+)
        /// </para>
        /// </summary>
        public System.Nullable<bool> NoSilenceAfter {
            get {
                XElement x = this.GetElement(XName.Get("NoSilenceAfter", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("NoSilenceAfter", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Flag indicating whether performer information is required (=True) or not (=False) when communicating details of the ern:MIDI.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MidiType?, IsArtistRelated?, MidiId+, IndirectMidiId*, ResourceReference, ReferenceTitle, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, IsComputerGenerated?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance?, Duration, RightsAgreementId?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, MidiDetailsByTerritory+)
        /// </para>
        /// </summary>
        public System.Nullable<bool> PerformerInformationRequired {
            get {
                XElement x = this.GetElement(XName.Get("PerformerInformationRequired", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("PerformerInformationRequired", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language of the ddex:Performance recorded in the ern:MIDI (represented by an ISO 639-2 iso639a2:LanguageCode).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MidiType?, IsArtistRelated?, MidiId+, IndirectMidiId*, ResourceReference, ReferenceTitle, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, IsComputerGenerated?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance?, Duration, RightsAgreementId?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, MidiDetailsByTerritory+)
        /// </para>
        /// </summary>
        public string LanguageOfPerformance {
            get {
                XElement x = this.GetElement(XName.Get("LanguageOfPerformance", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("LanguageOfPerformance", ""), value, "LanguageOfPerformance", global::ddex_net.xml._20120404.iso639a2.LanguageCode.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Duration of the ern:MIDI (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (MidiType?, IsArtistRelated?, MidiId+, IndirectMidiId*, ResourceReference, ReferenceTitle, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, IsComputerGenerated?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance?, Duration, RightsAgreementId?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, MidiDetailsByTerritory+)
        /// </para>
        /// </summary>
        public System.TimeSpan Duration {
            get {
                XElement x = this.GetElement(XName.Get("Duration", ""));
                return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
            set {
                this.SetElement(XName.Get("Duration", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:Identifiers of a ddex:License, ddex:Claim, ddex:RightShare or contract for the MusicalWork(s) used in the ern:MIDI.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MidiType?, IsArtistRelated?, MidiId+, IndirectMidiId*, ResourceReference, ReferenceTitle, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, IsComputerGenerated?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance?, Duration, RightsAgreementId?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, MidiDetailsByTerritory+)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.RightsAgreementId RightsAgreementId {
            get {
                XElement x = this.GetElement(XName.Get("RightsAgreementId", ""));
                return ((ddex_net.xml._20120404.ddexC.RightsAgreementId)(x));
            }
            set {
                this.SetElement(XName.Get("RightsAgreementId", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of one or more ddex:MusicalWorks contained in the ern:MIDI.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MidiType?, IsArtistRelated?, MidiId+, IndirectMidiId*, ResourceReference, ReferenceTitle, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, IsComputerGenerated?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance?, Duration, RightsAgreementId?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, MidiDetailsByTerritory+)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.ResourceMusicalWorkReferenceList ResourceMusicalWorkReferenceList {
            get {
                XElement x = this.GetElement(XName.Get("ResourceMusicalWorkReferenceList", ""));
                return ((ddex_net.xml._20120404.ddexC.ResourceMusicalWorkReferenceList)(x));
            }
            set {
                this.SetElement(XName.Get("ResourceMusicalWorkReferenceList", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:ResourceContainedResourceReferences referring to a ddex:Resource that is contained in the current ern:MIDI.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MidiType?, IsArtistRelated?, MidiId+, IndirectMidiId*, ResourceReference, ReferenceTitle, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, IsComputerGenerated?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance?, Duration, RightsAgreementId?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, MidiDetailsByTerritory+)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.ResourceContainedResourceReferenceList ResourceContainedResourceReferenceList {
            get {
                XElement x = this.GetElement(XName.Get("ResourceContainedResourceReferenceList", ""));
                return ((ddex_net.xml._20120404.ddexC.ResourceContainedResourceReferenceList)(x));
            }
            set {
                this.SetElement(XName.Get("ResourceContainedResourceReferenceList", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ern:MIDI was created.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MidiType?, IsArtistRelated?, MidiId+, IndirectMidiId*, ResourceReference, ReferenceTitle, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, IsComputerGenerated?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance?, Duration, RightsAgreementId?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, MidiDetailsByTerritory+)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.EventDate CreationDate {
            get {
                XElement x = this.GetElement(XName.Get("CreationDate", ""));
                return ((ddex_net.xml._20120404.ddexC.EventDate)(x));
            }
            set {
                this.SetElement(XName.Get("CreationDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ern:MIDI was originally mastered (in either analogue or digital form).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MidiType?, IsArtistRelated?, MidiId+, IndirectMidiId*, ResourceReference, ReferenceTitle, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, IsComputerGenerated?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance?, Duration, RightsAgreementId?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, MidiDetailsByTerritory+)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.EventDate MasteredDate {
            get {
                XElement x = this.GetElement(XName.Get("MasteredDate", ""));
                return ((ddex_net.xml._20120404.ddexC.EventDate)(x));
            }
            set {
                this.SetElement(XName.Get("MasteredDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:Descriptors and other attributes of the ern:MIDI which may vary according to ddex:Territory of release. 
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (MidiType?, IsArtistRelated?, MidiId+, IndirectMidiId*, ResourceReference, ReferenceTitle, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, IsComputerGenerated?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance?, Duration, RightsAgreementId?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, MidiDetailsByTerritory+)
        /// </para>
        /// </summary>
        public IList<MidiDetailsByTerritory> MidiDetailsByTerritory {
            get {
                if ((this.MidiDetailsByTerritoryField == null)) {
                    this.MidiDetailsByTerritoryField = new XTypedList<MidiDetailsByTerritory>(this, LinqToXsdTypeManager.Instance, XName.Get("MidiDetailsByTerritory", ""));
                }
                return this.MidiDetailsByTerritoryField;
            }
            set {
                if ((value == null)) {
                    this.MidiDetailsByTerritoryField = null;
                }
                else {
                    if ((this.MidiDetailsByTerritoryField == null)) {
                        this.MidiDetailsByTerritoryField = XTypedList<MidiDetailsByTerritory>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("MidiDetailsByTerritory", ""));
                    }
                    else {
                        XTypedServices.SetList<MidiDetailsByTerritory>(this.MidiDetailsByTerritoryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ern:MIDI ddex:Element was updated (=True) or not (=False). The ddex:Flag may only be used when the ddex:UpdateIndicator is set to ddex:UpdateMessage. When this ddex:Boolean ddex:Flag is set to true, the ddex:MessageRecipient is expected to replace any previously provided ern:MIDI data with the now provided data.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsUpdated {
            get {
                XAttribute x = this.Attribute(XName.Get("IsUpdated", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("IsUpdated", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the ern:MIDI as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MIDI", "http://ddex.net/xml/ern/341");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MIDI>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("MidiType", ""), typeof(ddex_net.xml._20120404.ddexC.MidiType));
            localElementDictionary.Add(XName.Get("IsArtistRelated", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("MidiId", ""), typeof(ddex_net.xml._20120404.ddexC.MidiId));
            localElementDictionary.Add(XName.Get("IndirectMidiId", ""), typeof(ddex_net.xml._20120404.ddexC.MusicalWorkId));
            localElementDictionary.Add(XName.Get("ResourceReference", ""), typeof(string));
            localElementDictionary.Add(XName.Get("ReferenceTitle", ""), typeof(ddex_net.xml._20120404.ddexC.ReferenceTitle));
            localElementDictionary.Add(XName.Get("InstrumentationDescription", ""), typeof(ddex_net.xml._20120404.ddexC.Description));
            localElementDictionary.Add(XName.Get("IsMedley", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("IsPotpourri", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("IsInstrumental", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("IsBackground", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("IsHiddenResource", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("IsBonusResource", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("IsComputerGenerated", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("NoSilenceBefore", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("NoSilenceAfter", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("PerformerInformationRequired", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("LanguageOfPerformance", ""), typeof(string));
            localElementDictionary.Add(XName.Get("Duration", ""), typeof(System.TimeSpan));
            localElementDictionary.Add(XName.Get("RightsAgreementId", ""), typeof(ddex_net.xml._20120404.ddexC.RightsAgreementId));
            localElementDictionary.Add(XName.Get("ResourceMusicalWorkReferenceList", ""), typeof(ddex_net.xml._20120404.ddexC.ResourceMusicalWorkReferenceList));
            localElementDictionary.Add(XName.Get("ResourceContainedResourceReferenceList", ""), typeof(ddex_net.xml._20120404.ddexC.ResourceContainedResourceReferenceList));
            localElementDictionary.Add(XName.Get("CreationDate", ""), typeof(ddex_net.xml._20120404.ddexC.EventDate));
            localElementDictionary.Add(XName.Get("MasteredDate", ""), typeof(ddex_net.xml._20120404.ddexC.EventDate));
            localElementDictionary.Add(XName.Get("MidiDetailsByTerritory", ""), typeof(MidiDetailsByTerritory));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class ResourceReferenceLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "A[\\d\\-_a-zA-Z]+"}, 0, XmlSchemaWhiteSpace.Collapse));
            
            private ResourceReferenceLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of ddex:Descriptors and other attributes of a ddex:MIDI which may vary according to ddex:Territory of release.
    /// </para>
    /// <para>
    /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, CLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, FulfillmentDate?, Keywords*, Synopsis?, TechnicalMidiDetails*)
    /// </para>
    /// </summary>
    public partial class MidiDetailsByTerritory : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<object> TerritoryCodeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<object> ExcludedTerritoryCodeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Title> TitleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Artist> DisplayArtistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.ResourceContributor> ResourceContributorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.IndirectResourceContributor> IndirectResourceContributorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.LabelName> LabelNameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.RightsController> RightsControllerField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.CLine> CLineField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.HostSoundCarrier> HostSoundCarrierField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Genre> GenreField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.ParentalWarningType> ParentalWarningTypeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Keywords> KeywordsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TechnicalMidiDetails> TechnicalMidiDetailsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator MidiDetailsByTerritory(XElement xe) { return XTypedServices.ToXTypedElement<MidiDetailsByTerritory>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MidiDetailsByTerritory() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:Descriptors and other attributes of a ddex:MIDI which may vary according to ddex:Territory of release.
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, CLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, FulfillmentDate?, Keywords*, Synopsis?, TechnicalMidiDetails*)
        /// </para>
        /// </summary>
        public MidiDetailsByTerritory() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Territory to which the ddex:MIDI details apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:ExcludedTerritory shall be present, but not both. 
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, CLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, FulfillmentDate?, Keywords*, Synopsis?, TechnicalMidiDetails*)
        /// </para>
        /// </summary>
        public IList<object> TerritoryCode {
            get {
                if ((this.TerritoryCodeField == null)) {
                    this.TerritoryCodeField = new XSimpleList<object>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, XName.Get("TerritoryCode", ""));
                }
                return this.TerritoryCodeField;
            }
            set {
                if ((value == null)) {
                    this.TerritoryCodeField = null;
                }
                else {
                    if ((this.TerritoryCodeField == null)) {
                        this.TerritoryCodeField = XSimpleList<object>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, value, XName.Get("TerritoryCode", ""));
                    }
                    else {
                        XTypedServices.SetList<System.Object>(this.TerritoryCodeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Territory to which the ddex:MIDI details do not apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:Territory shall be present, but not both.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, CLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, FulfillmentDate?, Keywords*, Synopsis?, TechnicalMidiDetails*)
        /// </para>
        /// </summary>
        public IList<object> ExcludedTerritoryCode {
            get {
                if ((this.ExcludedTerritoryCodeField == null)) {
                    this.ExcludedTerritoryCodeField = new XSimpleList<object>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, XName.Get("ExcludedTerritoryCode", ""));
                }
                return this.ExcludedTerritoryCodeField;
            }
            set {
                if ((value == null)) {
                    this.ExcludedTerritoryCodeField = null;
                }
                else {
                    if ((this.ExcludedTerritoryCodeField == null)) {
                        this.ExcludedTerritoryCodeField = XSimpleList<object>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, value, XName.Get("ExcludedTerritoryCode", ""));
                    }
                    else {
                        XTypedServices.SetList<System.Object>(this.ExcludedTerritoryCodeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Title of the ddex:MIDI.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, CLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, FulfillmentDate?, Keywords*, Synopsis?, TechnicalMidiDetails*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Title> Title {
            get {
                if ((this.TitleField == null)) {
                    this.TitleField = new XTypedList<ddex_net.xml._20120404.ddexC.Title>(this, LinqToXsdTypeManager.Instance, XName.Get("Title", ""));
                }
                return this.TitleField;
            }
            set {
                if ((value == null)) {
                    this.TitleField = null;
                }
                else {
                    if ((this.TitleField == null)) {
                        this.TitleField = XTypedList<ddex_net.xml._20120404.ddexC.Title>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Title", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Title>(this.TitleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:DisplayArtist for the ddex:MIDI. The ddex:DisplayArtist may be described through ddex:Name, ddex:Identifier and Roles.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, CLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, FulfillmentDate?, Keywords*, Synopsis?, TechnicalMidiDetails*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Artist> DisplayArtist {
            get {
                if ((this.DisplayArtistField == null)) {
                    this.DisplayArtistField = new XTypedList<ddex_net.xml._20120404.ddexC.Artist>(this, LinqToXsdTypeManager.Instance, XName.Get("DisplayArtist", ""));
                }
                return this.DisplayArtistField;
            }
            set {
                if ((value == null)) {
                    this.DisplayArtistField = null;
                }
                else {
                    if ((this.DisplayArtistField == null)) {
                        this.DisplayArtistField = XTypedList<ddex_net.xml._20120404.ddexC.Artist>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("DisplayArtist", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Artist>(this.DisplayArtistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Contributor to the ddex:MIDI.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, CLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, FulfillmentDate?, Keywords*, Synopsis?, TechnicalMidiDetails*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.ResourceContributor> ResourceContributor {
            get {
                if ((this.ResourceContributorField == null)) {
                    this.ResourceContributorField = new XTypedList<ddex_net.xml._20120404.ddexC.ResourceContributor>(this, LinqToXsdTypeManager.Instance, XName.Get("ResourceContributor", ""));
                }
                return this.ResourceContributorField;
            }
            set {
                if ((value == null)) {
                    this.ResourceContributorField = null;
                }
                else {
                    if ((this.ResourceContributorField == null)) {
                        this.ResourceContributorField = XTypedList<ddex_net.xml._20120404.ddexC.ResourceContributor>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ResourceContributor", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.ResourceContributor>(this.ResourceContributorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of an indirect ddex:Contributor to the ddex:MIDI.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, CLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, FulfillmentDate?, Keywords*, Synopsis?, TechnicalMidiDetails*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.IndirectResourceContributor> IndirectResourceContributor {
            get {
                if ((this.IndirectResourceContributorField == null)) {
                    this.IndirectResourceContributorField = new XTypedList<ddex_net.xml._20120404.ddexC.IndirectResourceContributor>(this, LinqToXsdTypeManager.Instance, XName.Get("IndirectResourceContributor", ""));
                }
                return this.IndirectResourceContributorField;
            }
            set {
                if ((value == null)) {
                    this.IndirectResourceContributorField = null;
                }
                else {
                    if ((this.IndirectResourceContributorField == null)) {
                        this.IndirectResourceContributorField = XTypedList<ddex_net.xml._20120404.ddexC.IndirectResourceContributor>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("IndirectResourceContributor", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.IndirectResourceContributor>(this.IndirectResourceContributorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:Identifiers of a ddex:License, ddex:Claim, ddex:RightShare or contract for the MusicalWork(s) used in the ddex:MIDI.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, CLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, FulfillmentDate?, Keywords*, Synopsis?, TechnicalMidiDetails*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.RightsAgreementId RightsAgreementId {
            get {
                XElement x = this.GetElement(XName.Get("RightsAgreementId", ""));
                return ((ddex_net.xml._20120404.ddexC.RightsAgreementId)(x));
            }
            set {
                this.SetElement(XName.Get("RightsAgreementId", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing the ddex:Name of the ddex:Label under which the ddex:Release is to be marketed.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, CLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, FulfillmentDate?, Keywords*, Synopsis?, TechnicalMidiDetails*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.LabelName> LabelName {
            get {
                if ((this.LabelNameField == null)) {
                    this.LabelNameField = new XTypedList<ddex_net.xml._20120404.ddexC.LabelName>(this, LinqToXsdTypeManager.Instance, XName.Get("LabelName", ""));
                }
                return this.LabelNameField;
            }
            set {
                if ((value == null)) {
                    this.LabelNameField = null;
                }
                else {
                    if ((this.LabelNameField == null)) {
                        this.LabelNameField = XTypedList<ddex_net.xml._20120404.ddexC.LabelName>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("LabelName", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.LabelName>(this.LabelNameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:RightsController of Rights in the ddex:MIDI.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, CLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, FulfillmentDate?, Keywords*, Synopsis?, TechnicalMidiDetails*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.RightsController> RightsController {
            get {
                if ((this.RightsControllerField == null)) {
                    this.RightsControllerField = new XTypedList<ddex_net.xml._20120404.ddexC.RightsController>(this, LinqToXsdTypeManager.Instance, XName.Get("RightsController", ""));
                }
                return this.RightsControllerField;
            }
            set {
                if ((value == null)) {
                    this.RightsControllerField = null;
                }
                else {
                    if ((this.RightsControllerField == null)) {
                        this.RightsControllerField = XTypedList<ddex_net.xml._20120404.ddexC.RightsController>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("RightsController", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.RightsController>(this.RightsControllerField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ddex:MIDI was re-mastered (usually digitally).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, CLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, FulfillmentDate?, Keywords*, Synopsis?, TechnicalMidiDetails*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.EventDate RemasteredDate {
            get {
                XElement x = this.GetElement(XName.Get("RemasteredDate", ""));
                return ((ddex_net.xml._20120404.ddexC.EventDate)(x));
            }
            set {
                this.SetElement(XName.Get("RemasteredDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ddex:MIDI was originally published, whether for physical or electronic/online distribution.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, CLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, FulfillmentDate?, Keywords*, Synopsis?, TechnicalMidiDetails*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.EventDate OriginalResourceReleaseDate {
            get {
                XElement x = this.GetElement(XName.Get("OriginalResourceReleaseDate", ""));
                return ((ddex_net.xml._20120404.ddexC.EventDate)(x));
            }
            set {
                this.SetElement(XName.Get("OriginalResourceReleaseDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:CLine for the ddex:MIDI.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, CLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, FulfillmentDate?, Keywords*, Synopsis?, TechnicalMidiDetails*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.CLine> CLine {
            get {
                if ((this.CLineField == null)) {
                    this.CLineField = new XTypedList<ddex_net.xml._20120404.ddexC.CLine>(this, LinqToXsdTypeManager.Instance, XName.Get("CLine", ""));
                }
                return this.CLineField;
            }
            set {
                if ((value == null)) {
                    this.CLineField = null;
                }
                else {
                    if ((this.CLineField == null)) {
                        this.CLineField = XTypedList<ddex_net.xml._20120404.ddexC.CLine>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CLine", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.CLine>(this.CLineField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing an ddex:Annotation which acknowledges record companies and/or other Parties giving permission for guests ddex:Artists or others featured on the ddex:MIDI.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, CLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, FulfillmentDate?, Keywords*, Synopsis?, TechnicalMidiDetails*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.CourtesyLine CourtesyLine {
            get {
                XElement x = this.GetElement(XName.Get("CourtesyLine", ""));
                return ((ddex_net.xml._20120404.ddexC.CourtesyLine)(x));
            }
            set {
                this.SetElement(XName.Get("CourtesyLine", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The number indicating the order of the ddex:MIDI in a group of ddex:MIDIs in a ddex:Release.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, CLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, FulfillmentDate?, Keywords*, Synopsis?, TechnicalMidiDetails*)
        /// </para>
        /// </summary>
        public string SequenceNumber {
            get {
                XElement x = this.GetElement(XName.Get("SequenceNumber", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("SequenceNumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:HostSoundCarrier on which the ddex:MIDI appears (e.g., the CD on which it was originally released). This ddex:Composite exists in the Release Notification Message Suite Standard, to support the identification and matching of ddex:MIDI information.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, CLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, FulfillmentDate?, Keywords*, Synopsis?, TechnicalMidiDetails*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.HostSoundCarrier> HostSoundCarrier {
            get {
                if ((this.HostSoundCarrierField == null)) {
                    this.HostSoundCarrierField = new XTypedList<ddex_net.xml._20120404.ddexC.HostSoundCarrier>(this, LinqToXsdTypeManager.Instance, XName.Get("HostSoundCarrier", ""));
                }
                return this.HostSoundCarrierField;
            }
            set {
                if ((value == null)) {
                    this.HostSoundCarrierField = null;
                }
                else {
                    if ((this.HostSoundCarrierField == null)) {
                        this.HostSoundCarrierField = XTypedList<ddex_net.xml._20120404.ddexC.HostSoundCarrier>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("HostSoundCarrier", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.HostSoundCarrier>(this.HostSoundCarrierField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a ddex:Comment about the promotion and marketing of the ddex:MIDI.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, CLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, FulfillmentDate?, Keywords*, Synopsis?, TechnicalMidiDetails*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.Comment MarketingComment {
            get {
                XElement x = this.GetElement(XName.Get("MarketingComment", ""));
                return ((ddex_net.xml._20120404.ddexC.Comment)(x));
            }
            set {
                this.SetElement(XName.Get("MarketingComment", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Genre to which the ddex:MIDI belongs.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, CLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, FulfillmentDate?, Keywords*, Synopsis?, TechnicalMidiDetails*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Genre> Genre {
            get {
                if ((this.GenreField == null)) {
                    this.GenreField = new XTypedList<ddex_net.xml._20120404.ddexC.Genre>(this, LinqToXsdTypeManager.Instance, XName.Get("Genre", ""));
                }
                return this.GenreField;
            }
            set {
                if ((value == null)) {
                    this.GenreField = null;
                }
                else {
                    if ((this.GenreField == null)) {
                        this.GenreField = XTypedList<ddex_net.xml._20120404.ddexC.Genre>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Genre", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Genre>(this.GenreField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the classification of the ddex:MIDI according to advice which it carries about the level of explicitness or offensiveness of its content.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, CLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, FulfillmentDate?, Keywords*, Synopsis?, TechnicalMidiDetails*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.ParentalWarningType> ParentalWarningType {
            get {
                if ((this.ParentalWarningTypeField == null)) {
                    this.ParentalWarningTypeField = new XTypedList<ddex_net.xml._20120404.ddexC.ParentalWarningType>(this, LinqToXsdTypeManager.Instance, XName.Get("ParentalWarningType", ""));
                }
                return this.ParentalWarningTypeField;
            }
            set {
                if ((value == null)) {
                    this.ParentalWarningTypeField = null;
                }
                else {
                    if ((this.ParentalWarningTypeField == null)) {
                        this.ParentalWarningTypeField = XTypedList<ddex_net.xml._20120404.ddexC.ParentalWarningType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ParentalWarningType", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.ParentalWarningType>(this.ParentalWarningTypeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:FulfillmentDate.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, CLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, FulfillmentDate?, Keywords*, Synopsis?, TechnicalMidiDetails*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.FulfillmentDate FulfillmentDate {
            get {
                XElement x = this.GetElement(XName.Get("FulfillmentDate", ""));
                return ((ddex_net.xml._20120404.ddexC.FulfillmentDate)(x));
            }
            set {
                this.SetElement(XName.Get("FulfillmentDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Description of the ddex:MIDI containing ddex:Keywords.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, CLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, FulfillmentDate?, Keywords*, Synopsis?, TechnicalMidiDetails*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Keywords> Keywords {
            get {
                if ((this.KeywordsField == null)) {
                    this.KeywordsField = new XTypedList<ddex_net.xml._20120404.ddexC.Keywords>(this, LinqToXsdTypeManager.Instance, XName.Get("Keywords", ""));
                }
                return this.KeywordsField;
            }
            set {
                if ((value == null)) {
                    this.KeywordsField = null;
                }
                else {
                    if ((this.KeywordsField == null)) {
                        this.KeywordsField = XTypedList<ddex_net.xml._20120404.ddexC.Keywords>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Keywords", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Keywords>(this.KeywordsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Synopsis of the ddex:MIDI.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, CLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, FulfillmentDate?, Keywords*, Synopsis?, TechnicalMidiDetails*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.Synopsis Synopsis {
            get {
                XElement x = this.GetElement(XName.Get("Synopsis", ""));
                return ((ddex_net.xml._20120404.ddexC.Synopsis)(x));
            }
            set {
                this.SetElement(XName.Get("Synopsis", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing technical details of the ddex:MIDI.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, CLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, FulfillmentDate?, Keywords*, Synopsis?, TechnicalMidiDetails*)
        /// </para>
        /// </summary>
        public IList<TechnicalMidiDetails> TechnicalMidiDetails {
            get {
                if ((this.TechnicalMidiDetailsField == null)) {
                    this.TechnicalMidiDetailsField = new XTypedList<TechnicalMidiDetails>(this, LinqToXsdTypeManager.Instance, XName.Get("TechnicalMidiDetails", ""));
                }
                return this.TechnicalMidiDetailsField;
            }
            set {
                if ((value == null)) {
                    this.TechnicalMidiDetailsField = null;
                }
                else {
                    if ((this.TechnicalMidiDetailsField == null)) {
                        this.TechnicalMidiDetailsField = XTypedList<TechnicalMidiDetails>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("TechnicalMidiDetails", ""));
                    }
                    else {
                        XTypedServices.SetList<TechnicalMidiDetails>(this.TechnicalMidiDetailsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the ddexC:MidiDetailsByTerritory as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MidiDetailsByTerritory", "http://ddex.net/xml/ern/341");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MidiDetailsByTerritory>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("TerritoryCode", ""), typeof(object));
            localElementDictionary.Add(XName.Get("ExcludedTerritoryCode", ""), typeof(object));
            localElementDictionary.Add(XName.Get("Title", ""), typeof(ddex_net.xml._20120404.ddexC.Title));
            localElementDictionary.Add(XName.Get("DisplayArtist", ""), typeof(ddex_net.xml._20120404.ddexC.Artist));
            localElementDictionary.Add(XName.Get("ResourceContributor", ""), typeof(ddex_net.xml._20120404.ddexC.ResourceContributor));
            localElementDictionary.Add(XName.Get("IndirectResourceContributor", ""), typeof(ddex_net.xml._20120404.ddexC.IndirectResourceContributor));
            localElementDictionary.Add(XName.Get("RightsAgreementId", ""), typeof(ddex_net.xml._20120404.ddexC.RightsAgreementId));
            localElementDictionary.Add(XName.Get("LabelName", ""), typeof(ddex_net.xml._20120404.ddexC.LabelName));
            localElementDictionary.Add(XName.Get("RightsController", ""), typeof(ddex_net.xml._20120404.ddexC.RightsController));
            localElementDictionary.Add(XName.Get("RemasteredDate", ""), typeof(ddex_net.xml._20120404.ddexC.EventDate));
            localElementDictionary.Add(XName.Get("OriginalResourceReleaseDate", ""), typeof(ddex_net.xml._20120404.ddexC.EventDate));
            localElementDictionary.Add(XName.Get("CLine", ""), typeof(ddex_net.xml._20120404.ddexC.CLine));
            localElementDictionary.Add(XName.Get("CourtesyLine", ""), typeof(ddex_net.xml._20120404.ddexC.CourtesyLine));
            localElementDictionary.Add(XName.Get("SequenceNumber", ""), typeof(string));
            localElementDictionary.Add(XName.Get("HostSoundCarrier", ""), typeof(ddex_net.xml._20120404.ddexC.HostSoundCarrier));
            localElementDictionary.Add(XName.Get("MarketingComment", ""), typeof(ddex_net.xml._20120404.ddexC.Comment));
            localElementDictionary.Add(XName.Get("Genre", ""), typeof(ddex_net.xml._20120404.ddexC.Genre));
            localElementDictionary.Add(XName.Get("ParentalWarningType", ""), typeof(ddex_net.xml._20120404.ddexC.ParentalWarningType));
            localElementDictionary.Add(XName.Get("FulfillmentDate", ""), typeof(ddex_net.xml._20120404.ddexC.FulfillmentDate));
            localElementDictionary.Add(XName.Get("Keywords", ""), typeof(ddex_net.xml._20120404.ddexC.Keywords));
            localElementDictionary.Add(XName.Get("Synopsis", ""), typeof(ddex_net.xml._20120404.ddexC.Synopsis));
            localElementDictionary.Add(XName.Get("TechnicalMidiDetails", ""), typeof(TechnicalMidiDetails));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of physical returns.
    /// </para>
    /// <para>
    /// Regular expression: (PhysicalReturnsAllowed, LatestDateForPhysicalReturns?)
    /// </para>
    /// </summary>
    public partial class PhysicalReturns : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator PhysicalReturns(XElement xe) { return XTypedServices.ToXTypedElement<PhysicalReturns>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PhysicalReturns() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("PhysicalReturnsAllowed", "")), new NamedContentModelEntity(XName.Get("LatestDateForPhysicalReturns", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of physical returns.
        /// </para>
        /// <para>
        /// Regular expression: (PhysicalReturnsAllowed, LatestDateForPhysicalReturns?)
        /// </para>
        /// </summary>
        public PhysicalReturns() {
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether physical returns are allowed (=True) or not (=False).
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (PhysicalReturnsAllowed, LatestDateForPhysicalReturns?)
        /// </para>
        /// </summary>
        public bool PhysicalReturnsAllowed {
            get {
                XElement x = this.GetElement(XName.Get("PhysicalReturnsAllowed", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("PhysicalReturnsAllowed", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A Date which is the latest one for physical returns (in ISO 8601:2004 format: YYYY-MM-DD).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PhysicalReturnsAllowed, LatestDateForPhysicalReturns?)
        /// </para>
        /// </summary>
        public System.Nullable<System.DateTime> LatestDateForPhysicalReturns {
            get {
                XElement x = this.GetElement(XName.Get("LatestDateForPhysicalReturns", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElement(XName.Get("LatestDateForPhysicalReturns", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("PhysicalReturns", "http://ddex.net/xml/ern/341");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PhysicalReturns>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("PhysicalReturnsAllowed", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("LatestDateForPhysicalReturns", ""), typeof(System.DateTime));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a preview.
    /// </para>
    /// <para>
    /// Regular expression: (PartType?, TopLeftCorner?, BottomRightCorner?, ExpressionType)
    /// </para>
    /// </summary>
    public partial class PreviewDetails : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator PreviewDetails(XElement xe) { return XTypedServices.ToXTypedElement<PreviewDetails>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PreviewDetails() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("PartType", "")), new NamedContentModelEntity(XName.Get("TopLeftCorner", "")), new NamedContentModelEntity(XName.Get("BottomRightCorner", "")), new NamedContentModelEntity(XName.Get("ExpressionType", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a preview.
        /// </para>
        /// <para>
        /// Regular expression: (PartType?, TopLeftCorner?, BottomRightCorner?, ExpressionType)
        /// </para>
        /// </summary>
        public PreviewDetails() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a ddex:Description of the ddex:Type of ddex:Part that the preview relates to, e.g. chorus or intro.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PartType?, TopLeftCorner?, BottomRightCorner?, ExpressionType)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.Description PartType {
            get {
                XElement x = this.GetElement(XName.Get("PartType", ""));
                return ((ddex_net.xml._20120404.ddexC.Description)(x));
            }
            set {
                this.SetElement(XName.Get("PartType", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The position of the preview measured in ddex:Pixels or millimetres from the top left corner of the ddex:Resource.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PartType?, TopLeftCorner?, BottomRightCorner?, ExpressionType)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> TopLeftCorner {
            get {
                XElement x = this.GetElement(XName.Get("TopLeftCorner", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElement(XName.Get("TopLeftCorner", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The position of the preview measured in ddex:Pixels or millimetres  from the bottom right corner of the ddex:Resource.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PartType?, TopLeftCorner?, BottomRightCorner?, ExpressionType)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> BottomRightCorner {
            get {
                XElement x = this.GetElement(XName.Get("BottomRightCorner", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElement(XName.Get("BottomRightCorner", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Type of expression indicating how this should be perceived, e.g. as instruction (meaning that this has to be done to create the preview) or as information (meaning that this has been done to craete the preview).
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (PartType?, TopLeftCorner?, BottomRightCorner?, ExpressionType)
        /// </para>
        /// </summary>
        public string ExpressionType {
            get {
                XElement x = this.GetElement(XName.Get("ExpressionType", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("ExpressionType", ""), value, "ExpressionType", global::ddex_net.xml._20120404.ddex.ExpressionType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("PreviewDetails", "http://ddex.net/xml/ern/341");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PreviewDetails>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("PartType", ""), typeof(ddex_net.xml._20120404.ddexC.Description));
            localElementDictionary.Add(XName.Get("TopLeftCorner", ""), typeof(decimal));
            localElementDictionary.Add(XName.Get("BottomRightCorner", ""), typeof(decimal));
            localElementDictionary.Add(XName.Get("ExpressionType", ""), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of one or more offers related to one or more ddex:Releases.
    /// </para>
    /// <para>
    /// Regular expression: ((ReleaseId+ | ReleaseDescription), Deal*)
    /// </para>
    /// </summary>
    public partial class RelatedReleaseOfferSet : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.ReleaseId> ReleaseIdField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Deal> DealField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator RelatedReleaseOfferSet(XElement xe) { return XTypedServices.ToXTypedElement<RelatedReleaseOfferSet>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RelatedReleaseOfferSet() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of one or more offers related to one or more ddex:Releases.
        /// </para>
        /// <para>
        /// Regular expression: ((ReleaseId+ | ReleaseDescription), Deal*)
        /// </para>
        /// </summary>
        public RelatedReleaseOfferSet() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:ReleaseIds of the Release(s) for which the offer(s) are available.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ReleaseId+ | ReleaseDescription), Deal*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.ReleaseId> ReleaseId {
            get {
                if ((this.ReleaseIdField == null)) {
                    this.ReleaseIdField = new XTypedList<ddex_net.xml._20120404.ddexC.ReleaseId>(this, LinqToXsdTypeManager.Instance, XName.Get("ReleaseId", ""));
                }
                return this.ReleaseIdField;
            }
            set {
                if ((value == null)) {
                    this.ReleaseIdField = null;
                }
                else {
                    if ((this.ReleaseIdField == null)) {
                        this.ReleaseIdField = XTypedList<ddex_net.xml._20120404.ddexC.ReleaseId>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ReleaseId", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.ReleaseId>(this.ReleaseIdField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a ddex:Description of the Release(s) for which the offer(s) are available.This ddex:Element is designed to be used to describe entire collections or repertoires, and is not to be used to list individual ddex:Releases by xs:ID or ddex:Title.
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ReleaseId+ | ReleaseDescription), Deal*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.Description ReleaseDescription {
            get {
                XElement x = this.GetElement(XName.Get("ReleaseDescription", ""));
                return ((ddex_net.xml._20120404.ddexC.Description)(x));
            }
            set {
                this.SetElement(XName.Get("ReleaseDescription", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Deal that is available as an offer related to the Release(s). If no ddex:Deal is provided, the parent ddex:Release and the ddex:Releases listed in the ern:RelatedReleaseOfferSet are bundled and offered under the ddex:ReleaseOffer associated with the parent ddex:Release.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((ReleaseId+ | ReleaseDescription), Deal*)
        /// </para>
        /// </summary>
        public IList<Deal> Deal {
            get {
                if ((this.DealField == null)) {
                    this.DealField = new XTypedList<Deal>(this, LinqToXsdTypeManager.Instance, XName.Get("Deal", ""));
                }
                return this.DealField;
            }
            set {
                if ((value == null)) {
                    this.DealField = null;
                }
                else {
                    if ((this.DealField == null)) {
                        this.DealField = XTypedList<Deal>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Deal", ""));
                    }
                    else {
                        XTypedServices.SetList<Deal>(this.DealField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the ern:RelatedReleaseOfferSet as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("RelatedReleaseOfferSet", "http://ddex.net/xml/ern/341");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RelatedReleaseOfferSet>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ReleaseId", ""), typeof(ddex_net.xml._20120404.ddexC.ReleaseId));
            localElementDictionary.Add(XName.Get("ReleaseDescription", ""), typeof(ddex_net.xml._20120404.ddexC.Description));
            localElementDictionary.Add(XName.Get("Deal", ""), typeof(Deal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:DDEX ddex:Release.
    /// </para>
    /// <para>
    /// Regular expression: (ReleaseId+, ReleaseReference*, ExternalResourceLink*, SalesReportingProxyReleaseId*, ReferenceTitle, (ReleaseResourceReferenceList | ResourceOmissionReason), ReleaseCollectionReferenceList?, ReleaseType*, ReleaseDetailsByTerritory+, Duration?, RightsAgreementId?, PLine*, CLine*, ArtistProfilePage*)
    /// </para>
    /// </summary>
    public partial class Release : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.ReleaseId> ReleaseIdField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> ReleaseReferenceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.ExternalResourceLink> ExternalResourceLinkField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.SalesReportingProxyReleaseId> SalesReportingProxyReleaseIdField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.ReleaseType> ReleaseTypeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ReleaseDetailsByTerritory> ReleaseDetailsByTerritoryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.PLine> PLineField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.CLine> CLineField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.WebPage> ArtistProfilePageField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator Release(XElement xe) { return XTypedServices.ToXTypedElement<Release>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Release() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:DDEX ddex:Release.
        /// </para>
        /// <para>
        /// Regular expression: (ReleaseId+, ReleaseReference*, ExternalResourceLink*, SalesReportingProxyReleaseId*, ReferenceTitle, (ReleaseResourceReferenceList | ResourceOmissionReason), ReleaseCollectionReferenceList?, ReleaseType*, ReleaseDetailsByTerritory+, Duration?, RightsAgreementId?, PLine*, CLine*, ArtistProfilePage*)
        /// </para>
        /// </summary>
        public Release() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:ReleaseIds. If available, a ddex:GRid has to be used. If the ern:Release contains only one ddex:SoundRecording, the ddex:ISRC of the ddex:SoundRecording may be used instead. If the ern:Release is an abstraction of a complete ddex:PhysicalProduct (such as a CD ddex:Album), the ddex:ICPN of the ddex:PhysicalProduct may be used instead.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ReleaseId+, ReleaseReference*, ExternalResourceLink*, SalesReportingProxyReleaseId*, ReferenceTitle, (ReleaseResourceReferenceList | ResourceOmissionReason), ReleaseCollectionReferenceList?, ReleaseType*, ReleaseDetailsByTerritory+, Duration?, RightsAgreementId?, PLine*, CLine*, ArtistProfilePage*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.ReleaseId> ReleaseId {
            get {
                if ((this.ReleaseIdField == null)) {
                    this.ReleaseIdField = new XTypedList<ddex_net.xml._20120404.ddexC.ReleaseId>(this, LinqToXsdTypeManager.Instance, XName.Get("ReleaseId", ""));
                }
                return this.ReleaseIdField;
            }
            set {
                if ((value == null)) {
                    this.ReleaseIdField = null;
                }
                else {
                    if ((this.ReleaseIdField == null)) {
                        this.ReleaseIdField = XTypedList<ddex_net.xml._20120404.ddexC.ReleaseId>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ReleaseId", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.ReleaseId>(this.ReleaseIdField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Identifier (specific to the ddex:Message) of the ern:Release. Used to link the ern:Release to one or more Deal(s). This is a ddex:LocalReleaseAnchor starting with the letter R.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ReleaseId+, ReleaseReference*, ExternalResourceLink*, SalesReportingProxyReleaseId*, ReferenceTitle, (ReleaseResourceReferenceList | ResourceOmissionReason), ReleaseCollectionReferenceList?, ReleaseType*, ReleaseDetailsByTerritory+, Duration?, RightsAgreementId?, PLine*, CLine*, ArtistProfilePage*)
        /// </para>
        /// </summary>
        public IList<string> ReleaseReference {
            get {
                if ((this.ReleaseReferenceField == null)) {
                    this.ReleaseReferenceField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype, XName.Get("ReleaseReference", ""));
                }
                return this.ReleaseReferenceField;
            }
            set {
                if ((value == null)) {
                    this.ReleaseReferenceField = null;
                }
                else {
                    if ((this.ReleaseReferenceField == null)) {
                        this.ReleaseReferenceField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype, value, XName.Get("ReleaseReference", ""));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.ReleaseReferenceField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of promotional or other material related to the ern:Release.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ReleaseId+, ReleaseReference*, ExternalResourceLink*, SalesReportingProxyReleaseId*, ReferenceTitle, (ReleaseResourceReferenceList | ResourceOmissionReason), ReleaseCollectionReferenceList?, ReleaseType*, ReleaseDetailsByTerritory+, Duration?, RightsAgreementId?, PLine*, CLine*, ArtistProfilePage*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.ExternalResourceLink> ExternalResourceLink {
            get {
                if ((this.ExternalResourceLinkField == null)) {
                    this.ExternalResourceLinkField = new XTypedList<ddex_net.xml._20120404.ddexC.ExternalResourceLink>(this, LinqToXsdTypeManager.Instance, XName.Get("ExternalResourceLink", ""));
                }
                return this.ExternalResourceLinkField;
            }
            set {
                if ((value == null)) {
                    this.ExternalResourceLinkField = null;
                }
                else {
                    if ((this.ExternalResourceLinkField == null)) {
                        this.ExternalResourceLinkField = XTypedList<ddex_net.xml._20120404.ddexC.ExternalResourceLink>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ExternalResourceLink", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.ExternalResourceLink>(this.ExternalResourceLinkField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the A ddex:Composite containing details of the ddex:SalesReportingProxyReleaseId.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ReleaseId+, ReleaseReference*, ExternalResourceLink*, SalesReportingProxyReleaseId*, ReferenceTitle, (ReleaseResourceReferenceList | ResourceOmissionReason), ReleaseCollectionReferenceList?, ReleaseType*, ReleaseDetailsByTerritory+, Duration?, RightsAgreementId?, PLine*, CLine*, ArtistProfilePage*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.SalesReportingProxyReleaseId> SalesReportingProxyReleaseId {
            get {
                if ((this.SalesReportingProxyReleaseIdField == null)) {
                    this.SalesReportingProxyReleaseIdField = new XTypedList<ddex_net.xml._20120404.ddexC.SalesReportingProxyReleaseId>(this, LinqToXsdTypeManager.Instance, XName.Get("SalesReportingProxyReleaseId", ""));
                }
                return this.SalesReportingProxyReleaseIdField;
            }
            set {
                if ((value == null)) {
                    this.SalesReportingProxyReleaseIdField = null;
                }
                else {
                    if ((this.SalesReportingProxyReleaseIdField == null)) {
                        this.SalesReportingProxyReleaseIdField = XTypedList<ddex_net.xml._20120404.ddexC.SalesReportingProxyReleaseId>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("SalesReportingProxyReleaseId", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.SalesReportingProxyReleaseId>(this.SalesReportingProxyReleaseIdField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:ReferenceTitle of the ern:Release.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ReleaseId+, ReleaseReference*, ExternalResourceLink*, SalesReportingProxyReleaseId*, ReferenceTitle, (ReleaseResourceReferenceList | ResourceOmissionReason), ReleaseCollectionReferenceList?, ReleaseType*, ReleaseDetailsByTerritory+, Duration?, RightsAgreementId?, PLine*, CLine*, ArtistProfilePage*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.ReferenceTitle ReferenceTitle {
            get {
                XElement x = this.GetElement(XName.Get("ReferenceTitle", ""));
                return ((ddex_net.xml._20120404.ddexC.ReferenceTitle)(x));
            }
            set {
                this.SetElement(XName.Get("ReferenceTitle", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of one or more ddex:Resources contained in the ern:Release.
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (ReleaseId+, ReleaseReference*, ExternalResourceLink*, SalesReportingProxyReleaseId*, ReferenceTitle, (ReleaseResourceReferenceList | ResourceOmissionReason), ReleaseCollectionReferenceList?, ReleaseType*, ReleaseDetailsByTerritory+, Duration?, RightsAgreementId?, PLine*, CLine*, ArtistProfilePage*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.ReleaseResourceReferenceList ReleaseResourceReferenceList {
            get {
                XElement x = this.GetElement(XName.Get("ReleaseResourceReferenceList", ""));
                return ((ddex_net.xml._20120404.ddexC.ReleaseResourceReferenceList)(x));
            }
            set {
                this.SetElement(XName.Get("ReleaseResourceReferenceList", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:ResourceOmissionReason.
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (ReleaseId+, ReleaseReference*, ExternalResourceLink*, SalesReportingProxyReleaseId*, ReferenceTitle, (ReleaseResourceReferenceList | ResourceOmissionReason), ReleaseCollectionReferenceList?, ReleaseType*, ReleaseDetailsByTerritory+, Duration?, RightsAgreementId?, PLine*, CLine*, ArtistProfilePage*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.ResourceOmissionReason ResourceOmissionReason {
            get {
                XElement x = this.GetElement(XName.Get("ResourceOmissionReason", ""));
                return ((ddex_net.xml._20120404.ddexC.ResourceOmissionReason)(x));
            }
            set {
                this.SetElement(XName.Get("ResourceOmissionReason", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of one or more ddex:Collections contained in the ern:Release.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ReleaseId+, ReleaseReference*, ExternalResourceLink*, SalesReportingProxyReleaseId*, ReferenceTitle, (ReleaseResourceReferenceList | ResourceOmissionReason), ReleaseCollectionReferenceList?, ReleaseType*, ReleaseDetailsByTerritory+, Duration?, RightsAgreementId?, PLine*, CLine*, ArtistProfilePage*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.ReleaseCollectionReferenceList ReleaseCollectionReferenceList {
            get {
                XElement x = this.GetElement(XName.Get("ReleaseCollectionReferenceList", ""));
                return ((ddex_net.xml._20120404.ddexC.ReleaseCollectionReferenceList)(x));
            }
            set {
                this.SetElement(XName.Get("ReleaseCollectionReferenceList", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the form in which a ddex:ReleaseCreator anticipates offering the ern:Release to ddex:Consumers. This may be overridden by the ddex:ReleaseType for specific Territories as specified in the ReleaseDetailsByTerritory ddex:Composite.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ReleaseId+, ReleaseReference*, ExternalResourceLink*, SalesReportingProxyReleaseId*, ReferenceTitle, (ReleaseResourceReferenceList | ResourceOmissionReason), ReleaseCollectionReferenceList?, ReleaseType*, ReleaseDetailsByTerritory+, Duration?, RightsAgreementId?, PLine*, CLine*, ArtistProfilePage*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.ReleaseType> ReleaseType {
            get {
                if ((this.ReleaseTypeField == null)) {
                    this.ReleaseTypeField = new XTypedList<ddex_net.xml._20120404.ddexC.ReleaseType>(this, LinqToXsdTypeManager.Instance, XName.Get("ReleaseType", ""));
                }
                return this.ReleaseTypeField;
            }
            set {
                if ((value == null)) {
                    this.ReleaseTypeField = null;
                }
                else {
                    if ((this.ReleaseTypeField == null)) {
                        this.ReleaseTypeField = XTypedList<ddex_net.xml._20120404.ddexC.ReleaseType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ReleaseType", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.ReleaseType>(this.ReleaseTypeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:Descriptors and other attributes of the ern:Release which may vary according to ddex:Territory of release.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ReleaseId+, ReleaseReference*, ExternalResourceLink*, SalesReportingProxyReleaseId*, ReferenceTitle, (ReleaseResourceReferenceList | ResourceOmissionReason), ReleaseCollectionReferenceList?, ReleaseType*, ReleaseDetailsByTerritory+, Duration?, RightsAgreementId?, PLine*, CLine*, ArtistProfilePage*)
        /// </para>
        /// </summary>
        public IList<ReleaseDetailsByTerritory> ReleaseDetailsByTerritory {
            get {
                if ((this.ReleaseDetailsByTerritoryField == null)) {
                    this.ReleaseDetailsByTerritoryField = new XTypedList<ReleaseDetailsByTerritory>(this, LinqToXsdTypeManager.Instance, XName.Get("ReleaseDetailsByTerritory", ""));
                }
                return this.ReleaseDetailsByTerritoryField;
            }
            set {
                if ((value == null)) {
                    this.ReleaseDetailsByTerritoryField = null;
                }
                else {
                    if ((this.ReleaseDetailsByTerritoryField == null)) {
                        this.ReleaseDetailsByTerritoryField = XTypedList<ReleaseDetailsByTerritory>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ReleaseDetailsByTerritory", ""));
                    }
                    else {
                        XTypedServices.SetList<ReleaseDetailsByTerritory>(this.ReleaseDetailsByTerritoryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The sum of the ddex:Durations of all ddex:Resources contained in the ern:Release (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ReleaseId+, ReleaseReference*, ExternalResourceLink*, SalesReportingProxyReleaseId*, ReferenceTitle, (ReleaseResourceReferenceList | ResourceOmissionReason), ReleaseCollectionReferenceList?, ReleaseType*, ReleaseDetailsByTerritory+, Duration?, RightsAgreementId?, PLine*, CLine*, ArtistProfilePage*)
        /// </para>
        /// </summary>
        public System.Nullable<System.TimeSpan> Duration {
            get {
                XElement x = this.GetElement(XName.Get("Duration", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
            set {
                this.SetElement(XName.Get("Duration", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:Identifiers of a ddex:License, ddex:Claim, ddex:RightShare or contract for the MusicalWork(s) used in the ern:Release.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ReleaseId+, ReleaseReference*, ExternalResourceLink*, SalesReportingProxyReleaseId*, ReferenceTitle, (ReleaseResourceReferenceList | ResourceOmissionReason), ReleaseCollectionReferenceList?, ReleaseType*, ReleaseDetailsByTerritory+, Duration?, RightsAgreementId?, PLine*, CLine*, ArtistProfilePage*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.RightsAgreementId RightsAgreementId {
            get {
                XElement x = this.GetElement(XName.Get("RightsAgreementId", ""));
                return ((ddex_net.xml._20120404.ddexC.RightsAgreementId)(x));
            }
            set {
                this.SetElement(XName.Get("RightsAgreementId", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:PLine for the ern:Release.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ReleaseId+, ReleaseReference*, ExternalResourceLink*, SalesReportingProxyReleaseId*, ReferenceTitle, (ReleaseResourceReferenceList | ResourceOmissionReason), ReleaseCollectionReferenceList?, ReleaseType*, ReleaseDetailsByTerritory+, Duration?, RightsAgreementId?, PLine*, CLine*, ArtistProfilePage*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.PLine> PLine {
            get {
                if ((this.PLineField == null)) {
                    this.PLineField = new XTypedList<ddex_net.xml._20120404.ddexC.PLine>(this, LinqToXsdTypeManager.Instance, XName.Get("PLine", ""));
                }
                return this.PLineField;
            }
            set {
                if ((value == null)) {
                    this.PLineField = null;
                }
                else {
                    if ((this.PLineField == null)) {
                        this.PLineField = XTypedList<ddex_net.xml._20120404.ddexC.PLine>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("PLine", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.PLine>(this.PLineField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:CLine for the ern:Release.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ReleaseId+, ReleaseReference*, ExternalResourceLink*, SalesReportingProxyReleaseId*, ReferenceTitle, (ReleaseResourceReferenceList | ResourceOmissionReason), ReleaseCollectionReferenceList?, ReleaseType*, ReleaseDetailsByTerritory+, Duration?, RightsAgreementId?, PLine*, CLine*, ArtistProfilePage*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.CLine> CLine {
            get {
                if ((this.CLineField == null)) {
                    this.CLineField = new XTypedList<ddex_net.xml._20120404.ddexC.CLine>(this, LinqToXsdTypeManager.Instance, XName.Get("CLine", ""));
                }
                return this.CLineField;
            }
            set {
                if ((value == null)) {
                    this.CLineField = null;
                }
                else {
                    if ((this.CLineField == null)) {
                        this.CLineField = XTypedList<ddex_net.xml._20120404.ddexC.CLine>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CLine", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.CLine>(this.CLineField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:WebPage for the ddex:Artist.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ReleaseId+, ReleaseReference*, ExternalResourceLink*, SalesReportingProxyReleaseId*, ReferenceTitle, (ReleaseResourceReferenceList | ResourceOmissionReason), ReleaseCollectionReferenceList?, ReleaseType*, ReleaseDetailsByTerritory+, Duration?, RightsAgreementId?, PLine*, CLine*, ArtistProfilePage*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.WebPage> ArtistProfilePage {
            get {
                if ((this.ArtistProfilePageField == null)) {
                    this.ArtistProfilePageField = new XTypedList<ddex_net.xml._20120404.ddexC.WebPage>(this, LinqToXsdTypeManager.Instance, XName.Get("ArtistProfilePage", ""));
                }
                return this.ArtistProfilePageField;
            }
            set {
                if ((value == null)) {
                    this.ArtistProfilePageField = null;
                }
                else {
                    if ((this.ArtistProfilePageField == null)) {
                        this.ArtistProfilePageField = XTypedList<ddex_net.xml._20120404.ddexC.WebPage>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ArtistProfilePage", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.WebPage>(this.ArtistProfilePageField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the ern:Release as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Release", "http://ddex.net/xml/ern/341");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Release>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ReleaseId", ""), typeof(ddex_net.xml._20120404.ddexC.ReleaseId));
            localElementDictionary.Add(XName.Get("ReleaseReference", ""), typeof(string));
            localElementDictionary.Add(XName.Get("ExternalResourceLink", ""), typeof(ddex_net.xml._20120404.ddexC.ExternalResourceLink));
            localElementDictionary.Add(XName.Get("SalesReportingProxyReleaseId", ""), typeof(ddex_net.xml._20120404.ddexC.SalesReportingProxyReleaseId));
            localElementDictionary.Add(XName.Get("ReferenceTitle", ""), typeof(ddex_net.xml._20120404.ddexC.ReferenceTitle));
            localElementDictionary.Add(XName.Get("ReleaseResourceReferenceList", ""), typeof(ddex_net.xml._20120404.ddexC.ReleaseResourceReferenceList));
            localElementDictionary.Add(XName.Get("ResourceOmissionReason", ""), typeof(ddex_net.xml._20120404.ddexC.ResourceOmissionReason));
            localElementDictionary.Add(XName.Get("ReleaseCollectionReferenceList", ""), typeof(ddex_net.xml._20120404.ddexC.ReleaseCollectionReferenceList));
            localElementDictionary.Add(XName.Get("ReleaseType", ""), typeof(ddex_net.xml._20120404.ddexC.ReleaseType));
            localElementDictionary.Add(XName.Get("ReleaseDetailsByTerritory", ""), typeof(ReleaseDetailsByTerritory));
            localElementDictionary.Add(XName.Get("Duration", ""), typeof(System.TimeSpan));
            localElementDictionary.Add(XName.Get("RightsAgreementId", ""), typeof(ddex_net.xml._20120404.ddexC.RightsAgreementId));
            localElementDictionary.Add(XName.Get("PLine", ""), typeof(ddex_net.xml._20120404.ddexC.PLine));
            localElementDictionary.Add(XName.Get("CLine", ""), typeof(ddex_net.xml._20120404.ddexC.CLine));
            localElementDictionary.Add(XName.Get("ArtistProfilePage", ""), typeof(ddex_net.xml._20120404.ddexC.WebPage));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        private class ReleaseReferenceLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "R[\\d\\-_a-zA-Z]+"}, 0, XmlSchemaWhiteSpace.Collapse));
            
            private ReleaseReferenceLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of one or more ddex:Deals pertaining to one or more ddex:Releases.
    /// </para>
    /// <para>
    /// Regular expression: (DealReleaseReference+, Deal+, EffectiveDate?)
    /// </para>
    /// </summary>
    public partial class ReleaseDeal : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> DealReleaseReferenceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Deal> DealField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ReleaseDeal(XElement xe) { return XTypedServices.ToXTypedElement<ReleaseDeal>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ReleaseDeal() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("DealReleaseReference", "")), new NamedContentModelEntity(XName.Get("Deal", "")), new NamedContentModelEntity(XName.Get("EffectiveDate", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of one or more ddex:Deals pertaining to one or more ddex:Releases.
        /// </para>
        /// <para>
        /// Regular expression: (DealReleaseReference+, Deal+, EffectiveDate?)
        /// </para>
        /// </summary>
        public ReleaseDeal() {
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Identifier (specific to the ddex:Message) of a ddex:Release in the ddex:Deal. This is a ddex:LocalReleaseAnchorReference starting with the letter R.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DealReleaseReference+, Deal+, EffectiveDate?)
        /// </para>
        /// </summary>
        public IList<string> DealReleaseReference {
            get {
                if ((this.DealReleaseReferenceField == null)) {
                    this.DealReleaseReferenceField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype, XName.Get("DealReleaseReference", ""));
                }
                return this.DealReleaseReferenceField;
            }
            set {
                if ((value == null)) {
                    this.DealReleaseReferenceField = null;
                }
                else {
                    if ((this.DealReleaseReferenceField == null)) {
                        this.DealReleaseReferenceField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype, value, XName.Get("DealReleaseReference", ""));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.DealReleaseReferenceField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Deal governing the Usage of all ddex:Releases identified in the ern:ReleaseDeal ddex:Composite.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DealReleaseReference+, Deal+, EffectiveDate?)
        /// </para>
        /// </summary>
        public IList<Deal> Deal {
            get {
                if ((this.DealField == null)) {
                    this.DealField = new XTypedList<Deal>(this, LinqToXsdTypeManager.Instance, XName.Get("Deal", ""));
                }
                return this.DealField;
            }
            set {
                if ((value == null)) {
                    this.DealField = null;
                }
                else {
                    if ((this.DealField == null)) {
                        this.DealField = XTypedList<Deal>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Deal", ""));
                    }
                    else {
                        XTypedServices.SetList<Deal>(this.DealField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The Date at which the ddex:MessageRecipient is expected to cancel all ddex:Deals for the ddex:Release and replace them with the ddex:Deals provided within the current ddex:Message. The EffectiveDate is typically the date on which the ern:NewReleaseMessage is being sent.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DealReleaseReference+, Deal+, EffectiveDate?)
        /// </para>
        /// </summary>
        public System.Nullable<System.DateTime> EffectiveDate {
            get {
                XElement x = this.GetElement(XName.Get("EffectiveDate", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElement(XName.Get("EffectiveDate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the ern:ReleaseDeal as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ReleaseDeal", "http://ddex.net/xml/ern/341");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ReleaseDeal>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("DealReleaseReference", ""), typeof(string));
            localElementDictionary.Add(XName.Get("Deal", ""), typeof(Deal));
            localElementDictionary.Add(XName.Get("EffectiveDate", ""), typeof(System.DateTime));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class DealReleaseReferenceLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "R[\\d\\-_a-zA-Z]+"}, 0, XmlSchemaWhiteSpace.Collapse));
            
            private DealReleaseReferenceLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of ddex:Descriptors and other attributes of a ddex:Release which may vary according to ddex:Territory of release.
    /// </para>
    /// <para>
    /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), DisplayArtistName*, LabelName*, RightsAgreementId?, Title*, DisplayArtist+, IsMultiArtistCompilation?, AdministratingRecordCompany*, ReleaseType*, RelatedRelease*, ParentalWarningType*, AvRating*, MarketingComment?, ResourceGroup*, Genre*, OriginalReleaseDate?, OriginalDigitalReleaseDate?, (FileAvailabilityDescription+ | File+)?, Keywords*, Synopsis?, Character*, NumberOfUnitsPerPhysicalRelease?)
    /// </para>
    /// </summary>
    public partial class ReleaseDetailsByTerritory : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<object> TerritoryCodeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<object> ExcludedTerritoryCodeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Name> DisplayArtistNameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.LabelName> LabelNameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Title> TitleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Artist> DisplayArtistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.AdministratingRecordCompany> AdministratingRecordCompanyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.ReleaseType> ReleaseTypeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.RelatedRelease> RelatedReleaseField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.ParentalWarningType> ParentalWarningTypeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.AvRating> AvRatingField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ResourceGroup> ResourceGroupField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Genre> GenreField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Description> FileAvailabilityDescriptionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.File> FileField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Keywords> KeywordsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Character> CharacterField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator ReleaseDetailsByTerritory(XElement xe) { return XTypedServices.ToXTypedElement<ReleaseDetailsByTerritory>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ReleaseDetailsByTerritory() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:Descriptors and other attributes of a ddex:Release which may vary according to ddex:Territory of release.
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), DisplayArtistName*, LabelName*, RightsAgreementId?, Title*, DisplayArtist+, IsMultiArtistCompilation?, AdministratingRecordCompany*, ReleaseType*, RelatedRelease*, ParentalWarningType*, AvRating*, MarketingComment?, ResourceGroup*, Genre*, OriginalReleaseDate?, OriginalDigitalReleaseDate?, (FileAvailabilityDescription+ | File+)?, Keywords*, Synopsis?, Character*, NumberOfUnitsPerPhysicalRelease?)
        /// </para>
        /// </summary>
        public ReleaseDetailsByTerritory() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Territory to which the ddexC:ReleaseSummaryDetailsByTerritory apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:ExcludedTerritory shall be present, but not both.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), DisplayArtistName*, LabelName*, RightsAgreementId?, Title*, DisplayArtist+, IsMultiArtistCompilation?, AdministratingRecordCompany*, ReleaseType*, RelatedRelease*, ParentalWarningType*, AvRating*, MarketingComment?, ResourceGroup*, Genre*, OriginalReleaseDate?, OriginalDigitalReleaseDate?, (FileAvailabilityDescription+ | File+)?, Keywords*, Synopsis?, Character*, NumberOfUnitsPerPhysicalRelease?)
        /// </para>
        /// </summary>
        public IList<object> TerritoryCode {
            get {
                if ((this.TerritoryCodeField == null)) {
                    this.TerritoryCodeField = new XSimpleList<object>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, XName.Get("TerritoryCode", ""));
                }
                return this.TerritoryCodeField;
            }
            set {
                if ((value == null)) {
                    this.TerritoryCodeField = null;
                }
                else {
                    if ((this.TerritoryCodeField == null)) {
                        this.TerritoryCodeField = XSimpleList<object>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, value, XName.Get("TerritoryCode", ""));
                    }
                    else {
                        XTypedServices.SetList<System.Object>(this.TerritoryCodeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Territory to which the ddexC:ReleaseSummaryDetailsByTerritory do not apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:Territory shall be present, but not both.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), DisplayArtistName*, LabelName*, RightsAgreementId?, Title*, DisplayArtist+, IsMultiArtistCompilation?, AdministratingRecordCompany*, ReleaseType*, RelatedRelease*, ParentalWarningType*, AvRating*, MarketingComment?, ResourceGroup*, Genre*, OriginalReleaseDate?, OriginalDigitalReleaseDate?, (FileAvailabilityDescription+ | File+)?, Keywords*, Synopsis?, Character*, NumberOfUnitsPerPhysicalRelease?)
        /// </para>
        /// </summary>
        public IList<object> ExcludedTerritoryCode {
            get {
                if ((this.ExcludedTerritoryCodeField == null)) {
                    this.ExcludedTerritoryCodeField = new XSimpleList<object>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, XName.Get("ExcludedTerritoryCode", ""));
                }
                return this.ExcludedTerritoryCodeField;
            }
            set {
                if ((value == null)) {
                    this.ExcludedTerritoryCodeField = null;
                }
                else {
                    if ((this.ExcludedTerritoryCodeField == null)) {
                        this.ExcludedTerritoryCodeField = XSimpleList<object>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, value, XName.Get("ExcludedTerritoryCode", ""));
                    }
                    else {
                        XTypedServices.SetList<System.Object>(this.ExcludedTerritoryCodeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing the ddex:Name to be used by a ddex:DSP when presenting ddex:Artist details of the ddex:Release to a ddex:Consumer.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), DisplayArtistName*, LabelName*, RightsAgreementId?, Title*, DisplayArtist+, IsMultiArtistCompilation?, AdministratingRecordCompany*, ReleaseType*, RelatedRelease*, ParentalWarningType*, AvRating*, MarketingComment?, ResourceGroup*, Genre*, OriginalReleaseDate?, OriginalDigitalReleaseDate?, (FileAvailabilityDescription+ | File+)?, Keywords*, Synopsis?, Character*, NumberOfUnitsPerPhysicalRelease?)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Name> DisplayArtistName {
            get {
                if ((this.DisplayArtistNameField == null)) {
                    this.DisplayArtistNameField = new XTypedList<ddex_net.xml._20120404.ddexC.Name>(this, LinqToXsdTypeManager.Instance, XName.Get("DisplayArtistName", ""));
                }
                return this.DisplayArtistNameField;
            }
            set {
                if ((value == null)) {
                    this.DisplayArtistNameField = null;
                }
                else {
                    if ((this.DisplayArtistNameField == null)) {
                        this.DisplayArtistNameField = XTypedList<ddex_net.xml._20120404.ddexC.Name>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("DisplayArtistName", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Name>(this.DisplayArtistNameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing the ddex:Name of the ddex:Label for the ddex:Release.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), DisplayArtistName*, LabelName*, RightsAgreementId?, Title*, DisplayArtist+, IsMultiArtistCompilation?, AdministratingRecordCompany*, ReleaseType*, RelatedRelease*, ParentalWarningType*, AvRating*, MarketingComment?, ResourceGroup*, Genre*, OriginalReleaseDate?, OriginalDigitalReleaseDate?, (FileAvailabilityDescription+ | File+)?, Keywords*, Synopsis?, Character*, NumberOfUnitsPerPhysicalRelease?)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.LabelName> LabelName {
            get {
                if ((this.LabelNameField == null)) {
                    this.LabelNameField = new XTypedList<ddex_net.xml._20120404.ddexC.LabelName>(this, LinqToXsdTypeManager.Instance, XName.Get("LabelName", ""));
                }
                return this.LabelNameField;
            }
            set {
                if ((value == null)) {
                    this.LabelNameField = null;
                }
                else {
                    if ((this.LabelNameField == null)) {
                        this.LabelNameField = XTypedList<ddex_net.xml._20120404.ddexC.LabelName>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("LabelName", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.LabelName>(this.LabelNameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:Identifiers of a ddex:License, ddex:Claim, ddex:RightShare or contract for the MusicalWork(s) used in the ddex:Release.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), DisplayArtistName*, LabelName*, RightsAgreementId?, Title*, DisplayArtist+, IsMultiArtistCompilation?, AdministratingRecordCompany*, ReleaseType*, RelatedRelease*, ParentalWarningType*, AvRating*, MarketingComment?, ResourceGroup*, Genre*, OriginalReleaseDate?, OriginalDigitalReleaseDate?, (FileAvailabilityDescription+ | File+)?, Keywords*, Synopsis?, Character*, NumberOfUnitsPerPhysicalRelease?)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.RightsAgreementId RightsAgreementId {
            get {
                XElement x = this.GetElement(XName.Get("RightsAgreementId", ""));
                return ((ddex_net.xml._20120404.ddexC.RightsAgreementId)(x));
            }
            set {
                this.SetElement(XName.Get("RightsAgreementId", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Title of the ddex:Release.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), DisplayArtistName*, LabelName*, RightsAgreementId?, Title*, DisplayArtist+, IsMultiArtistCompilation?, AdministratingRecordCompany*, ReleaseType*, RelatedRelease*, ParentalWarningType*, AvRating*, MarketingComment?, ResourceGroup*, Genre*, OriginalReleaseDate?, OriginalDigitalReleaseDate?, (FileAvailabilityDescription+ | File+)?, Keywords*, Synopsis?, Character*, NumberOfUnitsPerPhysicalRelease?)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Title> Title {
            get {
                if ((this.TitleField == null)) {
                    this.TitleField = new XTypedList<ddex_net.xml._20120404.ddexC.Title>(this, LinqToXsdTypeManager.Instance, XName.Get("Title", ""));
                }
                return this.TitleField;
            }
            set {
                if ((value == null)) {
                    this.TitleField = null;
                }
                else {
                    if ((this.TitleField == null)) {
                        this.TitleField = XTypedList<ddex_net.xml._20120404.ddexC.Title>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Title", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Title>(this.TitleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:DisplayArtist for the ddex:Release. The ddex:DisplayArtist may be described through ddex:Name, ddex:Identifier and Roles.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), DisplayArtistName*, LabelName*, RightsAgreementId?, Title*, DisplayArtist+, IsMultiArtistCompilation?, AdministratingRecordCompany*, ReleaseType*, RelatedRelease*, ParentalWarningType*, AvRating*, MarketingComment?, ResourceGroup*, Genre*, OriginalReleaseDate?, OriginalDigitalReleaseDate?, (FileAvailabilityDescription+ | File+)?, Keywords*, Synopsis?, Character*, NumberOfUnitsPerPhysicalRelease?)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Artist> DisplayArtist {
            get {
                if ((this.DisplayArtistField == null)) {
                    this.DisplayArtistField = new XTypedList<ddex_net.xml._20120404.ddexC.Artist>(this, LinqToXsdTypeManager.Instance, XName.Get("DisplayArtist", ""));
                }
                return this.DisplayArtistField;
            }
            set {
                if ((value == null)) {
                    this.DisplayArtistField = null;
                }
                else {
                    if ((this.DisplayArtistField == null)) {
                        this.DisplayArtistField = XTypedList<ddex_net.xml._20120404.ddexC.Artist>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("DisplayArtist", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Artist>(this.DisplayArtistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ddex:Release is a multiartist compilation (=True) or not (=False).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), DisplayArtistName*, LabelName*, RightsAgreementId?, Title*, DisplayArtist+, IsMultiArtistCompilation?, AdministratingRecordCompany*, ReleaseType*, RelatedRelease*, ParentalWarningType*, AvRating*, MarketingComment?, ResourceGroup*, Genre*, OriginalReleaseDate?, OriginalDigitalReleaseDate?, (FileAvailabilityDescription+ | File+)?, Keywords*, Synopsis?, Character*, NumberOfUnitsPerPhysicalRelease?)
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsMultiArtistCompilation {
            get {
                XElement x = this.GetElement(XName.Get("IsMultiArtistCompilation", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("IsMultiArtistCompilation", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:AdministratingRecordCompany for the ddex:Release. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), DisplayArtistName*, LabelName*, RightsAgreementId?, Title*, DisplayArtist+, IsMultiArtistCompilation?, AdministratingRecordCompany*, ReleaseType*, RelatedRelease*, ParentalWarningType*, AvRating*, MarketingComment?, ResourceGroup*, Genre*, OriginalReleaseDate?, OriginalDigitalReleaseDate?, (FileAvailabilityDescription+ | File+)?, Keywords*, Synopsis?, Character*, NumberOfUnitsPerPhysicalRelease?)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.AdministratingRecordCompany> AdministratingRecordCompany {
            get {
                if ((this.AdministratingRecordCompanyField == null)) {
                    this.AdministratingRecordCompanyField = new XTypedList<ddex_net.xml._20120404.ddexC.AdministratingRecordCompany>(this, LinqToXsdTypeManager.Instance, XName.Get("AdministratingRecordCompany", ""));
                }
                return this.AdministratingRecordCompanyField;
            }
            set {
                if ((value == null)) {
                    this.AdministratingRecordCompanyField = null;
                }
                else {
                    if ((this.AdministratingRecordCompanyField == null)) {
                        this.AdministratingRecordCompanyField = XTypedList<ddex_net.xml._20120404.ddexC.AdministratingRecordCompany>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("AdministratingRecordCompany", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.AdministratingRecordCompany>(this.AdministratingRecordCompanyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the form in which a ddex:ReleaseCreator anticipates offering the ddex:Release to ddex:Consumers. This overrides the ddex:ReleaseType specified globally for the ddex:Release.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), DisplayArtistName*, LabelName*, RightsAgreementId?, Title*, DisplayArtist+, IsMultiArtistCompilation?, AdministratingRecordCompany*, ReleaseType*, RelatedRelease*, ParentalWarningType*, AvRating*, MarketingComment?, ResourceGroup*, Genre*, OriginalReleaseDate?, OriginalDigitalReleaseDate?, (FileAvailabilityDescription+ | File+)?, Keywords*, Synopsis?, Character*, NumberOfUnitsPerPhysicalRelease?)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.ReleaseType> ReleaseType {
            get {
                if ((this.ReleaseTypeField == null)) {
                    this.ReleaseTypeField = new XTypedList<ddex_net.xml._20120404.ddexC.ReleaseType>(this, LinqToXsdTypeManager.Instance, XName.Get("ReleaseType", ""));
                }
                return this.ReleaseTypeField;
            }
            set {
                if ((value == null)) {
                    this.ReleaseTypeField = null;
                }
                else {
                    if ((this.ReleaseTypeField == null)) {
                        this.ReleaseTypeField = XTypedList<ddex_net.xml._20120404.ddexC.ReleaseType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ReleaseType", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.ReleaseType>(this.ReleaseTypeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Release (or a ddex:PhysicalProduct or a ddex:DigitalProduct derived from such a ddex:Release) which is related to this ddex:Release.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), DisplayArtistName*, LabelName*, RightsAgreementId?, Title*, DisplayArtist+, IsMultiArtistCompilation?, AdministratingRecordCompany*, ReleaseType*, RelatedRelease*, ParentalWarningType*, AvRating*, MarketingComment?, ResourceGroup*, Genre*, OriginalReleaseDate?, OriginalDigitalReleaseDate?, (FileAvailabilityDescription+ | File+)?, Keywords*, Synopsis?, Character*, NumberOfUnitsPerPhysicalRelease?)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.RelatedRelease> RelatedRelease {
            get {
                if ((this.RelatedReleaseField == null)) {
                    this.RelatedReleaseField = new XTypedList<ddex_net.xml._20120404.ddexC.RelatedRelease>(this, LinqToXsdTypeManager.Instance, XName.Get("RelatedRelease", ""));
                }
                return this.RelatedReleaseField;
            }
            set {
                if ((value == null)) {
                    this.RelatedReleaseField = null;
                }
                else {
                    if ((this.RelatedReleaseField == null)) {
                        this.RelatedReleaseField = XTypedList<ddex_net.xml._20120404.ddexC.RelatedRelease>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("RelatedRelease", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.RelatedRelease>(this.RelatedReleaseField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the classification of the ddex:Release according to advice which it carries about the level of explicitness or offensiveness of its content.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), DisplayArtistName*, LabelName*, RightsAgreementId?, Title*, DisplayArtist+, IsMultiArtistCompilation?, AdministratingRecordCompany*, ReleaseType*, RelatedRelease*, ParentalWarningType*, AvRating*, MarketingComment?, ResourceGroup*, Genre*, OriginalReleaseDate?, OriginalDigitalReleaseDate?, (FileAvailabilityDescription+ | File+)?, Keywords*, Synopsis?, Character*, NumberOfUnitsPerPhysicalRelease?)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.ParentalWarningType> ParentalWarningType {
            get {
                if ((this.ParentalWarningTypeField == null)) {
                    this.ParentalWarningTypeField = new XTypedList<ddex_net.xml._20120404.ddexC.ParentalWarningType>(this, LinqToXsdTypeManager.Instance, XName.Get("ParentalWarningType", ""));
                }
                return this.ParentalWarningTypeField;
            }
            set {
                if ((value == null)) {
                    this.ParentalWarningTypeField = null;
                }
                else {
                    if ((this.ParentalWarningTypeField == null)) {
                        this.ParentalWarningTypeField = XTypedList<ddex_net.xml._20120404.ddexC.ParentalWarningType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ParentalWarningType", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.ParentalWarningType>(this.ParentalWarningTypeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a rating for the ddex:Release.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), DisplayArtistName*, LabelName*, RightsAgreementId?, Title*, DisplayArtist+, IsMultiArtistCompilation?, AdministratingRecordCompany*, ReleaseType*, RelatedRelease*, ParentalWarningType*, AvRating*, MarketingComment?, ResourceGroup*, Genre*, OriginalReleaseDate?, OriginalDigitalReleaseDate?, (FileAvailabilityDescription+ | File+)?, Keywords*, Synopsis?, Character*, NumberOfUnitsPerPhysicalRelease?)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.AvRating> AvRating {
            get {
                if ((this.AvRatingField == null)) {
                    this.AvRatingField = new XTypedList<ddex_net.xml._20120404.ddexC.AvRating>(this, LinqToXsdTypeManager.Instance, XName.Get("AvRating", ""));
                }
                return this.AvRatingField;
            }
            set {
                if ((value == null)) {
                    this.AvRatingField = null;
                }
                else {
                    if ((this.AvRatingField == null)) {
                        this.AvRatingField = XTypedList<ddex_net.xml._20120404.ddexC.AvRating>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("AvRating", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.AvRating>(this.AvRatingField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a ddex:Comment about the promotion and marketing of the ddex:Release.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), DisplayArtistName*, LabelName*, RightsAgreementId?, Title*, DisplayArtist+, IsMultiArtistCompilation?, AdministratingRecordCompany*, ReleaseType*, RelatedRelease*, ParentalWarningType*, AvRating*, MarketingComment?, ResourceGroup*, Genre*, OriginalReleaseDate?, OriginalDigitalReleaseDate?, (FileAvailabilityDescription+ | File+)?, Keywords*, Synopsis?, Character*, NumberOfUnitsPerPhysicalRelease?)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.Comment MarketingComment {
            get {
                XElement x = this.GetElement(XName.Get("MarketingComment", ""));
                return ((ddex_net.xml._20120404.ddexC.Comment)(x));
            }
            set {
                this.SetElement(XName.Get("MarketingComment", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a group of some or all of the ddex:Resources in the ddex:Release. ResourceGroups are used to signal groupings or sequences of ddex:Resources within a ddex:Release. Examples include individual carriers in a multi-carrier ddex:Release or classical ddex:Work groupings as well as the default order of ddex:Resources within a ddex:Release.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), DisplayArtistName*, LabelName*, RightsAgreementId?, Title*, DisplayArtist+, IsMultiArtistCompilation?, AdministratingRecordCompany*, ReleaseType*, RelatedRelease*, ParentalWarningType*, AvRating*, MarketingComment?, ResourceGroup*, Genre*, OriginalReleaseDate?, OriginalDigitalReleaseDate?, (FileAvailabilityDescription+ | File+)?, Keywords*, Synopsis?, Character*, NumberOfUnitsPerPhysicalRelease?)
        /// </para>
        /// </summary>
        public IList<ResourceGroup> ResourceGroup {
            get {
                if ((this.ResourceGroupField == null)) {
                    this.ResourceGroupField = new XTypedList<ResourceGroup>(this, LinqToXsdTypeManager.Instance, XName.Get("ResourceGroup", ""));
                }
                return this.ResourceGroupField;
            }
            set {
                if ((value == null)) {
                    this.ResourceGroupField = null;
                }
                else {
                    if ((this.ResourceGroupField == null)) {
                        this.ResourceGroupField = XTypedList<ResourceGroup>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ResourceGroup", ""));
                    }
                    else {
                        XTypedServices.SetList<ResourceGroup>(this.ResourceGroupField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Genre to which the ddex:Release belongs.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), DisplayArtistName*, LabelName*, RightsAgreementId?, Title*, DisplayArtist+, IsMultiArtistCompilation?, AdministratingRecordCompany*, ReleaseType*, RelatedRelease*, ParentalWarningType*, AvRating*, MarketingComment?, ResourceGroup*, Genre*, OriginalReleaseDate?, OriginalDigitalReleaseDate?, (FileAvailabilityDescription+ | File+)?, Keywords*, Synopsis?, Character*, NumberOfUnitsPerPhysicalRelease?)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Genre> Genre {
            get {
                if ((this.GenreField == null)) {
                    this.GenreField = new XTypedList<ddex_net.xml._20120404.ddexC.Genre>(this, LinqToXsdTypeManager.Instance, XName.Get("Genre", ""));
                }
                return this.GenreField;
            }
            set {
                if ((value == null)) {
                    this.GenreField = null;
                }
                else {
                    if ((this.GenreField == null)) {
                        this.GenreField = XTypedList<ddex_net.xml._20120404.ddexC.Genre>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Genre", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Genre>(this.GenreField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ddex:Release was or will be first made available for Usage, whether for physical or electronic/online distribution (in ISO 8601:2004 format: YYYY-MM-DD).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), DisplayArtistName*, LabelName*, RightsAgreementId?, Title*, DisplayArtist+, IsMultiArtistCompilation?, AdministratingRecordCompany*, ReleaseType*, RelatedRelease*, ParentalWarningType*, AvRating*, MarketingComment?, ResourceGroup*, Genre*, OriginalReleaseDate?, OriginalDigitalReleaseDate?, (FileAvailabilityDescription+ | File+)?, Keywords*, Synopsis?, Character*, NumberOfUnitsPerPhysicalRelease?)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.EventDate OriginalReleaseDate {
            get {
                XElement x = this.GetElement(XName.Get("OriginalReleaseDate", ""));
                return ((ddex_net.xml._20120404.ddexC.EventDate)(x));
            }
            set {
                this.SetElement(XName.Get("OriginalReleaseDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ddex:Release was or will be first made available in electronic/online format for Usage (in ISO 8601:2004 format: YYYY-MM-DD).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), DisplayArtistName*, LabelName*, RightsAgreementId?, Title*, DisplayArtist+, IsMultiArtistCompilation?, AdministratingRecordCompany*, ReleaseType*, RelatedRelease*, ParentalWarningType*, AvRating*, MarketingComment?, ResourceGroup*, Genre*, OriginalReleaseDate?, OriginalDigitalReleaseDate?, (FileAvailabilityDescription+ | File+)?, Keywords*, Synopsis?, Character*, NumberOfUnitsPerPhysicalRelease?)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.EventDate OriginalDigitalReleaseDate {
            get {
                XElement x = this.GetElement(XName.Get("OriginalDigitalReleaseDate", ""));
                return ((ddex_net.xml._20120404.ddexC.EventDate)(x));
            }
            set {
                this.SetElement(XName.Get("OriginalDigitalReleaseDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a ddex:Description providing details of how a ddex:DSP can obtain any related ddex:Release ddex:File.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), DisplayArtistName*, LabelName*, RightsAgreementId?, Title*, DisplayArtist+, IsMultiArtistCompilation?, AdministratingRecordCompany*, ReleaseType*, RelatedRelease*, ParentalWarningType*, AvRating*, MarketingComment?, ResourceGroup*, Genre*, OriginalReleaseDate?, OriginalDigitalReleaseDate?, (FileAvailabilityDescription+ | File+)?, Keywords*, Synopsis?, Character*, NumberOfUnitsPerPhysicalRelease?)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Description> FileAvailabilityDescription {
            get {
                if ((this.FileAvailabilityDescriptionField == null)) {
                    this.FileAvailabilityDescriptionField = new XTypedList<ddex_net.xml._20120404.ddexC.Description>(this, LinqToXsdTypeManager.Instance, XName.Get("FileAvailabilityDescription", ""));
                }
                return this.FileAvailabilityDescriptionField;
            }
            set {
                if ((value == null)) {
                    this.FileAvailabilityDescriptionField = null;
                }
                else {
                    if ((this.FileAvailabilityDescriptionField == null)) {
                        this.FileAvailabilityDescriptionField = XTypedList<ddex_net.xml._20120404.ddexC.Description>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("FileAvailabilityDescription", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Description>(this.FileAvailabilityDescriptionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a related ddex:Release ddex:File that a ddex:DSP can obtain.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), DisplayArtistName*, LabelName*, RightsAgreementId?, Title*, DisplayArtist+, IsMultiArtistCompilation?, AdministratingRecordCompany*, ReleaseType*, RelatedRelease*, ParentalWarningType*, AvRating*, MarketingComment?, ResourceGroup*, Genre*, OriginalReleaseDate?, OriginalDigitalReleaseDate?, (FileAvailabilityDescription+ | File+)?, Keywords*, Synopsis?, Character*, NumberOfUnitsPerPhysicalRelease?)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.File> File {
            get {
                if ((this.FileField == null)) {
                    this.FileField = new XTypedList<ddex_net.xml._20120404.ddexC.File>(this, LinqToXsdTypeManager.Instance, XName.Get("File", ""));
                }
                return this.FileField;
            }
            set {
                if ((value == null)) {
                    this.FileField = null;
                }
                else {
                    if ((this.FileField == null)) {
                        this.FileField = XTypedList<ddex_net.xml._20120404.ddexC.File>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("File", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.File>(this.FileField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Description of the ddex:Release containing ddex:Keywords.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), DisplayArtistName*, LabelName*, RightsAgreementId?, Title*, DisplayArtist+, IsMultiArtistCompilation?, AdministratingRecordCompany*, ReleaseType*, RelatedRelease*, ParentalWarningType*, AvRating*, MarketingComment?, ResourceGroup*, Genre*, OriginalReleaseDate?, OriginalDigitalReleaseDate?, (FileAvailabilityDescription+ | File+)?, Keywords*, Synopsis?, Character*, NumberOfUnitsPerPhysicalRelease?)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Keywords> Keywords {
            get {
                if ((this.KeywordsField == null)) {
                    this.KeywordsField = new XTypedList<ddex_net.xml._20120404.ddexC.Keywords>(this, LinqToXsdTypeManager.Instance, XName.Get("Keywords", ""));
                }
                return this.KeywordsField;
            }
            set {
                if ((value == null)) {
                    this.KeywordsField = null;
                }
                else {
                    if ((this.KeywordsField == null)) {
                        this.KeywordsField = XTypedList<ddex_net.xml._20120404.ddexC.Keywords>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Keywords", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Keywords>(this.KeywordsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Synopsis of the ddex:Release.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), DisplayArtistName*, LabelName*, RightsAgreementId?, Title*, DisplayArtist+, IsMultiArtistCompilation?, AdministratingRecordCompany*, ReleaseType*, RelatedRelease*, ParentalWarningType*, AvRating*, MarketingComment?, ResourceGroup*, Genre*, OriginalReleaseDate?, OriginalDigitalReleaseDate?, (FileAvailabilityDescription+ | File+)?, Keywords*, Synopsis?, Character*, NumberOfUnitsPerPhysicalRelease?)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.Synopsis Synopsis {
            get {
                XElement x = this.GetElement(XName.Get("Synopsis", ""));
                return ((ddex_net.xml._20120404.ddexC.Synopsis)(x));
            }
            set {
                this.SetElement(XName.Get("Synopsis", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Character in the ddex:Release. A ddex:Character may be described through ddex:Name, ddex:Identifier and Roles.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), DisplayArtistName*, LabelName*, RightsAgreementId?, Title*, DisplayArtist+, IsMultiArtistCompilation?, AdministratingRecordCompany*, ReleaseType*, RelatedRelease*, ParentalWarningType*, AvRating*, MarketingComment?, ResourceGroup*, Genre*, OriginalReleaseDate?, OriginalDigitalReleaseDate?, (FileAvailabilityDescription+ | File+)?, Keywords*, Synopsis?, Character*, NumberOfUnitsPerPhysicalRelease?)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Character> Character {
            get {
                if ((this.CharacterField == null)) {
                    this.CharacterField = new XTypedList<ddex_net.xml._20120404.ddexC.Character>(this, LinqToXsdTypeManager.Instance, XName.Get("Character", ""));
                }
                return this.CharacterField;
            }
            set {
                if ((value == null)) {
                    this.CharacterField = null;
                }
                else {
                    if ((this.CharacterField == null)) {
                        this.CharacterField = XTypedList<ddex_net.xml._20120404.ddexC.Character>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Character", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Character>(this.CharacterField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A number of units (typically a CD or a DVD) contained in a physical ddex:Release. This Element is for boxed sets.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), DisplayArtistName*, LabelName*, RightsAgreementId?, Title*, DisplayArtist+, IsMultiArtistCompilation?, AdministratingRecordCompany*, ReleaseType*, RelatedRelease*, ParentalWarningType*, AvRating*, MarketingComment?, ResourceGroup*, Genre*, OriginalReleaseDate?, OriginalDigitalReleaseDate?, (FileAvailabilityDescription+ | File+)?, Keywords*, Synopsis?, Character*, NumberOfUnitsPerPhysicalRelease?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> NumberOfUnitsPerPhysicalRelease {
            get {
                XElement x = this.GetElement(XName.Get("NumberOfUnitsPerPhysicalRelease", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElement(XName.Get("NumberOfUnitsPerPhysicalRelease", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the ddexC:ReleaseSummaryDetailsByTerritory as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ReleaseDetailsByTerritory", "http://ddex.net/xml/ern/341");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ReleaseDetailsByTerritory>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("TerritoryCode", ""), typeof(object));
            localElementDictionary.Add(XName.Get("ExcludedTerritoryCode", ""), typeof(object));
            localElementDictionary.Add(XName.Get("DisplayArtistName", ""), typeof(ddex_net.xml._20120404.ddexC.Name));
            localElementDictionary.Add(XName.Get("LabelName", ""), typeof(ddex_net.xml._20120404.ddexC.LabelName));
            localElementDictionary.Add(XName.Get("RightsAgreementId", ""), typeof(ddex_net.xml._20120404.ddexC.RightsAgreementId));
            localElementDictionary.Add(XName.Get("Title", ""), typeof(ddex_net.xml._20120404.ddexC.Title));
            localElementDictionary.Add(XName.Get("DisplayArtist", ""), typeof(ddex_net.xml._20120404.ddexC.Artist));
            localElementDictionary.Add(XName.Get("IsMultiArtistCompilation", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("AdministratingRecordCompany", ""), typeof(ddex_net.xml._20120404.ddexC.AdministratingRecordCompany));
            localElementDictionary.Add(XName.Get("ReleaseType", ""), typeof(ddex_net.xml._20120404.ddexC.ReleaseType));
            localElementDictionary.Add(XName.Get("RelatedRelease", ""), typeof(ddex_net.xml._20120404.ddexC.RelatedRelease));
            localElementDictionary.Add(XName.Get("ParentalWarningType", ""), typeof(ddex_net.xml._20120404.ddexC.ParentalWarningType));
            localElementDictionary.Add(XName.Get("AvRating", ""), typeof(ddex_net.xml._20120404.ddexC.AvRating));
            localElementDictionary.Add(XName.Get("MarketingComment", ""), typeof(ddex_net.xml._20120404.ddexC.Comment));
            localElementDictionary.Add(XName.Get("ResourceGroup", ""), typeof(ResourceGroup));
            localElementDictionary.Add(XName.Get("Genre", ""), typeof(ddex_net.xml._20120404.ddexC.Genre));
            localElementDictionary.Add(XName.Get("OriginalReleaseDate", ""), typeof(ddex_net.xml._20120404.ddexC.EventDate));
            localElementDictionary.Add(XName.Get("OriginalDigitalReleaseDate", ""), typeof(ddex_net.xml._20120404.ddexC.EventDate));
            localElementDictionary.Add(XName.Get("FileAvailabilityDescription", ""), typeof(ddex_net.xml._20120404.ddexC.Description));
            localElementDictionary.Add(XName.Get("File", ""), typeof(ddex_net.xml._20120404.ddexC.File));
            localElementDictionary.Add(XName.Get("Keywords", ""), typeof(ddex_net.xml._20120404.ddexC.Keywords));
            localElementDictionary.Add(XName.Get("Synopsis", ""), typeof(ddex_net.xml._20120404.ddexC.Synopsis));
            localElementDictionary.Add(XName.Get("Character", ""), typeof(ddex_net.xml._20120404.ddexC.Character));
            localElementDictionary.Add(XName.Get("NumberOfUnitsPerPhysicalRelease", ""), typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of one or more ddex:Releases.
    /// </para>
    /// <para>
    /// Regular expression: (Release*)
    /// </para>
    /// </summary>
    public partial class ReleaseList : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Release> ReleaseField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ReleaseList(XElement xe) { return XTypedServices.ToXTypedElement<ReleaseList>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ReleaseList() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Release", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of one or more ddex:Releases.
        /// </para>
        /// <para>
        /// Regular expression: (Release*)
        /// </para>
        /// </summary>
        public ReleaseList() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:DDEX ddex:Release.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Release*)
        /// </para>
        /// </summary>
        public IList<Release> Release {
            get {
                if ((this.ReleaseField == null)) {
                    this.ReleaseField = new XTypedList<Release>(this, LinqToXsdTypeManager.Instance, XName.Get("Release", ""));
                }
                return this.ReleaseField;
            }
            set {
                if ((value == null)) {
                    this.ReleaseField = null;
                }
                else {
                    if ((this.ReleaseField == null)) {
                        this.ReleaseField = XTypedList<Release>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Release", ""));
                    }
                    else {
                        XTypedServices.SetList<Release>(this.ReleaseField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the ern:ReleaseList as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ReleaseList", "http://ddex.net/xml/ern/341");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ReleaseList>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Release", ""), typeof(Release));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:ResourceGroup. ResourceGroups are used to signal groupings or sequences of ddex:Resources within a ddex:Release. Examples include individual carriers in a multi-carrier ddex:Release or classical ddex:Work groupings as well as the default order of ddex:Resources within a ddex:Release.
    /// </para>
    /// <para>
    /// Regular expression: (Title*, SequenceNumber?, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, ResourceGroup1*, (ResourceGroupContentItem* | ResourceGroupResourceReferenceList?), (ResourceGroupReleaseReference | ReleaseId)?)
    /// </para>
    /// </summary>
    public partial class ResourceGroup : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Title> TitleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Artist> DisplayArtistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.ResourceContributor> ResourceContributorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.IndirectResourceContributor> IndirectResourceContributorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ResourceGroup> ResourceGroup1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ResourceGroupContentItem> ResourceGroupContentItemField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator ResourceGroup(XElement xe) { return XTypedServices.ToXTypedElement<ResourceGroup>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ResourceGroup() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:ResourceGroup. ResourceGroups are used to signal groupings or sequences of ddex:Resources within a ddex:Release. Examples include individual carriers in a multi-carrier ddex:Release or classical ddex:Work groupings as well as the default order of ddex:Resources within a ddex:Release.
        /// </para>
        /// <para>
        /// Regular expression: (Title*, SequenceNumber?, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, ResourceGroup1*, (ResourceGroupContentItem* | ResourceGroupResourceReferenceList?), (ResourceGroupReleaseReference | ReleaseId)?)
        /// </para>
        /// </summary>
        public ResourceGroup() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Title of the ern:ResourceGroup. Typically this will apply to 'sub' ddex:ResourceGroups within a hierarchy, e.g., different ddex:Albums in a ddex:Set.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Title*, SequenceNumber?, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, ResourceGroup1*, (ResourceGroupContentItem* | ResourceGroupResourceReferenceList?), (ResourceGroupReleaseReference | ReleaseId)?)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Title> Title {
            get {
                if ((this.TitleField == null)) {
                    this.TitleField = new XTypedList<ddex_net.xml._20120404.ddexC.Title>(this, LinqToXsdTypeManager.Instance, XName.Get("Title", ""));
                }
                return this.TitleField;
            }
            set {
                if ((value == null)) {
                    this.TitleField = null;
                }
                else {
                    if ((this.TitleField == null)) {
                        this.TitleField = XTypedList<ddex_net.xml._20120404.ddexC.Title>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Title", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Title>(this.TitleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The number indicating the order of the ern:ResourceGroup within all ddex:ResourceGroups at this level. The default value is 1, and the value must be incremented by 1 for each ern:ResourceGroup occurring at a particular level. The ddex:SequenceNumber is unique within its ddex:ResourceGroupLevelNumber.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Title*, SequenceNumber?, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, ResourceGroup1*, (ResourceGroupContentItem* | ResourceGroupResourceReferenceList?), (ResourceGroupReleaseReference | ReleaseId)?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> SequenceNumber {
            get {
                XElement x = this.GetElement(XName.Get("SequenceNumber", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElement(XName.Get("SequenceNumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:DisplayArtist for the ern:ResourceGroup. The ddex:DisplayArtist may be described through ddex:Name, ddex:Identifier and Roles.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Title*, SequenceNumber?, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, ResourceGroup1*, (ResourceGroupContentItem* | ResourceGroupResourceReferenceList?), (ResourceGroupReleaseReference | ReleaseId)?)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Artist> DisplayArtist {
            get {
                if ((this.DisplayArtistField == null)) {
                    this.DisplayArtistField = new XTypedList<ddex_net.xml._20120404.ddexC.Artist>(this, LinqToXsdTypeManager.Instance, XName.Get("DisplayArtist", ""));
                }
                return this.DisplayArtistField;
            }
            set {
                if ((value == null)) {
                    this.DisplayArtistField = null;
                }
                else {
                    if ((this.DisplayArtistField == null)) {
                        this.DisplayArtistField = XTypedList<ddex_net.xml._20120404.ddexC.Artist>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("DisplayArtist", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Artist>(this.DisplayArtistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Contributor to this ern:ResourceGroup. This includes roles such as the compiler of the ern:ResourceGroup, and may summarize details of ddex:Contributors to individual ddex:SoundRecordings or other content.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Title*, SequenceNumber?, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, ResourceGroup1*, (ResourceGroupContentItem* | ResourceGroupResourceReferenceList?), (ResourceGroupReleaseReference | ReleaseId)?)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.ResourceContributor> ResourceContributor {
            get {
                if ((this.ResourceContributorField == null)) {
                    this.ResourceContributorField = new XTypedList<ddex_net.xml._20120404.ddexC.ResourceContributor>(this, LinqToXsdTypeManager.Instance, XName.Get("ResourceContributor", ""));
                }
                return this.ResourceContributorField;
            }
            set {
                if ((value == null)) {
                    this.ResourceContributorField = null;
                }
                else {
                    if ((this.ResourceContributorField == null)) {
                        this.ResourceContributorField = XTypedList<ddex_net.xml._20120404.ddexC.ResourceContributor>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ResourceContributor", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.ResourceContributor>(this.ResourceContributorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of an indirect ddex:Contributor to this ern:ResourceGroup.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Title*, SequenceNumber?, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, ResourceGroup1*, (ResourceGroupContentItem* | ResourceGroupResourceReferenceList?), (ResourceGroupReleaseReference | ReleaseId)?)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.IndirectResourceContributor> IndirectResourceContributor {
            get {
                if ((this.IndirectResourceContributorField == null)) {
                    this.IndirectResourceContributorField = new XTypedList<ddex_net.xml._20120404.ddexC.IndirectResourceContributor>(this, LinqToXsdTypeManager.Instance, XName.Get("IndirectResourceContributor", ""));
                }
                return this.IndirectResourceContributorField;
            }
            set {
                if ((value == null)) {
                    this.IndirectResourceContributorField = null;
                }
                else {
                    if ((this.IndirectResourceContributorField == null)) {
                        this.IndirectResourceContributorField = XTypedList<ddex_net.xml._20120404.ddexC.IndirectResourceContributor>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("IndirectResourceContributor", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.IndirectResourceContributor>(this.IndirectResourceContributorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ern:ResourceGroup contained within this ern:ResourceGroup. ResourceGroups are used to signal groupings or sequences of ddex:Resources within a ddex:Release. Examples include individual carriers in a multi-carrier ddex:Release or classical ddex:Work groupings as well as the default order of ddex:Resources within a ddex:Release.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Title*, SequenceNumber?, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, ResourceGroup1*, (ResourceGroupContentItem* | ResourceGroupResourceReferenceList?), (ResourceGroupReleaseReference | ReleaseId)?)
        /// </para>
        /// </summary>
        public IList<ResourceGroup> ResourceGroup1 {
            get {
                if ((this.ResourceGroup1Field == null)) {
                    this.ResourceGroup1Field = new XTypedList<ResourceGroup>(this, LinqToXsdTypeManager.Instance, XName.Get("ResourceGroup", ""));
                }
                return this.ResourceGroup1Field;
            }
            set {
                if ((value == null)) {
                    this.ResourceGroup1Field = null;
                }
                else {
                    if ((this.ResourceGroup1Field == null)) {
                        this.ResourceGroup1Field = XTypedList<ResourceGroup>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ResourceGroup", ""));
                    }
                    else {
                        XTypedServices.SetList<ResourceGroup>(this.ResourceGroup1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Resource contained in the ern:ResourceGroup.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Title*, SequenceNumber?, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, ResourceGroup1*, (ResourceGroupContentItem* | ResourceGroupResourceReferenceList?), (ResourceGroupReleaseReference | ReleaseId)?)
        /// </para>
        /// </summary>
        public IList<ResourceGroupContentItem> ResourceGroupContentItem {
            get {
                if ((this.ResourceGroupContentItemField == null)) {
                    this.ResourceGroupContentItemField = new XTypedList<ResourceGroupContentItem>(this, LinqToXsdTypeManager.Instance, XName.Get("ResourceGroupContentItem", ""));
                }
                return this.ResourceGroupContentItemField;
            }
            set {
                if ((value == null)) {
                    this.ResourceGroupContentItemField = null;
                }
                else {
                    if ((this.ResourceGroupContentItemField == null)) {
                        this.ResourceGroupContentItemField = XTypedList<ResourceGroupContentItem>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ResourceGroupContentItem", ""));
                    }
                    else {
                        XTypedServices.SetList<ResourceGroupContentItem>(this.ResourceGroupContentItemField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Resource contained in the ern:ResourceGroup.
        /// </para>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Title*, SequenceNumber?, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, ResourceGroup1*, (ResourceGroupContentItem* | ResourceGroupResourceReferenceList?), (ResourceGroupReleaseReference | ReleaseId)?)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.ResourceGroupResourceReferenceList ResourceGroupResourceReferenceList {
            get {
                XElement x = this.GetElement(XName.Get("ResourceGroupResourceReferenceList", ""));
                return ((ddex_net.xml._20120404.ddexC.ResourceGroupResourceReferenceList)(x));
            }
            set {
                this.SetElement(XName.Get("ResourceGroupResourceReferenceList", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Identifier (specific to the ddex:Message) of a ddex:Release which has the same content as the ern:ResourceGroup. This is a ddex:LocalReleaseAnchorReference starting with the letter R.
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Title*, SequenceNumber?, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, ResourceGroup1*, (ResourceGroupContentItem* | ResourceGroupResourceReferenceList?), (ResourceGroupReleaseReference | ReleaseId)?)
        /// </para>
        /// </summary>
        public string ResourceGroupReleaseReference {
            get {
                XElement x = this.GetElement(XName.Get("ResourceGroupReleaseReference", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("ResourceGroupReleaseReference", ""), value, "ResourceGroupReleaseReference", ResourceGroupReleaseReferenceLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:ReleaseIds of a ddex:Release which has the same content as the ern:ResourceGroup. If available, a ddex:GRid has to be used. If the ddex:Release contains only one ddex:SoundRecording, the ddex:ISRC of the ddex:SoundRecording may be used instead. If the ddex:Release is an abstraction of a complete ddex:PhysicalProduct (such as a CD ddex:Album), the ddex:ICPN of the ddex:PhysicalProduct may be used instead.
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Title*, SequenceNumber?, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, ResourceGroup1*, (ResourceGroupContentItem* | ResourceGroupResourceReferenceList?), (ResourceGroupReleaseReference | ReleaseId)?)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.ReleaseId ReleaseId {
            get {
                XElement x = this.GetElement(XName.Get("ReleaseId", ""));
                return ((ddex_net.xml._20120404.ddexC.ReleaseId)(x));
            }
            set {
                this.SetElement(XName.Get("ReleaseId", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the ern:ResourceGroup as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ResourceGroup", "http://ddex.net/xml/ern/341");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ResourceGroup>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Title", ""), typeof(ddex_net.xml._20120404.ddexC.Title));
            localElementDictionary.Add(XName.Get("SequenceNumber", ""), typeof(decimal));
            localElementDictionary.Add(XName.Get("DisplayArtist", ""), typeof(ddex_net.xml._20120404.ddexC.Artist));
            localElementDictionary.Add(XName.Get("ResourceContributor", ""), typeof(ddex_net.xml._20120404.ddexC.ResourceContributor));
            localElementDictionary.Add(XName.Get("IndirectResourceContributor", ""), typeof(ddex_net.xml._20120404.ddexC.IndirectResourceContributor));
            localElementDictionary.Add(XName.Get("ResourceGroup", ""), typeof(ResourceGroup));
            localElementDictionary.Add(XName.Get("ResourceGroupContentItem", ""), typeof(ResourceGroupContentItem));
            localElementDictionary.Add(XName.Get("ResourceGroupResourceReferenceList", ""), typeof(ddex_net.xml._20120404.ddexC.ResourceGroupResourceReferenceList));
            localElementDictionary.Add(XName.Get("ResourceGroupReleaseReference", ""), typeof(string));
            localElementDictionary.Add(XName.Get("ReleaseId", ""), typeof(ddex_net.xml._20120404.ddexC.ReleaseId));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        private class ResourceGroupReleaseReferenceLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "R[\\d\\-_a-zA-Z]+"}, 0, XmlSchemaWhiteSpace.Collapse));
            
            private ResourceGroupReleaseReferenceLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:Resource which is a ddex:ContentItem of a ddex:ResourceGroup.
    /// </para>
    /// <para>
    /// Regular expression: (SequenceNumber?, SequenceSubNumber?, ResourceType*, ReleaseResourceReference, LinkedReleaseResourceReference*, (ResourceGroupContentItemReleaseReference | ReleaseId)?, Duration?, IsHiddenResource?, IsBonusResource?)
    /// </para>
    /// </summary>
    public partial class ResourceGroupContentItem : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.ResourceType> ResourceTypeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.LinkedReleaseResourceReference> LinkedReleaseResourceReferenceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator ResourceGroupContentItem(XElement xe) { return XTypedServices.ToXTypedElement<ResourceGroupContentItem>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ResourceGroupContentItem() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Resource which is a ddex:ContentItem of a ddex:ResourceGroup.
        /// </para>
        /// <para>
        /// Regular expression: (SequenceNumber?, SequenceSubNumber?, ResourceType*, ReleaseResourceReference, LinkedReleaseResourceReference*, (ResourceGroupContentItemReleaseReference | ReleaseId)?, Duration?, IsHiddenResource?, IsBonusResource?)
        /// </para>
        /// </summary>
        public ResourceGroupContentItem() {
        }
        
        /// <summary>
        /// <para>
        /// The number indicating the order of the ddex:ContentItem among all ddex:Resources within this ddex:ResourceGroup. This is analogous to the ddex:Track number on a ddex:SoundCarrier. Not all ddex:ResourceGroups necessarily have ddex:SequenceNumbers (it is most applicable to ddex:SoundRecordings and ddex:MusicalWorkVideos). The ddex:SequenceNumber is unique within its ddex:ResourceGroupLevelNumber.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SequenceNumber?, SequenceSubNumber?, ResourceType*, ReleaseResourceReference, LinkedReleaseResourceReference*, (ResourceGroupContentItemReleaseReference | ReleaseId)?, Duration?, IsHiddenResource?, IsBonusResource?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> SequenceNumber {
            get {
                XElement x = this.GetElement(XName.Get("SequenceNumber", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElement(XName.Get("SequenceNumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:SequenceNumber within the ddex:SequenceNumber. Example: if a ddex:Track is subdivided into several numbered sections, these are numbered with a ddex:SequenceSubNumber. The ddex:SequenceSubNumber is unique within its ddex:SequenceNumber.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SequenceNumber?, SequenceSubNumber?, ResourceType*, ReleaseResourceReference, LinkedReleaseResourceReference*, (ResourceGroupContentItemReleaseReference | ReleaseId)?, Duration?, IsHiddenResource?, IsBonusResource?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> SequenceSubNumber {
            get {
                XElement x = this.GetElement(XName.Get("SequenceSubNumber", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElement(XName.Get("SequenceSubNumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:Type of the ddex:ContentItem.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SequenceNumber?, SequenceSubNumber?, ResourceType*, ReleaseResourceReference, LinkedReleaseResourceReference*, (ResourceGroupContentItemReleaseReference | ReleaseId)?, Duration?, IsHiddenResource?, IsBonusResource?)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.ResourceType> ResourceType {
            get {
                if ((this.ResourceTypeField == null)) {
                    this.ResourceTypeField = new XTypedList<ddex_net.xml._20120404.ddexC.ResourceType>(this, LinqToXsdTypeManager.Instance, XName.Get("ResourceType", ""));
                }
                return this.ResourceTypeField;
            }
            set {
                if ((value == null)) {
                    this.ResourceTypeField = null;
                }
                else {
                    if ((this.ResourceTypeField == null)) {
                        this.ResourceTypeField = XTypedList<ddex_net.xml._20120404.ddexC.ResourceType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ResourceType", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.ResourceType>(this.ResourceTypeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a ddex:ReleaseResourceReference for the ddex:ContentItem (specific to this ddex:Message). The ddex:LocalAnchorReference in this ddex:Composite is a xs:string starting with the letter A.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SequenceNumber?, SequenceSubNumber?, ResourceType*, ReleaseResourceReference, LinkedReleaseResourceReference*, (ResourceGroupContentItemReleaseReference | ReleaseId)?, Duration?, IsHiddenResource?, IsBonusResource?)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.ReleaseResourceReference ReleaseResourceReference {
            get {
                XElement x = this.GetElement(XName.Get("ReleaseResourceReference", ""));
                return ((ddex_net.xml._20120404.ddexC.ReleaseResourceReference)(x));
            }
            set {
                this.SetElement(XName.Get("ReleaseResourceReference", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:ReleaseResourceReference (specific to this ddex:Message) for a ddex:Resource which is linked to this ddex:ContentItem. Example: an ddex:Image, ddex:Text or ddex:NonMusicalWorkVideo associated with a ddex:SoundRecording. This ddex:LocalAnchorReference is a xs:string starting with the letter A.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SequenceNumber?, SequenceSubNumber?, ResourceType*, ReleaseResourceReference, LinkedReleaseResourceReference*, (ResourceGroupContentItemReleaseReference | ReleaseId)?, Duration?, IsHiddenResource?, IsBonusResource?)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.LinkedReleaseResourceReference> LinkedReleaseResourceReference {
            get {
                if ((this.LinkedReleaseResourceReferenceField == null)) {
                    this.LinkedReleaseResourceReferenceField = new XTypedList<ddex_net.xml._20120404.ddexC.LinkedReleaseResourceReference>(this, LinqToXsdTypeManager.Instance, XName.Get("LinkedReleaseResourceReference", ""));
                }
                return this.LinkedReleaseResourceReferenceField;
            }
            set {
                if ((value == null)) {
                    this.LinkedReleaseResourceReferenceField = null;
                }
                else {
                    if ((this.LinkedReleaseResourceReferenceField == null)) {
                        this.LinkedReleaseResourceReferenceField = XTypedList<ddex_net.xml._20120404.ddexC.LinkedReleaseResourceReference>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("LinkedReleaseResourceReference", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.LinkedReleaseResourceReference>(this.LinkedReleaseResourceReferenceField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Identifier (specific to the ddex:Message) of a ddex:Release which has the same content as the ern:ResourceGroupContentItem. This is a ddex:LocalReleaseAnchorReference starting with the letter R.
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (SequenceNumber?, SequenceSubNumber?, ResourceType*, ReleaseResourceReference, LinkedReleaseResourceReference*, (ResourceGroupContentItemReleaseReference | ReleaseId)?, Duration?, IsHiddenResource?, IsBonusResource?)
        /// </para>
        /// </summary>
        public string ResourceGroupContentItemReleaseReference {
            get {
                XElement x = this.GetElement(XName.Get("ResourceGroupContentItemReleaseReference", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("ResourceGroupContentItemReleaseReference", ""), value, "ResourceGroupContentItemReleaseReference", ResourceGroupContentItemReleaseReferenceLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:ReleaseIds of a ddex:Release which has the same content as the ern:ResourceGroupContentItem. If available, a ddex:GRid has to be used. If the ddex:Release contains only one ddex:SoundRecording, the ddex:ISRC of the ddex:SoundRecording may be used instead. If the ddex:Release is an abstraction of a complete ddex:PhysicalProduct (such as a CD ddex:Album), the ddex:ICPN of the ddex:PhysicalProduct may be used instead.
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (SequenceNumber?, SequenceSubNumber?, ResourceType*, ReleaseResourceReference, LinkedReleaseResourceReference*, (ResourceGroupContentItemReleaseReference | ReleaseId)?, Duration?, IsHiddenResource?, IsBonusResource?)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.ReleaseId ReleaseId {
            get {
                XElement x = this.GetElement(XName.Get("ReleaseId", ""));
                return ((ddex_net.xml._20120404.ddexC.ReleaseId)(x));
            }
            set {
                this.SetElement(XName.Get("ReleaseId", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Duration of the ddex:ContentItem featured, if it is a ddex:SoundRecording or ddex:Video (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S). This ddex:Duration may be less than the normal ddex:Duration of the ddex:ContentItem, if only a part of it is included.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SequenceNumber?, SequenceSubNumber?, ResourceType*, ReleaseResourceReference, LinkedReleaseResourceReference*, (ResourceGroupContentItemReleaseReference | ReleaseId)?, Duration?, IsHiddenResource?, IsBonusResource?)
        /// </para>
        /// </summary>
        public System.Nullable<System.TimeSpan> Duration {
            get {
                XElement x = this.GetElement(XName.Get("Duration", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
            set {
                this.SetElement(XName.Get("Duration", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether a ddex:Resource in a ddex:Release is hidden in some way from the ddex:Consumer (=True) or not (=False).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SequenceNumber?, SequenceSubNumber?, ResourceType*, ReleaseResourceReference, LinkedReleaseResourceReference*, (ResourceGroupContentItemReleaseReference | ReleaseId)?, Duration?, IsHiddenResource?, IsBonusResource?)
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsHiddenResource {
            get {
                XElement x = this.GetElement(XName.Get("IsHiddenResource", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("IsHiddenResource", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether a ddex:Resource in a ddex:Release is additional to those on the original ddex:Release of which this is a ddex:Version (=True) or not (=False).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SequenceNumber?, SequenceSubNumber?, ResourceType*, ReleaseResourceReference, LinkedReleaseResourceReference*, (ResourceGroupContentItemReleaseReference | ReleaseId)?, Duration?, IsHiddenResource?, IsBonusResource?)
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsBonusResource {
            get {
                XElement x = this.GetElement(XName.Get("IsBonusResource", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("IsBonusResource", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ResourceGroupContentItem", "http://ddex.net/xml/ern/341");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ResourceGroupContentItem>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("SequenceNumber", ""), typeof(decimal));
            localElementDictionary.Add(XName.Get("SequenceSubNumber", ""), typeof(decimal));
            localElementDictionary.Add(XName.Get("ResourceType", ""), typeof(ddex_net.xml._20120404.ddexC.ResourceType));
            localElementDictionary.Add(XName.Get("ReleaseResourceReference", ""), typeof(ddex_net.xml._20120404.ddexC.ReleaseResourceReference));
            localElementDictionary.Add(XName.Get("LinkedReleaseResourceReference", ""), typeof(ddex_net.xml._20120404.ddexC.LinkedReleaseResourceReference));
            localElementDictionary.Add(XName.Get("ResourceGroupContentItemReleaseReference", ""), typeof(string));
            localElementDictionary.Add(XName.Get("ReleaseId", ""), typeof(ddex_net.xml._20120404.ddexC.ReleaseId));
            localElementDictionary.Add(XName.Get("Duration", ""), typeof(System.TimeSpan));
            localElementDictionary.Add(XName.Get("IsHiddenResource", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("IsBonusResource", ""), typeof(bool));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        private class ResourceGroupContentItemReleaseReferenceLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "R[\\d\\-_a-zA-Z]+"}, 0, XmlSchemaWhiteSpace.Collapse));
            
            private ResourceGroupContentItemReleaseReferenceLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of one or more ddex:Resources. ResourceList provides a simple means of aggregating ddex:Resources without any explicit sequencing or grouping: if that is needed it is provided by the ddex:ResourceGroup ddex:Composite. 
    /// </para>
    /// <para>
    /// Regular expression: (SoundRecording*, MIDI*, Video*, Image*, Text*, SheetMusic*, Software*, UserDefinedResource*)
    /// </para>
    /// </summary>
    public partial class ResourceList : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SoundRecording> SoundRecordingField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<MIDI> MIDIField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Video> VideoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Image> ImageField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Text> TextField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SheetMusic> SheetMusicField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Software> SoftwareField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UserDefinedResource> UserDefinedResourceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ResourceList(XElement xe) { return XTypedServices.ToXTypedElement<ResourceList>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ResourceList() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("SoundRecording", "")), new NamedContentModelEntity(XName.Get("MIDI", "")), new NamedContentModelEntity(XName.Get("Video", "")), new NamedContentModelEntity(XName.Get("Image", "")), new NamedContentModelEntity(XName.Get("Text", "")), new NamedContentModelEntity(XName.Get("SheetMusic", "")), new NamedContentModelEntity(XName.Get("Software", "")), new NamedContentModelEntity(XName.Get("UserDefinedResource", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of one or more ddex:Resources. ResourceList provides a simple means of aggregating ddex:Resources without any explicit sequencing or grouping: if that is needed it is provided by the ddex:ResourceGroup ddex:Composite. 
        /// </para>
        /// <para>
        /// Regular expression: (SoundRecording*, MIDI*, Video*, Image*, Text*, SheetMusic*, Software*, UserDefinedResource*)
        /// </para>
        /// </summary>
        public ResourceList() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:SoundRecording.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SoundRecording*, MIDI*, Video*, Image*, Text*, SheetMusic*, Software*, UserDefinedResource*)
        /// </para>
        /// </summary>
        public IList<SoundRecording> SoundRecording {
            get {
                if ((this.SoundRecordingField == null)) {
                    this.SoundRecordingField = new XTypedList<SoundRecording>(this, LinqToXsdTypeManager.Instance, XName.Get("SoundRecording", ""));
                }
                return this.SoundRecordingField;
            }
            set {
                if ((value == null)) {
                    this.SoundRecordingField = null;
                }
                else {
                    if ((this.SoundRecordingField == null)) {
                        this.SoundRecordingField = XTypedList<SoundRecording>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("SoundRecording", ""));
                    }
                    else {
                        XTypedServices.SetList<SoundRecording>(this.SoundRecordingField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:MIDI.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SoundRecording*, MIDI*, Video*, Image*, Text*, SheetMusic*, Software*, UserDefinedResource*)
        /// </para>
        /// </summary>
        public IList<MIDI> MIDI {
            get {
                if ((this.MIDIField == null)) {
                    this.MIDIField = new XTypedList<MIDI>(this, LinqToXsdTypeManager.Instance, XName.Get("MIDI", ""));
                }
                return this.MIDIField;
            }
            set {
                if ((value == null)) {
                    this.MIDIField = null;
                }
                else {
                    if ((this.MIDIField == null)) {
                        this.MIDIField = XTypedList<MIDI>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("MIDI", ""));
                    }
                    else {
                        XTypedServices.SetList<MIDI>(this.MIDIField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Video.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SoundRecording*, MIDI*, Video*, Image*, Text*, SheetMusic*, Software*, UserDefinedResource*)
        /// </para>
        /// </summary>
        public IList<Video> Video {
            get {
                if ((this.VideoField == null)) {
                    this.VideoField = new XTypedList<Video>(this, LinqToXsdTypeManager.Instance, XName.Get("Video", ""));
                }
                return this.VideoField;
            }
            set {
                if ((value == null)) {
                    this.VideoField = null;
                }
                else {
                    if ((this.VideoField == null)) {
                        this.VideoField = XTypedList<Video>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Video", ""));
                    }
                    else {
                        XTypedServices.SetList<Video>(this.VideoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of an ddex:Image.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SoundRecording*, MIDI*, Video*, Image*, Text*, SheetMusic*, Software*, UserDefinedResource*)
        /// </para>
        /// </summary>
        public IList<Image> Image {
            get {
                if ((this.ImageField == null)) {
                    this.ImageField = new XTypedList<Image>(this, LinqToXsdTypeManager.Instance, XName.Get("Image", ""));
                }
                return this.ImageField;
            }
            set {
                if ((value == null)) {
                    this.ImageField = null;
                }
                else {
                    if ((this.ImageField == null)) {
                        this.ImageField = XTypedList<Image>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Image", ""));
                    }
                    else {
                        XTypedServices.SetList<Image>(this.ImageField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Text.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SoundRecording*, MIDI*, Video*, Image*, Text*, SheetMusic*, Software*, UserDefinedResource*)
        /// </para>
        /// </summary>
        public IList<Text> Text {
            get {
                if ((this.TextField == null)) {
                    this.TextField = new XTypedList<Text>(this, LinqToXsdTypeManager.Instance, XName.Get("Text", ""));
                }
                return this.TextField;
            }
            set {
                if ((value == null)) {
                    this.TextField = null;
                }
                else {
                    if ((this.TextField == null)) {
                        this.TextField = XTypedList<Text>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Text", ""));
                    }
                    else {
                        XTypedServices.SetList<Text>(this.TextField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Text.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SoundRecording*, MIDI*, Video*, Image*, Text*, SheetMusic*, Software*, UserDefinedResource*)
        /// </para>
        /// </summary>
        public IList<SheetMusic> SheetMusic {
            get {
                if ((this.SheetMusicField == null)) {
                    this.SheetMusicField = new XTypedList<SheetMusic>(this, LinqToXsdTypeManager.Instance, XName.Get("SheetMusic", ""));
                }
                return this.SheetMusicField;
            }
            set {
                if ((value == null)) {
                    this.SheetMusicField = null;
                }
                else {
                    if ((this.SheetMusicField == null)) {
                        this.SheetMusicField = XTypedList<SheetMusic>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("SheetMusic", ""));
                    }
                    else {
                        XTypedServices.SetList<SheetMusic>(this.SheetMusicField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of an item of ddex:Software.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SoundRecording*, MIDI*, Video*, Image*, Text*, SheetMusic*, Software*, UserDefinedResource*)
        /// </para>
        /// </summary>
        public IList<Software> Software {
            get {
                if ((this.SoftwareField == null)) {
                    this.SoftwareField = new XTypedList<Software>(this, LinqToXsdTypeManager.Instance, XName.Get("Software", ""));
                }
                return this.SoftwareField;
            }
            set {
                if ((value == null)) {
                    this.SoftwareField = null;
                }
                else {
                    if ((this.SoftwareField == null)) {
                        this.SoftwareField = XTypedList<Software>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Software", ""));
                    }
                    else {
                        XTypedServices.SetList<Software>(this.SoftwareField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:UserDefinedResource.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SoundRecording*, MIDI*, Video*, Image*, Text*, SheetMusic*, Software*, UserDefinedResource*)
        /// </para>
        /// </summary>
        public IList<UserDefinedResource> UserDefinedResource {
            get {
                if ((this.UserDefinedResourceField == null)) {
                    this.UserDefinedResourceField = new XTypedList<UserDefinedResource>(this, LinqToXsdTypeManager.Instance, XName.Get("UserDefinedResource", ""));
                }
                return this.UserDefinedResourceField;
            }
            set {
                if ((value == null)) {
                    this.UserDefinedResourceField = null;
                }
                else {
                    if ((this.UserDefinedResourceField == null)) {
                        this.UserDefinedResourceField = XTypedList<UserDefinedResource>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("UserDefinedResource", ""));
                    }
                    else {
                        XTypedServices.SetList<UserDefinedResource>(this.UserDefinedResourceField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the ern:ResourceList as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ResourceList", "http://ddex.net/xml/ern/341");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ResourceList>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("SoundRecording", ""), typeof(SoundRecording));
            localElementDictionary.Add(XName.Get("MIDI", ""), typeof(MIDI));
            localElementDictionary.Add(XName.Get("Video", ""), typeof(Video));
            localElementDictionary.Add(XName.Get("Image", ""), typeof(Image));
            localElementDictionary.Add(XName.Get("Text", ""), typeof(Text));
            localElementDictionary.Add(XName.Get("SheetMusic", ""), typeof(SheetMusic));
            localElementDictionary.Add(XName.Get("Software", ""), typeof(Software));
            localElementDictionary.Add(XName.Get("UserDefinedResource", ""), typeof(UserDefinedResource));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of one or more Usages that govern a ddex:Resource.
    /// </para>
    /// <para>
    /// Regular expression: (DealResourceReference*, Usage+)
    /// </para>
    /// </summary>
    public partial class ResourceUsage : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> DealResourceReferenceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Usage> UsageField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ResourceUsage(XElement xe) { return XTypedServices.ToXTypedElement<ResourceUsage>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ResourceUsage() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("DealResourceReference", "")), new NamedContentModelEntity(XName.Get("Usage", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of one or more Usages that govern a ddex:Resource.
        /// </para>
        /// <para>
        /// Regular expression: (DealResourceReference*, Usage+)
        /// </para>
        /// </summary>
        public ResourceUsage() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Reference for a ddex:Resource (specific to this ddex:Message). This is a ddex:LocalResourceAnchorReference starting with the letter A.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DealResourceReference*, Usage+)
        /// </para>
        /// </summary>
        public IList<string> DealResourceReference {
            get {
                if ((this.DealResourceReferenceField == null)) {
                    this.DealResourceReferenceField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype, XName.Get("DealResourceReference", ""));
                }
                return this.DealResourceReferenceField;
            }
            set {
                if ((value == null)) {
                    this.DealResourceReferenceField = null;
                }
                else {
                    if ((this.DealResourceReferenceField == null)) {
                        this.DealResourceReferenceField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype, value, XName.Get("DealResourceReference", ""));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.DealResourceReferenceField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing the ddex:Types and number of Usages applicable to the ddex:Resource.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DealResourceReference*, Usage+)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Usage> Usage {
            get {
                if ((this.UsageField == null)) {
                    this.UsageField = new XTypedList<ddex_net.xml._20120404.ddexC.Usage>(this, LinqToXsdTypeManager.Instance, XName.Get("Usage", ""));
                }
                return this.UsageField;
            }
            set {
                if ((value == null)) {
                    this.UsageField = null;
                }
                else {
                    if ((this.UsageField == null)) {
                        this.UsageField = XTypedList<ddex_net.xml._20120404.ddexC.Usage>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Usage", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Usage>(this.UsageField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ResourceUsage", "http://ddex.net/xml/ern/341");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ResourceUsage>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("DealResourceReference", ""), typeof(string));
            localElementDictionary.Add(XName.Get("Usage", ""), typeof(ddex_net.xml._20120404.ddexC.Usage));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class DealResourceReferenceLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "A[\\d\\-_a-zA-Z]+"}, 0, XmlSchemaWhiteSpace.Collapse));
            
            private DealResourceReferenceLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a rights claim policy.
    /// </para>
    /// <para>
    /// Regular expression: (Condition, RightsClaimPolicyType)
    /// </para>
    /// </summary>
    public partial class RightsClaimPolicy : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator RightsClaimPolicy(XElement xe) { return XTypedServices.ToXTypedElement<RightsClaimPolicy>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RightsClaimPolicy() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Condition", "")), new NamedContentModelEntity(XName.Get("RightsClaimPolicyType", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a rights claim policy.
        /// </para>
        /// <para>
        /// Regular expression: (Condition, RightsClaimPolicyType)
        /// </para>
        /// </summary>
        public RightsClaimPolicy() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of conditions.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Condition, RightsClaimPolicyType)
        /// </para>
        /// </summary>
        public Condition Condition {
            get {
                XElement x = this.GetElement(XName.Get("Condition", ""));
                return ((Condition)(x));
            }
            set {
                this.SetElement(XName.Get("Condition", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Type of rights claim policy.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Condition, RightsClaimPolicyType)
        /// </para>
        /// </summary>
        public string RightsClaimPolicyType {
            get {
                XElement x = this.GetElement(XName.Get("RightsClaimPolicyType", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("RightsClaimPolicyType", ""), value, "RightsClaimPolicyType", global::ddex_net.xml._20120404.ddex.RightsClaimPolicyType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("RightsClaimPolicy", "http://ddex.net/xml/ern/341");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RightsClaimPolicy>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Condition", ""), typeof(Condition));
            localElementDictionary.Add(XName.Get("RightsClaimPolicyType", ""), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:SheetMusic.
    /// </para>
    /// <para>
    /// Regular expression: (SheetMusicType?, IsArtistRelated?, SheetMusicId+, IndirectSheetMusicId*, ResourceReference, LanguageOfLyrics?, RightsAgreementId?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, ReferenceTitle, CreationDate?, SheetMusicDetailsByTerritory+)
    /// </para>
    /// </summary>
    public partial class SheetMusic : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.SheetMusicId> SheetMusicIdField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.MusicalWorkId> IndirectSheetMusicIdField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SheetMusicDetailsByTerritory> SheetMusicDetailsByTerritoryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator SheetMusic(XElement xe) { return XTypedServices.ToXTypedElement<SheetMusic>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SheetMusic() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("SheetMusicType", "")), new NamedContentModelEntity(XName.Get("IsArtistRelated", "")), new NamedContentModelEntity(XName.Get("SheetMusicId", "")), new NamedContentModelEntity(XName.Get("IndirectSheetMusicId", "")), new NamedContentModelEntity(XName.Get("ResourceReference", "")), new NamedContentModelEntity(XName.Get("LanguageOfLyrics", "")), new NamedContentModelEntity(XName.Get("RightsAgreementId", "")), new NamedContentModelEntity(XName.Get("ResourceMusicalWorkReferenceList", "")), new NamedContentModelEntity(XName.Get("ResourceContainedResourceReferenceList", "")), new NamedContentModelEntity(XName.Get("ReferenceTitle", "")), new NamedContentModelEntity(XName.Get("CreationDate", "")), new NamedContentModelEntity(XName.Get("SheetMusicDetailsByTerritory", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:SheetMusic.
        /// </para>
        /// <para>
        /// Regular expression: (SheetMusicType?, IsArtistRelated?, SheetMusicId+, IndirectSheetMusicId*, ResourceReference, LanguageOfLyrics?, RightsAgreementId?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, ReferenceTitle, CreationDate?, SheetMusicDetailsByTerritory+)
        /// </para>
        /// </summary>
        public SheetMusic() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:Type of the ern:SheetMusic.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SheetMusicType?, IsArtistRelated?, SheetMusicId+, IndirectSheetMusicId*, ResourceReference, LanguageOfLyrics?, RightsAgreementId?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, ReferenceTitle, CreationDate?, SheetMusicDetailsByTerritory+)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.SheetMusicType SheetMusicType {
            get {
                XElement x = this.GetElement(XName.Get("SheetMusicType", ""));
                return ((ddex_net.xml._20120404.ddexC.SheetMusicType)(x));
            }
            set {
                this.SetElement(XName.Get("SheetMusicType", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ern:SheetMusic is related to an ddex:Artist (=True) or not (=False).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SheetMusicType?, IsArtistRelated?, SheetMusicId+, IndirectSheetMusicId*, ResourceReference, LanguageOfLyrics?, RightsAgreementId?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, ReferenceTitle, CreationDate?, SheetMusicDetailsByTerritory+)
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsArtistRelated {
            get {
                XElement x = this.GetElement(XName.Get("IsArtistRelated", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("IsArtistRelated", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:Identifiers of the ern:SheetMusic.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SheetMusicType?, IsArtistRelated?, SheetMusicId+, IndirectSheetMusicId*, ResourceReference, LanguageOfLyrics?, RightsAgreementId?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, ReferenceTitle, CreationDate?, SheetMusicDetailsByTerritory+)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.SheetMusicId> SheetMusicId {
            get {
                if ((this.SheetMusicIdField == null)) {
                    this.SheetMusicIdField = new XTypedList<ddex_net.xml._20120404.ddexC.SheetMusicId>(this, LinqToXsdTypeManager.Instance, XName.Get("SheetMusicId", ""));
                }
                return this.SheetMusicIdField;
            }
            set {
                if ((value == null)) {
                    this.SheetMusicIdField = null;
                }
                else {
                    if ((this.SheetMusicIdField == null)) {
                        this.SheetMusicIdField = XTypedList<ddex_net.xml._20120404.ddexC.SheetMusicId>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("SheetMusicId", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.SheetMusicId>(this.SheetMusicIdField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:MusicalWorkId of a ddex:MusicalWork used in the ern:SheetMusic.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SheetMusicType?, IsArtistRelated?, SheetMusicId+, IndirectSheetMusicId*, ResourceReference, LanguageOfLyrics?, RightsAgreementId?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, ReferenceTitle, CreationDate?, SheetMusicDetailsByTerritory+)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.MusicalWorkId> IndirectSheetMusicId {
            get {
                if ((this.IndirectSheetMusicIdField == null)) {
                    this.IndirectSheetMusicIdField = new XTypedList<ddex_net.xml._20120404.ddexC.MusicalWorkId>(this, LinqToXsdTypeManager.Instance, XName.Get("IndirectSheetMusicId", ""));
                }
                return this.IndirectSheetMusicIdField;
            }
            set {
                if ((value == null)) {
                    this.IndirectSheetMusicIdField = null;
                }
                else {
                    if ((this.IndirectSheetMusicIdField == null)) {
                        this.IndirectSheetMusicIdField = XTypedList<ddex_net.xml._20120404.ddexC.MusicalWorkId>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("IndirectSheetMusicId", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.MusicalWorkId>(this.IndirectSheetMusicIdField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Identifier (specific to the ddex:Message) of the ddexC:SheetMusic within the ddex:Release which contains it. This is a ddex:LocalResourceAnchor starting with the letter A.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SheetMusicType?, IsArtistRelated?, SheetMusicId+, IndirectSheetMusicId*, ResourceReference, LanguageOfLyrics?, RightsAgreementId?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, ReferenceTitle, CreationDate?, SheetMusicDetailsByTerritory+)
        /// </para>
        /// </summary>
        public string ResourceReference {
            get {
                XElement x = this.GetElement(XName.Get("ResourceReference", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("ResourceReference", ""), value, "ResourceReference", ResourceReferenceLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language of the lyrics of the ern:SheetMusic (represented by an ISO 639-2 iso639a2:LanguageCode).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SheetMusicType?, IsArtistRelated?, SheetMusicId+, IndirectSheetMusicId*, ResourceReference, LanguageOfLyrics?, RightsAgreementId?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, ReferenceTitle, CreationDate?, SheetMusicDetailsByTerritory+)
        /// </para>
        /// </summary>
        public string LanguageOfLyrics {
            get {
                XElement x = this.GetElement(XName.Get("LanguageOfLyrics", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("LanguageOfLyrics", ""), value, "LanguageOfLyrics", global::ddex_net.xml._20120404.iso639a2.LanguageCode.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:Identifiers of a ddex:License, ddex:Claim, ddex:RightShare or contract for the MusicalWork(s) related to the ern:SheetMusic.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SheetMusicType?, IsArtistRelated?, SheetMusicId+, IndirectSheetMusicId*, ResourceReference, LanguageOfLyrics?, RightsAgreementId?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, ReferenceTitle, CreationDate?, SheetMusicDetailsByTerritory+)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.RightsAgreementId RightsAgreementId {
            get {
                XElement x = this.GetElement(XName.Get("RightsAgreementId", ""));
                return ((ddex_net.xml._20120404.ddexC.RightsAgreementId)(x));
            }
            set {
                this.SetElement(XName.Get("RightsAgreementId", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of one or more ddex:MusicalWorks contained in the ern:SheetMusic.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SheetMusicType?, IsArtistRelated?, SheetMusicId+, IndirectSheetMusicId*, ResourceReference, LanguageOfLyrics?, RightsAgreementId?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, ReferenceTitle, CreationDate?, SheetMusicDetailsByTerritory+)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.ResourceMusicalWorkReferenceList ResourceMusicalWorkReferenceList {
            get {
                XElement x = this.GetElement(XName.Get("ResourceMusicalWorkReferenceList", ""));
                return ((ddex_net.xml._20120404.ddexC.ResourceMusicalWorkReferenceList)(x));
            }
            set {
                this.SetElement(XName.Get("ResourceMusicalWorkReferenceList", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:ResourceContainedResourceReferences referring to a ddex:Resource that is contained in the current ern:SheetMusic.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SheetMusicType?, IsArtistRelated?, SheetMusicId+, IndirectSheetMusicId*, ResourceReference, LanguageOfLyrics?, RightsAgreementId?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, ReferenceTitle, CreationDate?, SheetMusicDetailsByTerritory+)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.ResourceContainedResourceReferenceList ResourceContainedResourceReferenceList {
            get {
                XElement x = this.GetElement(XName.Get("ResourceContainedResourceReferenceList", ""));
                return ((ddex_net.xml._20120404.ddexC.ResourceContainedResourceReferenceList)(x));
            }
            set {
                this.SetElement(XName.Get("ResourceContainedResourceReferenceList", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:ReferenceTitle of the ern:SheetMusic.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SheetMusicType?, IsArtistRelated?, SheetMusicId+, IndirectSheetMusicId*, ResourceReference, LanguageOfLyrics?, RightsAgreementId?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, ReferenceTitle, CreationDate?, SheetMusicDetailsByTerritory+)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.ReferenceTitle ReferenceTitle {
            get {
                XElement x = this.GetElement(XName.Get("ReferenceTitle", ""));
                return ((ddex_net.xml._20120404.ddexC.ReferenceTitle)(x));
            }
            set {
                this.SetElement(XName.Get("ReferenceTitle", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ern:SheetMusic was created.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SheetMusicType?, IsArtistRelated?, SheetMusicId+, IndirectSheetMusicId*, ResourceReference, LanguageOfLyrics?, RightsAgreementId?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, ReferenceTitle, CreationDate?, SheetMusicDetailsByTerritory+)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.EventDate CreationDate {
            get {
                XElement x = this.GetElement(XName.Get("CreationDate", ""));
                return ((ddex_net.xml._20120404.ddexC.EventDate)(x));
            }
            set {
                this.SetElement(XName.Get("CreationDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ern:SheetMusic which may vary according to ddex:Territory of release.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SheetMusicType?, IsArtistRelated?, SheetMusicId+, IndirectSheetMusicId*, ResourceReference, LanguageOfLyrics?, RightsAgreementId?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, ReferenceTitle, CreationDate?, SheetMusicDetailsByTerritory+)
        /// </para>
        /// </summary>
        public IList<SheetMusicDetailsByTerritory> SheetMusicDetailsByTerritory {
            get {
                if ((this.SheetMusicDetailsByTerritoryField == null)) {
                    this.SheetMusicDetailsByTerritoryField = new XTypedList<SheetMusicDetailsByTerritory>(this, LinqToXsdTypeManager.Instance, XName.Get("SheetMusicDetailsByTerritory", ""));
                }
                return this.SheetMusicDetailsByTerritoryField;
            }
            set {
                if ((value == null)) {
                    this.SheetMusicDetailsByTerritoryField = null;
                }
                else {
                    if ((this.SheetMusicDetailsByTerritoryField == null)) {
                        this.SheetMusicDetailsByTerritoryField = XTypedList<SheetMusicDetailsByTerritory>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("SheetMusicDetailsByTerritory", ""));
                    }
                    else {
                        XTypedServices.SetList<SheetMusicDetailsByTerritory>(this.SheetMusicDetailsByTerritoryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ern:SheetMusic ddex:Element was updated (=True) or not (=False). The ddex:Flag may only be used when the ddex:UpdateIndicator is set to ddex:UpdateMessage. When this ddex:Boolean ddex:Flag is set to true, the ddex:MessageRecipient is expected to replace any previously provided ern:SheetMusic data with the now provided data.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsUpdated {
            get {
                XAttribute x = this.Attribute(XName.Get("IsUpdated", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("IsUpdated", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the ern:SheetMusic as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SheetMusic", "http://ddex.net/xml/ern/341");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SheetMusic>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("SheetMusicType", ""), typeof(ddex_net.xml._20120404.ddexC.SheetMusicType));
            localElementDictionary.Add(XName.Get("IsArtistRelated", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("SheetMusicId", ""), typeof(ddex_net.xml._20120404.ddexC.SheetMusicId));
            localElementDictionary.Add(XName.Get("IndirectSheetMusicId", ""), typeof(ddex_net.xml._20120404.ddexC.MusicalWorkId));
            localElementDictionary.Add(XName.Get("ResourceReference", ""), typeof(string));
            localElementDictionary.Add(XName.Get("LanguageOfLyrics", ""), typeof(string));
            localElementDictionary.Add(XName.Get("RightsAgreementId", ""), typeof(ddex_net.xml._20120404.ddexC.RightsAgreementId));
            localElementDictionary.Add(XName.Get("ResourceMusicalWorkReferenceList", ""), typeof(ddex_net.xml._20120404.ddexC.ResourceMusicalWorkReferenceList));
            localElementDictionary.Add(XName.Get("ResourceContainedResourceReferenceList", ""), typeof(ddex_net.xml._20120404.ddexC.ResourceContainedResourceReferenceList));
            localElementDictionary.Add(XName.Get("ReferenceTitle", ""), typeof(ddex_net.xml._20120404.ddexC.ReferenceTitle));
            localElementDictionary.Add(XName.Get("CreationDate", ""), typeof(ddex_net.xml._20120404.ddexC.EventDate));
            localElementDictionary.Add(XName.Get("SheetMusicDetailsByTerritory", ""), typeof(SheetMusicDetailsByTerritory));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class ResourceReferenceLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "A[\\d\\-_a-zA-Z]+"}, 0, XmlSchemaWhiteSpace.Collapse));
            
            private ResourceReferenceLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of ddex:Descriptors, Dates and other attributes of a ddex:SheetMusic which may vary according to ddex:Territory of release.
    /// </para>
    /// <para>
    /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, ResourceContributor*, IndirectResourceContributor*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?, FulfillmentDate?, Genre*, ParentalWarningType*, TechnicalSheetMusicDetails*)
    /// </para>
    /// </summary>
    public partial class SheetMusicDetailsByTerritory : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<object> TerritoryCodeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<object> ExcludedTerritoryCodeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Title> TitleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.ResourceContributor> ResourceContributorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.IndirectResourceContributor> IndirectResourceContributorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.CLine> CLineField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Genre> GenreField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.ParentalWarningType> ParentalWarningTypeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TechnicalSheetMusicDetails> TechnicalSheetMusicDetailsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator SheetMusicDetailsByTerritory(XElement xe) { return XTypedServices.ToXTypedElement<SheetMusicDetailsByTerritory>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SheetMusicDetailsByTerritory() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:Descriptors, Dates and other attributes of a ddex:SheetMusic which may vary according to ddex:Territory of release.
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, ResourceContributor*, IndirectResourceContributor*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?, FulfillmentDate?, Genre*, ParentalWarningType*, TechnicalSheetMusicDetails*)
        /// </para>
        /// </summary>
        public SheetMusicDetailsByTerritory() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Territory to which the ddex:SheetMusic details apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:ExcludedTerritory shall be present, but not both.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, ResourceContributor*, IndirectResourceContributor*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?, FulfillmentDate?, Genre*, ParentalWarningType*, TechnicalSheetMusicDetails*)
        /// </para>
        /// </summary>
        public IList<object> TerritoryCode {
            get {
                if ((this.TerritoryCodeField == null)) {
                    this.TerritoryCodeField = new XSimpleList<object>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, XName.Get("TerritoryCode", ""));
                }
                return this.TerritoryCodeField;
            }
            set {
                if ((value == null)) {
                    this.TerritoryCodeField = null;
                }
                else {
                    if ((this.TerritoryCodeField == null)) {
                        this.TerritoryCodeField = XSimpleList<object>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, value, XName.Get("TerritoryCode", ""));
                    }
                    else {
                        XTypedServices.SetList<System.Object>(this.TerritoryCodeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Territory to which the ddex:SheetMusic details do not apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:Territory shall be present, but not both.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, ResourceContributor*, IndirectResourceContributor*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?, FulfillmentDate?, Genre*, ParentalWarningType*, TechnicalSheetMusicDetails*)
        /// </para>
        /// </summary>
        public IList<object> ExcludedTerritoryCode {
            get {
                if ((this.ExcludedTerritoryCodeField == null)) {
                    this.ExcludedTerritoryCodeField = new XSimpleList<object>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, XName.Get("ExcludedTerritoryCode", ""));
                }
                return this.ExcludedTerritoryCodeField;
            }
            set {
                if ((value == null)) {
                    this.ExcludedTerritoryCodeField = null;
                }
                else {
                    if ((this.ExcludedTerritoryCodeField == null)) {
                        this.ExcludedTerritoryCodeField = XSimpleList<object>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, value, XName.Get("ExcludedTerritoryCode", ""));
                    }
                    else {
                        XTypedServices.SetList<System.Object>(this.ExcludedTerritoryCodeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Title of the ddex:SheetMusic.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, ResourceContributor*, IndirectResourceContributor*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?, FulfillmentDate?, Genre*, ParentalWarningType*, TechnicalSheetMusicDetails*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Title> Title {
            get {
                if ((this.TitleField == null)) {
                    this.TitleField = new XTypedList<ddex_net.xml._20120404.ddexC.Title>(this, LinqToXsdTypeManager.Instance, XName.Get("Title", ""));
                }
                return this.TitleField;
            }
            set {
                if ((value == null)) {
                    this.TitleField = null;
                }
                else {
                    if ((this.TitleField == null)) {
                        this.TitleField = XTypedList<ddex_net.xml._20120404.ddexC.Title>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Title", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Title>(this.TitleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Contributor to the ddex:SheetMusic.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, ResourceContributor*, IndirectResourceContributor*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?, FulfillmentDate?, Genre*, ParentalWarningType*, TechnicalSheetMusicDetails*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.ResourceContributor> ResourceContributor {
            get {
                if ((this.ResourceContributorField == null)) {
                    this.ResourceContributorField = new XTypedList<ddex_net.xml._20120404.ddexC.ResourceContributor>(this, LinqToXsdTypeManager.Instance, XName.Get("ResourceContributor", ""));
                }
                return this.ResourceContributorField;
            }
            set {
                if ((value == null)) {
                    this.ResourceContributorField = null;
                }
                else {
                    if ((this.ResourceContributorField == null)) {
                        this.ResourceContributorField = XTypedList<ddex_net.xml._20120404.ddexC.ResourceContributor>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ResourceContributor", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.ResourceContributor>(this.ResourceContributorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of an indirect ddex:Contributor to the ddex:SheetMusic.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, ResourceContributor*, IndirectResourceContributor*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?, FulfillmentDate?, Genre*, ParentalWarningType*, TechnicalSheetMusicDetails*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.IndirectResourceContributor> IndirectResourceContributor {
            get {
                if ((this.IndirectResourceContributorField == null)) {
                    this.IndirectResourceContributorField = new XTypedList<ddex_net.xml._20120404.ddexC.IndirectResourceContributor>(this, LinqToXsdTypeManager.Instance, XName.Get("IndirectResourceContributor", ""));
                }
                return this.IndirectResourceContributorField;
            }
            set {
                if ((value == null)) {
                    this.IndirectResourceContributorField = null;
                }
                else {
                    if ((this.IndirectResourceContributorField == null)) {
                        this.IndirectResourceContributorField = XTypedList<ddex_net.xml._20120404.ddexC.IndirectResourceContributor>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("IndirectResourceContributor", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.IndirectResourceContributor>(this.IndirectResourceContributorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:CLine for the ddex:SheetMusic.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, ResourceContributor*, IndirectResourceContributor*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?, FulfillmentDate?, Genre*, ParentalWarningType*, TechnicalSheetMusicDetails*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.CLine> CLine {
            get {
                if ((this.CLineField == null)) {
                    this.CLineField = new XTypedList<ddex_net.xml._20120404.ddexC.CLine>(this, LinqToXsdTypeManager.Instance, XName.Get("CLine", ""));
                }
                return this.CLineField;
            }
            set {
                if ((value == null)) {
                    this.CLineField = null;
                }
                else {
                    if ((this.CLineField == null)) {
                        this.CLineField = XTypedList<ddex_net.xml._20120404.ddexC.CLine>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CLine", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.CLine>(this.CLineField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing an ddex:Annotation which acknowledges record companies and/or other Parties giving permission for ddex:Artists or others featured in the ddex:SheetMusic.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, ResourceContributor*, IndirectResourceContributor*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?, FulfillmentDate?, Genre*, ParentalWarningType*, TechnicalSheetMusicDetails*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.CourtesyLine CourtesyLine {
            get {
                XElement x = this.GetElement(XName.Get("CourtesyLine", ""));
                return ((ddex_net.xml._20120404.ddexC.CourtesyLine)(x));
            }
            set {
                this.SetElement(XName.Get("CourtesyLine", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ddex:SheetMusic was originally published, whether for physical or electronic/online distribution.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, ResourceContributor*, IndirectResourceContributor*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?, FulfillmentDate?, Genre*, ParentalWarningType*, TechnicalSheetMusicDetails*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.EventDate OriginalResourceReleaseDate {
            get {
                XElement x = this.GetElement(XName.Get("OriginalResourceReleaseDate", ""));
                return ((ddex_net.xml._20120404.ddexC.EventDate)(x));
            }
            set {
                this.SetElement(XName.Get("OriginalResourceReleaseDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:FulfillmentDate.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, ResourceContributor*, IndirectResourceContributor*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?, FulfillmentDate?, Genre*, ParentalWarningType*, TechnicalSheetMusicDetails*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.FulfillmentDate FulfillmentDate {
            get {
                XElement x = this.GetElement(XName.Get("FulfillmentDate", ""));
                return ((ddex_net.xml._20120404.ddexC.FulfillmentDate)(x));
            }
            set {
                this.SetElement(XName.Get("FulfillmentDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Genre to which the ddex:SheetMusic belongs.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, ResourceContributor*, IndirectResourceContributor*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?, FulfillmentDate?, Genre*, ParentalWarningType*, TechnicalSheetMusicDetails*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Genre> Genre {
            get {
                if ((this.GenreField == null)) {
                    this.GenreField = new XTypedList<ddex_net.xml._20120404.ddexC.Genre>(this, LinqToXsdTypeManager.Instance, XName.Get("Genre", ""));
                }
                return this.GenreField;
            }
            set {
                if ((value == null)) {
                    this.GenreField = null;
                }
                else {
                    if ((this.GenreField == null)) {
                        this.GenreField = XTypedList<ddex_net.xml._20120404.ddexC.Genre>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Genre", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Genre>(this.GenreField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the classification of the ddex:SheetMusic according to advice which it carries about the level of explicitness or offensiveness of its content.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, ResourceContributor*, IndirectResourceContributor*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?, FulfillmentDate?, Genre*, ParentalWarningType*, TechnicalSheetMusicDetails*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.ParentalWarningType> ParentalWarningType {
            get {
                if ((this.ParentalWarningTypeField == null)) {
                    this.ParentalWarningTypeField = new XTypedList<ddex_net.xml._20120404.ddexC.ParentalWarningType>(this, LinqToXsdTypeManager.Instance, XName.Get("ParentalWarningType", ""));
                }
                return this.ParentalWarningTypeField;
            }
            set {
                if ((value == null)) {
                    this.ParentalWarningTypeField = null;
                }
                else {
                    if ((this.ParentalWarningTypeField == null)) {
                        this.ParentalWarningTypeField = XTypedList<ddex_net.xml._20120404.ddexC.ParentalWarningType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ParentalWarningType", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.ParentalWarningType>(this.ParentalWarningTypeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing technical details of the ddex:SheetMusic.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, ResourceContributor*, IndirectResourceContributor*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?, FulfillmentDate?, Genre*, ParentalWarningType*, TechnicalSheetMusicDetails*)
        /// </para>
        /// </summary>
        public IList<TechnicalSheetMusicDetails> TechnicalSheetMusicDetails {
            get {
                if ((this.TechnicalSheetMusicDetailsField == null)) {
                    this.TechnicalSheetMusicDetailsField = new XTypedList<TechnicalSheetMusicDetails>(this, LinqToXsdTypeManager.Instance, XName.Get("TechnicalSheetMusicDetails", ""));
                }
                return this.TechnicalSheetMusicDetailsField;
            }
            set {
                if ((value == null)) {
                    this.TechnicalSheetMusicDetailsField = null;
                }
                else {
                    if ((this.TechnicalSheetMusicDetailsField == null)) {
                        this.TechnicalSheetMusicDetailsField = XTypedList<TechnicalSheetMusicDetails>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("TechnicalSheetMusicDetails", ""));
                    }
                    else {
                        XTypedServices.SetList<TechnicalSheetMusicDetails>(this.TechnicalSheetMusicDetailsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the ddexC:SheetMusicDetailsByTerritory as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SheetMusicDetailsByTerritory", "http://ddex.net/xml/ern/341");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SheetMusicDetailsByTerritory>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("TerritoryCode", ""), typeof(object));
            localElementDictionary.Add(XName.Get("ExcludedTerritoryCode", ""), typeof(object));
            localElementDictionary.Add(XName.Get("Title", ""), typeof(ddex_net.xml._20120404.ddexC.Title));
            localElementDictionary.Add(XName.Get("ResourceContributor", ""), typeof(ddex_net.xml._20120404.ddexC.ResourceContributor));
            localElementDictionary.Add(XName.Get("IndirectResourceContributor", ""), typeof(ddex_net.xml._20120404.ddexC.IndirectResourceContributor));
            localElementDictionary.Add(XName.Get("CLine", ""), typeof(ddex_net.xml._20120404.ddexC.CLine));
            localElementDictionary.Add(XName.Get("CourtesyLine", ""), typeof(ddex_net.xml._20120404.ddexC.CourtesyLine));
            localElementDictionary.Add(XName.Get("OriginalResourceReleaseDate", ""), typeof(ddex_net.xml._20120404.ddexC.EventDate));
            localElementDictionary.Add(XName.Get("FulfillmentDate", ""), typeof(ddex_net.xml._20120404.ddexC.FulfillmentDate));
            localElementDictionary.Add(XName.Get("Genre", ""), typeof(ddex_net.xml._20120404.ddexC.Genre));
            localElementDictionary.Add(XName.Get("ParentalWarningType", ""), typeof(ddex_net.xml._20120404.ddexC.ParentalWarningType));
            localElementDictionary.Add(XName.Get("TechnicalSheetMusicDetails", ""), typeof(TechnicalSheetMusicDetails));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of an item of ddex:Software.
    /// </para>
    /// <para>
    /// Regular expression: (SoftwareType?, IsArtistRelated?, SoftwareId+, IndirectSoftwareId*, ResourceReference, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, Title*, CreationDate?, SoftwareDetailsByTerritory+)
    /// </para>
    /// </summary>
    public partial class Software : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.SoftwareId> SoftwareIdField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.MusicalWorkId> IndirectSoftwareIdField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Title> TitleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SoftwareDetailsByTerritory> SoftwareDetailsByTerritoryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Software(XElement xe) { return XTypedServices.ToXTypedElement<Software>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Software() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("SoftwareType", "")), new NamedContentModelEntity(XName.Get("IsArtistRelated", "")), new NamedContentModelEntity(XName.Get("SoftwareId", "")), new NamedContentModelEntity(XName.Get("IndirectSoftwareId", "")), new NamedContentModelEntity(XName.Get("ResourceReference", "")), new NamedContentModelEntity(XName.Get("ResourceMusicalWorkReferenceList", "")), new NamedContentModelEntity(XName.Get("ResourceContainedResourceReferenceList", "")), new NamedContentModelEntity(XName.Get("Title", "")), new NamedContentModelEntity(XName.Get("CreationDate", "")), new NamedContentModelEntity(XName.Get("SoftwareDetailsByTerritory", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of an item of ddex:Software.
        /// </para>
        /// <para>
        /// Regular expression: (SoftwareType?, IsArtistRelated?, SoftwareId+, IndirectSoftwareId*, ResourceReference, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, Title*, CreationDate?, SoftwareDetailsByTerritory+)
        /// </para>
        /// </summary>
        public Software() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:Type of the ern:Software.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SoftwareType?, IsArtistRelated?, SoftwareId+, IndirectSoftwareId*, ResourceReference, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, Title*, CreationDate?, SoftwareDetailsByTerritory+)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.SoftwareType SoftwareType {
            get {
                XElement x = this.GetElement(XName.Get("SoftwareType", ""));
                return ((ddex_net.xml._20120404.ddexC.SoftwareType)(x));
            }
            set {
                this.SetElement(XName.Get("SoftwareType", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ern:Software is related to an ddex:Artist (=True) or not (=False).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SoftwareType?, IsArtistRelated?, SoftwareId+, IndirectSoftwareId*, ResourceReference, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, Title*, CreationDate?, SoftwareDetailsByTerritory+)
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsArtistRelated {
            get {
                XElement x = this.GetElement(XName.Get("IsArtistRelated", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("IsArtistRelated", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:Identifiers of the ern:Software.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SoftwareType?, IsArtistRelated?, SoftwareId+, IndirectSoftwareId*, ResourceReference, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, Title*, CreationDate?, SoftwareDetailsByTerritory+)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.SoftwareId> SoftwareId {
            get {
                if ((this.SoftwareIdField == null)) {
                    this.SoftwareIdField = new XTypedList<ddex_net.xml._20120404.ddexC.SoftwareId>(this, LinqToXsdTypeManager.Instance, XName.Get("SoftwareId", ""));
                }
                return this.SoftwareIdField;
            }
            set {
                if ((value == null)) {
                    this.SoftwareIdField = null;
                }
                else {
                    if ((this.SoftwareIdField == null)) {
                        this.SoftwareIdField = XTypedList<ddex_net.xml._20120404.ddexC.SoftwareId>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("SoftwareId", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.SoftwareId>(this.SoftwareIdField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:MusicalWorkId of a ddex:MusicalWork used in the ern:Software.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SoftwareType?, IsArtistRelated?, SoftwareId+, IndirectSoftwareId*, ResourceReference, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, Title*, CreationDate?, SoftwareDetailsByTerritory+)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.MusicalWorkId> IndirectSoftwareId {
            get {
                if ((this.IndirectSoftwareIdField == null)) {
                    this.IndirectSoftwareIdField = new XTypedList<ddex_net.xml._20120404.ddexC.MusicalWorkId>(this, LinqToXsdTypeManager.Instance, XName.Get("IndirectSoftwareId", ""));
                }
                return this.IndirectSoftwareIdField;
            }
            set {
                if ((value == null)) {
                    this.IndirectSoftwareIdField = null;
                }
                else {
                    if ((this.IndirectSoftwareIdField == null)) {
                        this.IndirectSoftwareIdField = XTypedList<ddex_net.xml._20120404.ddexC.MusicalWorkId>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("IndirectSoftwareId", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.MusicalWorkId>(this.IndirectSoftwareIdField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Identifier (specific to the ddex:Message) of the ern:Software within the ddex:Release which contains it. This is a ddex:LocalResourceAnchor starting with the letter A.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SoftwareType?, IsArtistRelated?, SoftwareId+, IndirectSoftwareId*, ResourceReference, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, Title*, CreationDate?, SoftwareDetailsByTerritory+)
        /// </para>
        /// </summary>
        public string ResourceReference {
            get {
                XElement x = this.GetElement(XName.Get("ResourceReference", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("ResourceReference", ""), value, "ResourceReference", ResourceReferenceLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of one or more ddex:MusicalWorks contained in the ern:Software.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SoftwareType?, IsArtistRelated?, SoftwareId+, IndirectSoftwareId*, ResourceReference, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, Title*, CreationDate?, SoftwareDetailsByTerritory+)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.ResourceMusicalWorkReferenceList ResourceMusicalWorkReferenceList {
            get {
                XElement x = this.GetElement(XName.Get("ResourceMusicalWorkReferenceList", ""));
                return ((ddex_net.xml._20120404.ddexC.ResourceMusicalWorkReferenceList)(x));
            }
            set {
                this.SetElement(XName.Get("ResourceMusicalWorkReferenceList", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:ResourceContainedResourceReferences referring to a ddex:Resource that is contained in the current ern:Software.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SoftwareType?, IsArtistRelated?, SoftwareId+, IndirectSoftwareId*, ResourceReference, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, Title*, CreationDate?, SoftwareDetailsByTerritory+)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.ResourceContainedResourceReferenceList ResourceContainedResourceReferenceList {
            get {
                XElement x = this.GetElement(XName.Get("ResourceContainedResourceReferenceList", ""));
                return ((ddex_net.xml._20120404.ddexC.ResourceContainedResourceReferenceList)(x));
            }
            set {
                this.SetElement(XName.Get("ResourceContainedResourceReferenceList", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Title of the ern:Software.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SoftwareType?, IsArtistRelated?, SoftwareId+, IndirectSoftwareId*, ResourceReference, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, Title*, CreationDate?, SoftwareDetailsByTerritory+)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Title> Title {
            get {
                if ((this.TitleField == null)) {
                    this.TitleField = new XTypedList<ddex_net.xml._20120404.ddexC.Title>(this, LinqToXsdTypeManager.Instance, XName.Get("Title", ""));
                }
                return this.TitleField;
            }
            set {
                if ((value == null)) {
                    this.TitleField = null;
                }
                else {
                    if ((this.TitleField == null)) {
                        this.TitleField = XTypedList<ddex_net.xml._20120404.ddexC.Title>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Title", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Title>(this.TitleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ern:Software was created.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SoftwareType?, IsArtistRelated?, SoftwareId+, IndirectSoftwareId*, ResourceReference, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, Title*, CreationDate?, SoftwareDetailsByTerritory+)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.EventDate CreationDate {
            get {
                XElement x = this.GetElement(XName.Get("CreationDate", ""));
                return ((ddex_net.xml._20120404.ddexC.EventDate)(x));
            }
            set {
                this.SetElement(XName.Get("CreationDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ern:Software which may vary according to ddex:Territory of release.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SoftwareType?, IsArtistRelated?, SoftwareId+, IndirectSoftwareId*, ResourceReference, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, Title*, CreationDate?, SoftwareDetailsByTerritory+)
        /// </para>
        /// </summary>
        public IList<SoftwareDetailsByTerritory> SoftwareDetailsByTerritory {
            get {
                if ((this.SoftwareDetailsByTerritoryField == null)) {
                    this.SoftwareDetailsByTerritoryField = new XTypedList<SoftwareDetailsByTerritory>(this, LinqToXsdTypeManager.Instance, XName.Get("SoftwareDetailsByTerritory", ""));
                }
                return this.SoftwareDetailsByTerritoryField;
            }
            set {
                if ((value == null)) {
                    this.SoftwareDetailsByTerritoryField = null;
                }
                else {
                    if ((this.SoftwareDetailsByTerritoryField == null)) {
                        this.SoftwareDetailsByTerritoryField = XTypedList<SoftwareDetailsByTerritory>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("SoftwareDetailsByTerritory", ""));
                    }
                    else {
                        XTypedServices.SetList<SoftwareDetailsByTerritory>(this.SoftwareDetailsByTerritoryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ern:Software ddex:Element was updated (=True) or not (=False). The ddex:Flag may only be used when the ddex:UpdateIndicator is set to ddex:UpdateMessage. When this ddex:Boolean ddex:Flag is set to true, the ddex:MessageRecipient is expected to replace any previously provided ern:Software data with the now provided data.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsUpdated {
            get {
                XAttribute x = this.Attribute(XName.Get("IsUpdated", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("IsUpdated", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the ern:Software as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Software", "http://ddex.net/xml/ern/341");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Software>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("SoftwareType", ""), typeof(ddex_net.xml._20120404.ddexC.SoftwareType));
            localElementDictionary.Add(XName.Get("IsArtistRelated", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("SoftwareId", ""), typeof(ddex_net.xml._20120404.ddexC.SoftwareId));
            localElementDictionary.Add(XName.Get("IndirectSoftwareId", ""), typeof(ddex_net.xml._20120404.ddexC.MusicalWorkId));
            localElementDictionary.Add(XName.Get("ResourceReference", ""), typeof(string));
            localElementDictionary.Add(XName.Get("ResourceMusicalWorkReferenceList", ""), typeof(ddex_net.xml._20120404.ddexC.ResourceMusicalWorkReferenceList));
            localElementDictionary.Add(XName.Get("ResourceContainedResourceReferenceList", ""), typeof(ddex_net.xml._20120404.ddexC.ResourceContainedResourceReferenceList));
            localElementDictionary.Add(XName.Get("Title", ""), typeof(ddex_net.xml._20120404.ddexC.Title));
            localElementDictionary.Add(XName.Get("CreationDate", ""), typeof(ddex_net.xml._20120404.ddexC.EventDate));
            localElementDictionary.Add(XName.Get("SoftwareDetailsByTerritory", ""), typeof(SoftwareDetailsByTerritory));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class ResourceReferenceLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "A[\\d\\-_a-zA-Z]+"}, 0, XmlSchemaWhiteSpace.Collapse));
            
            private ResourceReferenceLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of ddex:Descriptors, Dates and other attributes of a ddex:Software application which may vary according to ddex:Territory of release.
    /// </para>
    /// <para>
    /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, PLine*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalSoftwareDetails*)
    /// </para>
    /// </summary>
    public partial class SoftwareDetailsByTerritory : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<object> TerritoryCodeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<object> ExcludedTerritoryCodeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.ResourceContributor> ResourceContributorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.IndirectResourceContributor> IndirectResourceContributorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.PLine> PLineField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.CLine> CLineField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Keywords> KeywordsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Genre> GenreField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.ParentalWarningType> ParentalWarningTypeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TechnicalSoftwareDetails> TechnicalSoftwareDetailsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator SoftwareDetailsByTerritory(XElement xe) { return XTypedServices.ToXTypedElement<SoftwareDetailsByTerritory>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SoftwareDetailsByTerritory() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:Descriptors, Dates and other attributes of a ddex:Software application which may vary according to ddex:Territory of release.
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, PLine*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalSoftwareDetails*)
        /// </para>
        /// </summary>
        public SoftwareDetailsByTerritory() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Territory to which the ddex:Software details apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:ExcludedTerritory shall be present, but not both. 
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, PLine*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalSoftwareDetails*)
        /// </para>
        /// </summary>
        public IList<object> TerritoryCode {
            get {
                if ((this.TerritoryCodeField == null)) {
                    this.TerritoryCodeField = new XSimpleList<object>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, XName.Get("TerritoryCode", ""));
                }
                return this.TerritoryCodeField;
            }
            set {
                if ((value == null)) {
                    this.TerritoryCodeField = null;
                }
                else {
                    if ((this.TerritoryCodeField == null)) {
                        this.TerritoryCodeField = XSimpleList<object>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, value, XName.Get("TerritoryCode", ""));
                    }
                    else {
                        XTypedServices.SetList<System.Object>(this.TerritoryCodeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Territory to which the ddex:Software details do not apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:Territory shall be present, but not both.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, PLine*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalSoftwareDetails*)
        /// </para>
        /// </summary>
        public IList<object> ExcludedTerritoryCode {
            get {
                if ((this.ExcludedTerritoryCodeField == null)) {
                    this.ExcludedTerritoryCodeField = new XSimpleList<object>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, XName.Get("ExcludedTerritoryCode", ""));
                }
                return this.ExcludedTerritoryCodeField;
            }
            set {
                if ((value == null)) {
                    this.ExcludedTerritoryCodeField = null;
                }
                else {
                    if ((this.ExcludedTerritoryCodeField == null)) {
                        this.ExcludedTerritoryCodeField = XSimpleList<object>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, value, XName.Get("ExcludedTerritoryCode", ""));
                    }
                    else {
                        XTypedServices.SetList<System.Object>(this.ExcludedTerritoryCodeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Contributor to the ddex:Software.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, PLine*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalSoftwareDetails*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.ResourceContributor> ResourceContributor {
            get {
                if ((this.ResourceContributorField == null)) {
                    this.ResourceContributorField = new XTypedList<ddex_net.xml._20120404.ddexC.ResourceContributor>(this, LinqToXsdTypeManager.Instance, XName.Get("ResourceContributor", ""));
                }
                return this.ResourceContributorField;
            }
            set {
                if ((value == null)) {
                    this.ResourceContributorField = null;
                }
                else {
                    if ((this.ResourceContributorField == null)) {
                        this.ResourceContributorField = XTypedList<ddex_net.xml._20120404.ddexC.ResourceContributor>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ResourceContributor", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.ResourceContributor>(this.ResourceContributorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of an indirect ddex:Contributor to the ddex:Software.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, PLine*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalSoftwareDetails*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.IndirectResourceContributor> IndirectResourceContributor {
            get {
                if ((this.IndirectResourceContributorField == null)) {
                    this.IndirectResourceContributorField = new XTypedList<ddex_net.xml._20120404.ddexC.IndirectResourceContributor>(this, LinqToXsdTypeManager.Instance, XName.Get("IndirectResourceContributor", ""));
                }
                return this.IndirectResourceContributorField;
            }
            set {
                if ((value == null)) {
                    this.IndirectResourceContributorField = null;
                }
                else {
                    if ((this.IndirectResourceContributorField == null)) {
                        this.IndirectResourceContributorField = XTypedList<ddex_net.xml._20120404.ddexC.IndirectResourceContributor>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("IndirectResourceContributor", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.IndirectResourceContributor>(this.IndirectResourceContributorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:PLine for the ddex:Software.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, PLine*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalSoftwareDetails*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.PLine> PLine {
            get {
                if ((this.PLineField == null)) {
                    this.PLineField = new XTypedList<ddex_net.xml._20120404.ddexC.PLine>(this, LinqToXsdTypeManager.Instance, XName.Get("PLine", ""));
                }
                return this.PLineField;
            }
            set {
                if ((value == null)) {
                    this.PLineField = null;
                }
                else {
                    if ((this.PLineField == null)) {
                        this.PLineField = XTypedList<ddex_net.xml._20120404.ddexC.PLine>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("PLine", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.PLine>(this.PLineField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:CLine for the ddex:Software.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, PLine*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalSoftwareDetails*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.CLine> CLine {
            get {
                if ((this.CLineField == null)) {
                    this.CLineField = new XTypedList<ddex_net.xml._20120404.ddexC.CLine>(this, LinqToXsdTypeManager.Instance, XName.Get("CLine", ""));
                }
                return this.CLineField;
            }
            set {
                if ((value == null)) {
                    this.CLineField = null;
                }
                else {
                    if ((this.CLineField == null)) {
                        this.CLineField = XTypedList<ddex_net.xml._20120404.ddexC.CLine>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CLine", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.CLine>(this.CLineField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing an ddex:Annotation which acknowledges record companies and/or other Parties giving permission for ddex:Artists or others featured in the ddex:Software.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, PLine*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalSoftwareDetails*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.CourtesyLine CourtesyLine {
            get {
                XElement x = this.GetElement(XName.Get("CourtesyLine", ""));
                return ((ddex_net.xml._20120404.ddexC.CourtesyLine)(x));
            }
            set {
                this.SetElement(XName.Get("CourtesyLine", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ddex:Software was originally published, whether for physical or electronic/online distribution.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, PLine*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalSoftwareDetails*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.EventDate OriginalResourceReleaseDate {
            get {
                XElement x = this.GetElement(XName.Get("OriginalResourceReleaseDate", ""));
                return ((ddex_net.xml._20120404.ddexC.EventDate)(x));
            }
            set {
                this.SetElement(XName.Get("OriginalResourceReleaseDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:FulfillmentDate.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, PLine*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalSoftwareDetails*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.FulfillmentDate FulfillmentDate {
            get {
                XElement x = this.GetElement(XName.Get("FulfillmentDate", ""));
                return ((ddex_net.xml._20120404.ddexC.FulfillmentDate)(x));
            }
            set {
                this.SetElement(XName.Get("FulfillmentDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Description of the ddex:Software containing ddex:Keywords.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, PLine*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalSoftwareDetails*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Keywords> Keywords {
            get {
                if ((this.KeywordsField == null)) {
                    this.KeywordsField = new XTypedList<ddex_net.xml._20120404.ddexC.Keywords>(this, LinqToXsdTypeManager.Instance, XName.Get("Keywords", ""));
                }
                return this.KeywordsField;
            }
            set {
                if ((value == null)) {
                    this.KeywordsField = null;
                }
                else {
                    if ((this.KeywordsField == null)) {
                        this.KeywordsField = XTypedList<ddex_net.xml._20120404.ddexC.Keywords>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Keywords", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Keywords>(this.KeywordsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Synopsis of the ddex:Software.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, PLine*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalSoftwareDetails*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.Synopsis Synopsis {
            get {
                XElement x = this.GetElement(XName.Get("Synopsis", ""));
                return ((ddex_net.xml._20120404.ddexC.Synopsis)(x));
            }
            set {
                this.SetElement(XName.Get("Synopsis", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Genre to which the ddex:Software belongs.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, PLine*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalSoftwareDetails*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Genre> Genre {
            get {
                if ((this.GenreField == null)) {
                    this.GenreField = new XTypedList<ddex_net.xml._20120404.ddexC.Genre>(this, LinqToXsdTypeManager.Instance, XName.Get("Genre", ""));
                }
                return this.GenreField;
            }
            set {
                if ((value == null)) {
                    this.GenreField = null;
                }
                else {
                    if ((this.GenreField == null)) {
                        this.GenreField = XTypedList<ddex_net.xml._20120404.ddexC.Genre>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Genre", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Genre>(this.GenreField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the classification of the ddex:Software according to advice which it carries about the level of explicitness or offensiveness of its content.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, PLine*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalSoftwareDetails*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.ParentalWarningType> ParentalWarningType {
            get {
                if ((this.ParentalWarningTypeField == null)) {
                    this.ParentalWarningTypeField = new XTypedList<ddex_net.xml._20120404.ddexC.ParentalWarningType>(this, LinqToXsdTypeManager.Instance, XName.Get("ParentalWarningType", ""));
                }
                return this.ParentalWarningTypeField;
            }
            set {
                if ((value == null)) {
                    this.ParentalWarningTypeField = null;
                }
                else {
                    if ((this.ParentalWarningTypeField == null)) {
                        this.ParentalWarningTypeField = XTypedList<ddex_net.xml._20120404.ddexC.ParentalWarningType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ParentalWarningType", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.ParentalWarningType>(this.ParentalWarningTypeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing technical details of the ddex:Software.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, PLine*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalSoftwareDetails*)
        /// </para>
        /// </summary>
        public IList<TechnicalSoftwareDetails> TechnicalSoftwareDetails {
            get {
                if ((this.TechnicalSoftwareDetailsField == null)) {
                    this.TechnicalSoftwareDetailsField = new XTypedList<TechnicalSoftwareDetails>(this, LinqToXsdTypeManager.Instance, XName.Get("TechnicalSoftwareDetails", ""));
                }
                return this.TechnicalSoftwareDetailsField;
            }
            set {
                if ((value == null)) {
                    this.TechnicalSoftwareDetailsField = null;
                }
                else {
                    if ((this.TechnicalSoftwareDetailsField == null)) {
                        this.TechnicalSoftwareDetailsField = XTypedList<TechnicalSoftwareDetails>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("TechnicalSoftwareDetails", ""));
                    }
                    else {
                        XTypedServices.SetList<TechnicalSoftwareDetails>(this.TechnicalSoftwareDetailsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the ddexC:SoftwareDetailsByTerritory as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SoftwareDetailsByTerritory", "http://ddex.net/xml/ern/341");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SoftwareDetailsByTerritory>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("TerritoryCode", ""), typeof(object));
            localElementDictionary.Add(XName.Get("ExcludedTerritoryCode", ""), typeof(object));
            localElementDictionary.Add(XName.Get("ResourceContributor", ""), typeof(ddex_net.xml._20120404.ddexC.ResourceContributor));
            localElementDictionary.Add(XName.Get("IndirectResourceContributor", ""), typeof(ddex_net.xml._20120404.ddexC.IndirectResourceContributor));
            localElementDictionary.Add(XName.Get("PLine", ""), typeof(ddex_net.xml._20120404.ddexC.PLine));
            localElementDictionary.Add(XName.Get("CLine", ""), typeof(ddex_net.xml._20120404.ddexC.CLine));
            localElementDictionary.Add(XName.Get("CourtesyLine", ""), typeof(ddex_net.xml._20120404.ddexC.CourtesyLine));
            localElementDictionary.Add(XName.Get("OriginalResourceReleaseDate", ""), typeof(ddex_net.xml._20120404.ddexC.EventDate));
            localElementDictionary.Add(XName.Get("FulfillmentDate", ""), typeof(ddex_net.xml._20120404.ddexC.FulfillmentDate));
            localElementDictionary.Add(XName.Get("Keywords", ""), typeof(ddex_net.xml._20120404.ddexC.Keywords));
            localElementDictionary.Add(XName.Get("Synopsis", ""), typeof(ddex_net.xml._20120404.ddexC.Synopsis));
            localElementDictionary.Add(XName.Get("Genre", ""), typeof(ddex_net.xml._20120404.ddexC.Genre));
            localElementDictionary.Add(XName.Get("ParentalWarningType", ""), typeof(ddex_net.xml._20120404.ddexC.ParentalWarningType));
            localElementDictionary.Add(XName.Get("TechnicalSoftwareDetails", ""), typeof(TechnicalSoftwareDetails));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:SoundRecording.
    /// </para>
    /// <para>
    /// Regular expression: (SoundRecordingType?, IsArtistRelated?, SoundRecordingId+, IndirectSoundRecordingId*, ResourceReference, ReferenceTitle, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, IsComputerGenerated?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance?, Duration, RightsAgreementId?, SoundRecordingCollectionReferenceList?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, SoundRecordingDetailsByTerritory+)
    /// </para>
    /// </summary>
    public partial class SoundRecording : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.SoundRecordingId> SoundRecordingIdField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.MusicalWorkId> IndirectSoundRecordingIdField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SoundRecordingDetailsByTerritory> SoundRecordingDetailsByTerritoryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator SoundRecording(XElement xe) { return XTypedServices.ToXTypedElement<SoundRecording>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SoundRecording() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("SoundRecordingType", "")), new NamedContentModelEntity(XName.Get("IsArtistRelated", "")), new NamedContentModelEntity(XName.Get("SoundRecordingId", "")), new NamedContentModelEntity(XName.Get("IndirectSoundRecordingId", "")), new NamedContentModelEntity(XName.Get("ResourceReference", "")), new NamedContentModelEntity(XName.Get("ReferenceTitle", "")), new NamedContentModelEntity(XName.Get("InstrumentationDescription", "")), new NamedContentModelEntity(XName.Get("IsMedley", "")), new NamedContentModelEntity(XName.Get("IsPotpourri", "")), new NamedContentModelEntity(XName.Get("IsInstrumental", "")), new NamedContentModelEntity(XName.Get("IsBackground", "")), new NamedContentModelEntity(XName.Get("IsHiddenResource", "")), new NamedContentModelEntity(XName.Get("IsBonusResource", "")), new NamedContentModelEntity(XName.Get("IsComputerGenerated", "")), new NamedContentModelEntity(XName.Get("NoSilenceBefore", "")), new NamedContentModelEntity(XName.Get("NoSilenceAfter", "")), new NamedContentModelEntity(XName.Get("PerformerInformationRequired", "")), new NamedContentModelEntity(XName.Get("LanguageOfPerformance", "")), new NamedContentModelEntity(XName.Get("Duration", "")), new NamedContentModelEntity(XName.Get("RightsAgreementId", "")), new NamedContentModelEntity(XName.Get("SoundRecordingCollectionReferenceList", "")), new NamedContentModelEntity(XName.Get("ResourceMusicalWorkReferenceList", "")), new NamedContentModelEntity(XName.Get("ResourceContainedResourceReferenceList", "")), new NamedContentModelEntity(XName.Get("CreationDate", "")), new NamedContentModelEntity(XName.Get("MasteredDate", "")), new NamedContentModelEntity(XName.Get("SoundRecordingDetailsByTerritory", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:SoundRecording.
        /// </para>
        /// <para>
        /// Regular expression: (SoundRecordingType?, IsArtistRelated?, SoundRecordingId+, IndirectSoundRecordingId*, ResourceReference, ReferenceTitle, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, IsComputerGenerated?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance?, Duration, RightsAgreementId?, SoundRecordingCollectionReferenceList?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, SoundRecordingDetailsByTerritory+)
        /// </para>
        /// </summary>
        public SoundRecording() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:Type of the ern:SoundRecording.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SoundRecordingType?, IsArtistRelated?, SoundRecordingId+, IndirectSoundRecordingId*, ResourceReference, ReferenceTitle, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, IsComputerGenerated?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance?, Duration, RightsAgreementId?, SoundRecordingCollectionReferenceList?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, SoundRecordingDetailsByTerritory+)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.SoundRecordingType SoundRecordingType {
            get {
                XElement x = this.GetElement(XName.Get("SoundRecordingType", ""));
                return ((ddex_net.xml._20120404.ddexC.SoundRecordingType)(x));
            }
            set {
                this.SetElement(XName.Get("SoundRecordingType", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ern:SoundRecording is related to an ddex:Artist (=True) or not (=False).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SoundRecordingType?, IsArtistRelated?, SoundRecordingId+, IndirectSoundRecordingId*, ResourceReference, ReferenceTitle, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, IsComputerGenerated?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance?, Duration, RightsAgreementId?, SoundRecordingCollectionReferenceList?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, SoundRecordingDetailsByTerritory+)
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsArtistRelated {
            get {
                XElement x = this.GetElement(XName.Get("IsArtistRelated", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("IsArtistRelated", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:SoundRecordingId.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SoundRecordingType?, IsArtistRelated?, SoundRecordingId+, IndirectSoundRecordingId*, ResourceReference, ReferenceTitle, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, IsComputerGenerated?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance?, Duration, RightsAgreementId?, SoundRecordingCollectionReferenceList?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, SoundRecordingDetailsByTerritory+)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.SoundRecordingId> SoundRecordingId {
            get {
                if ((this.SoundRecordingIdField == null)) {
                    this.SoundRecordingIdField = new XTypedList<ddex_net.xml._20120404.ddexC.SoundRecordingId>(this, LinqToXsdTypeManager.Instance, XName.Get("SoundRecordingId", ""));
                }
                return this.SoundRecordingIdField;
            }
            set {
                if ((value == null)) {
                    this.SoundRecordingIdField = null;
                }
                else {
                    if ((this.SoundRecordingIdField == null)) {
                        this.SoundRecordingIdField = XTypedList<ddex_net.xml._20120404.ddexC.SoundRecordingId>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("SoundRecordingId", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.SoundRecordingId>(this.SoundRecordingIdField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:MusicalWorkId of a ddex:MusicalWork used in the ern:SoundRecording.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SoundRecordingType?, IsArtistRelated?, SoundRecordingId+, IndirectSoundRecordingId*, ResourceReference, ReferenceTitle, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, IsComputerGenerated?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance?, Duration, RightsAgreementId?, SoundRecordingCollectionReferenceList?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, SoundRecordingDetailsByTerritory+)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.MusicalWorkId> IndirectSoundRecordingId {
            get {
                if ((this.IndirectSoundRecordingIdField == null)) {
                    this.IndirectSoundRecordingIdField = new XTypedList<ddex_net.xml._20120404.ddexC.MusicalWorkId>(this, LinqToXsdTypeManager.Instance, XName.Get("IndirectSoundRecordingId", ""));
                }
                return this.IndirectSoundRecordingIdField;
            }
            set {
                if ((value == null)) {
                    this.IndirectSoundRecordingIdField = null;
                }
                else {
                    if ((this.IndirectSoundRecordingIdField == null)) {
                        this.IndirectSoundRecordingIdField = XTypedList<ddex_net.xml._20120404.ddexC.MusicalWorkId>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("IndirectSoundRecordingId", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.MusicalWorkId>(this.IndirectSoundRecordingIdField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Identifier (specific to the ddex:Message) of the ern:SoundRecording within the ddex:Release which contains it. This is a ddex:LocalResourceAnchor starting with the letter A.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SoundRecordingType?, IsArtistRelated?, SoundRecordingId+, IndirectSoundRecordingId*, ResourceReference, ReferenceTitle, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, IsComputerGenerated?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance?, Duration, RightsAgreementId?, SoundRecordingCollectionReferenceList?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, SoundRecordingDetailsByTerritory+)
        /// </para>
        /// </summary>
        public string ResourceReference {
            get {
                XElement x = this.GetElement(XName.Get("ResourceReference", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("ResourceReference", ""), value, "ResourceReference", ResourceReferenceLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:ReferenceTitle of the ern:SoundRecording.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SoundRecordingType?, IsArtistRelated?, SoundRecordingId+, IndirectSoundRecordingId*, ResourceReference, ReferenceTitle, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, IsComputerGenerated?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance?, Duration, RightsAgreementId?, SoundRecordingCollectionReferenceList?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, SoundRecordingDetailsByTerritory+)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.ReferenceTitle ReferenceTitle {
            get {
                XElement x = this.GetElement(XName.Get("ReferenceTitle", ""));
                return ((ddex_net.xml._20120404.ddexC.ReferenceTitle)(x));
            }
            set {
                this.SetElement(XName.Get("ReferenceTitle", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a ddex:Description of the ddex:Type of instrumentation of the MusicalWork(s) in the ern:SoundRecording.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SoundRecordingType?, IsArtistRelated?, SoundRecordingId+, IndirectSoundRecordingId*, ResourceReference, ReferenceTitle, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, IsComputerGenerated?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance?, Duration, RightsAgreementId?, SoundRecordingCollectionReferenceList?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, SoundRecordingDetailsByTerritory+)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.Description InstrumentationDescription {
            get {
                XElement x = this.GetElement(XName.Get("InstrumentationDescription", ""));
                return ((ddex_net.xml._20120404.ddexC.Description)(x));
            }
            set {
                this.SetElement(XName.Get("InstrumentationDescription", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ern:SoundRecording is a ddex:Medley (=True) or not (=False).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SoundRecordingType?, IsArtistRelated?, SoundRecordingId+, IndirectSoundRecordingId*, ResourceReference, ReferenceTitle, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, IsComputerGenerated?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance?, Duration, RightsAgreementId?, SoundRecordingCollectionReferenceList?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, SoundRecordingDetailsByTerritory+)
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsMedley {
            get {
                XElement x = this.GetElement(XName.Get("IsMedley", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("IsMedley", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ern:SoundRecording is a ddex:Potpourri (=True) or not (=False).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SoundRecordingType?, IsArtistRelated?, SoundRecordingId+, IndirectSoundRecordingId*, ResourceReference, ReferenceTitle, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, IsComputerGenerated?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance?, Duration, RightsAgreementId?, SoundRecordingCollectionReferenceList?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, SoundRecordingDetailsByTerritory+)
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsPotpourri {
            get {
                XElement x = this.GetElement(XName.Get("IsPotpourri", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("IsPotpourri", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ern:SoundRecording is instrumental (=True) or not (=False).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SoundRecordingType?, IsArtistRelated?, SoundRecordingId+, IndirectSoundRecordingId*, ResourceReference, ReferenceTitle, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, IsComputerGenerated?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance?, Duration, RightsAgreementId?, SoundRecordingCollectionReferenceList?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, SoundRecordingDetailsByTerritory+)
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsInstrumental {
            get {
                XElement x = this.GetElement(XName.Get("IsInstrumental", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("IsInstrumental", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ern:SoundRecording is used as background to other audio or audiovisual material (=True) or not (=False).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SoundRecordingType?, IsArtistRelated?, SoundRecordingId+, IndirectSoundRecordingId*, ResourceReference, ReferenceTitle, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, IsComputerGenerated?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance?, Duration, RightsAgreementId?, SoundRecordingCollectionReferenceList?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, SoundRecordingDetailsByTerritory+)
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsBackground {
            get {
                XElement x = this.GetElement(XName.Get("IsBackground", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("IsBackground", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ern:SoundRecording is hidden in some way from the ddex:Consumer (=True) or not (=False).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SoundRecordingType?, IsArtistRelated?, SoundRecordingId+, IndirectSoundRecordingId*, ResourceReference, ReferenceTitle, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, IsComputerGenerated?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance?, Duration, RightsAgreementId?, SoundRecordingCollectionReferenceList?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, SoundRecordingDetailsByTerritory+)
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsHiddenResource {
            get {
                XElement x = this.GetElement(XName.Get("IsHiddenResource", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("IsHiddenResource", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ern:SoundRecording is additional to those on the original ddex:Release of which this is a ddex:Version (=True) or not (=False).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SoundRecordingType?, IsArtistRelated?, SoundRecordingId+, IndirectSoundRecordingId*, ResourceReference, ReferenceTitle, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, IsComputerGenerated?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance?, Duration, RightsAgreementId?, SoundRecordingCollectionReferenceList?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, SoundRecordingDetailsByTerritory+)
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsBonusResource {
            get {
                XElement x = this.GetElement(XName.Get("IsBonusResource", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("IsBonusResource", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ern:SoundRecording is generated by a computer (=True) or not (=False).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SoundRecordingType?, IsArtistRelated?, SoundRecordingId+, IndirectSoundRecordingId*, ResourceReference, ReferenceTitle, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, IsComputerGenerated?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance?, Duration, RightsAgreementId?, SoundRecordingCollectionReferenceList?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, SoundRecordingDetailsByTerritory+)
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsComputerGenerated {
            get {
                XElement x = this.GetElement(XName.Get("IsComputerGenerated", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("IsComputerGenerated", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ern:SoundRecording is preceded by a period of silence (=False) or not (=True). 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SoundRecordingType?, IsArtistRelated?, SoundRecordingId+, IndirectSoundRecordingId*, ResourceReference, ReferenceTitle, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, IsComputerGenerated?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance?, Duration, RightsAgreementId?, SoundRecordingCollectionReferenceList?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, SoundRecordingDetailsByTerritory+)
        /// </para>
        /// </summary>
        public System.Nullable<bool> NoSilenceBefore {
            get {
                XElement x = this.GetElement(XName.Get("NoSilenceBefore", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("NoSilenceBefore", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ern:SoundRecording is followed by a period of silence (=False) or not (=True). 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SoundRecordingType?, IsArtistRelated?, SoundRecordingId+, IndirectSoundRecordingId*, ResourceReference, ReferenceTitle, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, IsComputerGenerated?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance?, Duration, RightsAgreementId?, SoundRecordingCollectionReferenceList?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, SoundRecordingDetailsByTerritory+)
        /// </para>
        /// </summary>
        public System.Nullable<bool> NoSilenceAfter {
            get {
                XElement x = this.GetElement(XName.Get("NoSilenceAfter", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("NoSilenceAfter", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Flag indicating whether performer information is required (=True) or not (=False) when communicating details of the ern:SoundRecording.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SoundRecordingType?, IsArtistRelated?, SoundRecordingId+, IndirectSoundRecordingId*, ResourceReference, ReferenceTitle, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, IsComputerGenerated?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance?, Duration, RightsAgreementId?, SoundRecordingCollectionReferenceList?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, SoundRecordingDetailsByTerritory+)
        /// </para>
        /// </summary>
        public System.Nullable<bool> PerformerInformationRequired {
            get {
                XElement x = this.GetElement(XName.Get("PerformerInformationRequired", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("PerformerInformationRequired", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language of the ddex:Performance recorded in the ern:SoundRecording (represented by an ISO 639-2 iso639a2:LanguageCode).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SoundRecordingType?, IsArtistRelated?, SoundRecordingId+, IndirectSoundRecordingId*, ResourceReference, ReferenceTitle, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, IsComputerGenerated?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance?, Duration, RightsAgreementId?, SoundRecordingCollectionReferenceList?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, SoundRecordingDetailsByTerritory+)
        /// </para>
        /// </summary>
        public string LanguageOfPerformance {
            get {
                XElement x = this.GetElement(XName.Get("LanguageOfPerformance", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("LanguageOfPerformance", ""), value, "LanguageOfPerformance", global::ddex_net.xml._20120404.iso639a2.LanguageCode.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Duration of the ern:SoundRecording (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SoundRecordingType?, IsArtistRelated?, SoundRecordingId+, IndirectSoundRecordingId*, ResourceReference, ReferenceTitle, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, IsComputerGenerated?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance?, Duration, RightsAgreementId?, SoundRecordingCollectionReferenceList?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, SoundRecordingDetailsByTerritory+)
        /// </para>
        /// </summary>
        public System.TimeSpan Duration {
            get {
                XElement x = this.GetElement(XName.Get("Duration", ""));
                return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
            set {
                this.SetElement(XName.Get("Duration", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:Identifiers of a ddex:License, ddex:Claim, ddex:RightShare or contract for the MusicalWork(s) used in the ern:SoundRecording.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SoundRecordingType?, IsArtistRelated?, SoundRecordingId+, IndirectSoundRecordingId*, ResourceReference, ReferenceTitle, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, IsComputerGenerated?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance?, Duration, RightsAgreementId?, SoundRecordingCollectionReferenceList?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, SoundRecordingDetailsByTerritory+)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.RightsAgreementId RightsAgreementId {
            get {
                XElement x = this.GetElement(XName.Get("RightsAgreementId", ""));
                return ((ddex_net.xml._20120404.ddexC.RightsAgreementId)(x));
            }
            set {
                this.SetElement(XName.Get("RightsAgreementId", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of one or more ddex:Collections. The referenced ddex:Collection has to be of ddex:CollectionType ddex:AudioChapter.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SoundRecordingType?, IsArtistRelated?, SoundRecordingId+, IndirectSoundRecordingId*, ResourceReference, ReferenceTitle, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, IsComputerGenerated?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance?, Duration, RightsAgreementId?, SoundRecordingCollectionReferenceList?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, SoundRecordingDetailsByTerritory+)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.SoundRecordingCollectionReferenceList SoundRecordingCollectionReferenceList {
            get {
                XElement x = this.GetElement(XName.Get("SoundRecordingCollectionReferenceList", ""));
                return ((ddex_net.xml._20120404.ddexC.SoundRecordingCollectionReferenceList)(x));
            }
            set {
                this.SetElement(XName.Get("SoundRecordingCollectionReferenceList", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of one or more ddex:MusicalWorks contained in the ern:SoundRecording.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SoundRecordingType?, IsArtistRelated?, SoundRecordingId+, IndirectSoundRecordingId*, ResourceReference, ReferenceTitle, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, IsComputerGenerated?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance?, Duration, RightsAgreementId?, SoundRecordingCollectionReferenceList?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, SoundRecordingDetailsByTerritory+)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.ResourceMusicalWorkReferenceList ResourceMusicalWorkReferenceList {
            get {
                XElement x = this.GetElement(XName.Get("ResourceMusicalWorkReferenceList", ""));
                return ((ddex_net.xml._20120404.ddexC.ResourceMusicalWorkReferenceList)(x));
            }
            set {
                this.SetElement(XName.Get("ResourceMusicalWorkReferenceList", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:ResourceContainedResourceReferences referring to a ddex:Resource that is contained in the current ern:SoundRecording.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SoundRecordingType?, IsArtistRelated?, SoundRecordingId+, IndirectSoundRecordingId*, ResourceReference, ReferenceTitle, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, IsComputerGenerated?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance?, Duration, RightsAgreementId?, SoundRecordingCollectionReferenceList?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, SoundRecordingDetailsByTerritory+)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.ResourceContainedResourceReferenceList ResourceContainedResourceReferenceList {
            get {
                XElement x = this.GetElement(XName.Get("ResourceContainedResourceReferenceList", ""));
                return ((ddex_net.xml._20120404.ddexC.ResourceContainedResourceReferenceList)(x));
            }
            set {
                this.SetElement(XName.Get("ResourceContainedResourceReferenceList", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ern:SoundRecording was created.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SoundRecordingType?, IsArtistRelated?, SoundRecordingId+, IndirectSoundRecordingId*, ResourceReference, ReferenceTitle, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, IsComputerGenerated?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance?, Duration, RightsAgreementId?, SoundRecordingCollectionReferenceList?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, SoundRecordingDetailsByTerritory+)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.EventDate CreationDate {
            get {
                XElement x = this.GetElement(XName.Get("CreationDate", ""));
                return ((ddex_net.xml._20120404.ddexC.EventDate)(x));
            }
            set {
                this.SetElement(XName.Get("CreationDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ern:SoundRecording was originally mastered (in either analogue or digital form).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SoundRecordingType?, IsArtistRelated?, SoundRecordingId+, IndirectSoundRecordingId*, ResourceReference, ReferenceTitle, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, IsComputerGenerated?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance?, Duration, RightsAgreementId?, SoundRecordingCollectionReferenceList?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, SoundRecordingDetailsByTerritory+)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.EventDate MasteredDate {
            get {
                XElement x = this.GetElement(XName.Get("MasteredDate", ""));
                return ((ddex_net.xml._20120404.ddexC.EventDate)(x));
            }
            set {
                this.SetElement(XName.Get("MasteredDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:Descriptors and other attributes of the ern:SoundRecording which may vary according to ddex:Territory.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SoundRecordingType?, IsArtistRelated?, SoundRecordingId+, IndirectSoundRecordingId*, ResourceReference, ReferenceTitle, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, IsComputerGenerated?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance?, Duration, RightsAgreementId?, SoundRecordingCollectionReferenceList?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, SoundRecordingDetailsByTerritory+)
        /// </para>
        /// </summary>
        public IList<SoundRecordingDetailsByTerritory> SoundRecordingDetailsByTerritory {
            get {
                if ((this.SoundRecordingDetailsByTerritoryField == null)) {
                    this.SoundRecordingDetailsByTerritoryField = new XTypedList<SoundRecordingDetailsByTerritory>(this, LinqToXsdTypeManager.Instance, XName.Get("SoundRecordingDetailsByTerritory", ""));
                }
                return this.SoundRecordingDetailsByTerritoryField;
            }
            set {
                if ((value == null)) {
                    this.SoundRecordingDetailsByTerritoryField = null;
                }
                else {
                    if ((this.SoundRecordingDetailsByTerritoryField == null)) {
                        this.SoundRecordingDetailsByTerritoryField = XTypedList<SoundRecordingDetailsByTerritory>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("SoundRecordingDetailsByTerritory", ""));
                    }
                    else {
                        XTypedServices.SetList<SoundRecordingDetailsByTerritory>(this.SoundRecordingDetailsByTerritoryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ern:SoundRecording ddex:Element was updated (=True) or not (=False). The ddex:Flag may only be used when the ddex:UpdateIndicator is set to ddex:UpdateMessage. When this ddex:Boolean ddex:Flag is set to true, the ddex:MessageRecipient is expected to replace any previously provided ern:SoundRecording data with the now provided data.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsUpdated {
            get {
                XAttribute x = this.Attribute(XName.Get("IsUpdated", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("IsUpdated", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the ern:SoundRecording as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SoundRecording", "http://ddex.net/xml/ern/341");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SoundRecording>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("SoundRecordingType", ""), typeof(ddex_net.xml._20120404.ddexC.SoundRecordingType));
            localElementDictionary.Add(XName.Get("IsArtistRelated", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("SoundRecordingId", ""), typeof(ddex_net.xml._20120404.ddexC.SoundRecordingId));
            localElementDictionary.Add(XName.Get("IndirectSoundRecordingId", ""), typeof(ddex_net.xml._20120404.ddexC.MusicalWorkId));
            localElementDictionary.Add(XName.Get("ResourceReference", ""), typeof(string));
            localElementDictionary.Add(XName.Get("ReferenceTitle", ""), typeof(ddex_net.xml._20120404.ddexC.ReferenceTitle));
            localElementDictionary.Add(XName.Get("InstrumentationDescription", ""), typeof(ddex_net.xml._20120404.ddexC.Description));
            localElementDictionary.Add(XName.Get("IsMedley", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("IsPotpourri", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("IsInstrumental", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("IsBackground", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("IsHiddenResource", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("IsBonusResource", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("IsComputerGenerated", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("NoSilenceBefore", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("NoSilenceAfter", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("PerformerInformationRequired", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("LanguageOfPerformance", ""), typeof(string));
            localElementDictionary.Add(XName.Get("Duration", ""), typeof(System.TimeSpan));
            localElementDictionary.Add(XName.Get("RightsAgreementId", ""), typeof(ddex_net.xml._20120404.ddexC.RightsAgreementId));
            localElementDictionary.Add(XName.Get("SoundRecordingCollectionReferenceList", ""), typeof(ddex_net.xml._20120404.ddexC.SoundRecordingCollectionReferenceList));
            localElementDictionary.Add(XName.Get("ResourceMusicalWorkReferenceList", ""), typeof(ddex_net.xml._20120404.ddexC.ResourceMusicalWorkReferenceList));
            localElementDictionary.Add(XName.Get("ResourceContainedResourceReferenceList", ""), typeof(ddex_net.xml._20120404.ddexC.ResourceContainedResourceReferenceList));
            localElementDictionary.Add(XName.Get("CreationDate", ""), typeof(ddex_net.xml._20120404.ddexC.EventDate));
            localElementDictionary.Add(XName.Get("MasteredDate", ""), typeof(ddex_net.xml._20120404.ddexC.EventDate));
            localElementDictionary.Add(XName.Get("SoundRecordingDetailsByTerritory", ""), typeof(SoundRecordingDetailsByTerritory));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class ResourceReferenceLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "A[\\d\\-_a-zA-Z]+"}, 0, XmlSchemaWhiteSpace.Collapse));
            
            private ResourceReferenceLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of ddex:Descriptors and other attributes of a ddex:SoundRecording which may vary according to ddex:Territory of release.
    /// </para>
    /// <para>
    /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, AvRating*, TechnicalSoundRecordingDetails*, FulfillmentDate?, Keywords*, Synopsis?)
    /// </para>
    /// </summary>
    public partial class SoundRecordingDetailsByTerritory : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<object> TerritoryCodeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<object> ExcludedTerritoryCodeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Title> TitleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Artist> DisplayArtistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.ResourceContributor> ResourceContributorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.IndirectResourceContributor> IndirectResourceContributorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.LabelName> LabelNameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.RightsController> RightsControllerField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.PLine> PLineField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.HostSoundCarrier> HostSoundCarrierField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Genre> GenreField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.ParentalWarningType> ParentalWarningTypeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.AvRating> AvRatingField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TechnicalSoundRecordingDetails> TechnicalSoundRecordingDetailsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Keywords> KeywordsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator SoundRecordingDetailsByTerritory(XElement xe) { return XTypedServices.ToXTypedElement<SoundRecordingDetailsByTerritory>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SoundRecordingDetailsByTerritory() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:Descriptors and other attributes of a ddex:SoundRecording which may vary according to ddex:Territory of release.
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, AvRating*, TechnicalSoundRecordingDetails*, FulfillmentDate?, Keywords*, Synopsis?)
        /// </para>
        /// </summary>
        public SoundRecordingDetailsByTerritory() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Territory to which the ddex:SoundRecording details apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:ExcludedTerritory shall be present, but not both. 
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, AvRating*, TechnicalSoundRecordingDetails*, FulfillmentDate?, Keywords*, Synopsis?)
        /// </para>
        /// </summary>
        public IList<object> TerritoryCode {
            get {
                if ((this.TerritoryCodeField == null)) {
                    this.TerritoryCodeField = new XSimpleList<object>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, XName.Get("TerritoryCode", ""));
                }
                return this.TerritoryCodeField;
            }
            set {
                if ((value == null)) {
                    this.TerritoryCodeField = null;
                }
                else {
                    if ((this.TerritoryCodeField == null)) {
                        this.TerritoryCodeField = XSimpleList<object>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, value, XName.Get("TerritoryCode", ""));
                    }
                    else {
                        XTypedServices.SetList<System.Object>(this.TerritoryCodeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Territory to which the ddex:SoundRecording details do not apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:Territory shall be present, but not both.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, AvRating*, TechnicalSoundRecordingDetails*, FulfillmentDate?, Keywords*, Synopsis?)
        /// </para>
        /// </summary>
        public IList<object> ExcludedTerritoryCode {
            get {
                if ((this.ExcludedTerritoryCodeField == null)) {
                    this.ExcludedTerritoryCodeField = new XSimpleList<object>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, XName.Get("ExcludedTerritoryCode", ""));
                }
                return this.ExcludedTerritoryCodeField;
            }
            set {
                if ((value == null)) {
                    this.ExcludedTerritoryCodeField = null;
                }
                else {
                    if ((this.ExcludedTerritoryCodeField == null)) {
                        this.ExcludedTerritoryCodeField = XSimpleList<object>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, value, XName.Get("ExcludedTerritoryCode", ""));
                    }
                    else {
                        XTypedServices.SetList<System.Object>(this.ExcludedTerritoryCodeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Title of the ddex:SoundRecording.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, AvRating*, TechnicalSoundRecordingDetails*, FulfillmentDate?, Keywords*, Synopsis?)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Title> Title {
            get {
                if ((this.TitleField == null)) {
                    this.TitleField = new XTypedList<ddex_net.xml._20120404.ddexC.Title>(this, LinqToXsdTypeManager.Instance, XName.Get("Title", ""));
                }
                return this.TitleField;
            }
            set {
                if ((value == null)) {
                    this.TitleField = null;
                }
                else {
                    if ((this.TitleField == null)) {
                        this.TitleField = XTypedList<ddex_net.xml._20120404.ddexC.Title>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Title", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Title>(this.TitleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:DisplayArtist for the ddex:SoundRecording. The ddex:DisplayArtist may be described through ddex:Name, ddex:Identifier and Roles.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, AvRating*, TechnicalSoundRecordingDetails*, FulfillmentDate?, Keywords*, Synopsis?)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Artist> DisplayArtist {
            get {
                if ((this.DisplayArtistField == null)) {
                    this.DisplayArtistField = new XTypedList<ddex_net.xml._20120404.ddexC.Artist>(this, LinqToXsdTypeManager.Instance, XName.Get("DisplayArtist", ""));
                }
                return this.DisplayArtistField;
            }
            set {
                if ((value == null)) {
                    this.DisplayArtistField = null;
                }
                else {
                    if ((this.DisplayArtistField == null)) {
                        this.DisplayArtistField = XTypedList<ddex_net.xml._20120404.ddexC.Artist>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("DisplayArtist", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Artist>(this.DisplayArtistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Contributor to the ddex:SoundRecording.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, AvRating*, TechnicalSoundRecordingDetails*, FulfillmentDate?, Keywords*, Synopsis?)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.ResourceContributor> ResourceContributor {
            get {
                if ((this.ResourceContributorField == null)) {
                    this.ResourceContributorField = new XTypedList<ddex_net.xml._20120404.ddexC.ResourceContributor>(this, LinqToXsdTypeManager.Instance, XName.Get("ResourceContributor", ""));
                }
                return this.ResourceContributorField;
            }
            set {
                if ((value == null)) {
                    this.ResourceContributorField = null;
                }
                else {
                    if ((this.ResourceContributorField == null)) {
                        this.ResourceContributorField = XTypedList<ddex_net.xml._20120404.ddexC.ResourceContributor>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ResourceContributor", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.ResourceContributor>(this.ResourceContributorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of an indirect ddex:Contributor to the ddex:SoundRecording.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, AvRating*, TechnicalSoundRecordingDetails*, FulfillmentDate?, Keywords*, Synopsis?)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.IndirectResourceContributor> IndirectResourceContributor {
            get {
                if ((this.IndirectResourceContributorField == null)) {
                    this.IndirectResourceContributorField = new XTypedList<ddex_net.xml._20120404.ddexC.IndirectResourceContributor>(this, LinqToXsdTypeManager.Instance, XName.Get("IndirectResourceContributor", ""));
                }
                return this.IndirectResourceContributorField;
            }
            set {
                if ((value == null)) {
                    this.IndirectResourceContributorField = null;
                }
                else {
                    if ((this.IndirectResourceContributorField == null)) {
                        this.IndirectResourceContributorField = XTypedList<ddex_net.xml._20120404.ddexC.IndirectResourceContributor>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("IndirectResourceContributor", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.IndirectResourceContributor>(this.IndirectResourceContributorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:Identifiers of a ddex:License, ddex:Claim, ddex:RightShare or contract for the MusicalWork(s) used in the ddex:SoundRecording.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, AvRating*, TechnicalSoundRecordingDetails*, FulfillmentDate?, Keywords*, Synopsis?)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.RightsAgreementId RightsAgreementId {
            get {
                XElement x = this.GetElement(XName.Get("RightsAgreementId", ""));
                return ((ddex_net.xml._20120404.ddexC.RightsAgreementId)(x));
            }
            set {
                this.SetElement(XName.Get("RightsAgreementId", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing the ddex:Name of the ddex:Label under which the ddex:Release is to be marketed.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, AvRating*, TechnicalSoundRecordingDetails*, FulfillmentDate?, Keywords*, Synopsis?)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.LabelName> LabelName {
            get {
                if ((this.LabelNameField == null)) {
                    this.LabelNameField = new XTypedList<ddex_net.xml._20120404.ddexC.LabelName>(this, LinqToXsdTypeManager.Instance, XName.Get("LabelName", ""));
                }
                return this.LabelNameField;
            }
            set {
                if ((value == null)) {
                    this.LabelNameField = null;
                }
                else {
                    if ((this.LabelNameField == null)) {
                        this.LabelNameField = XTypedList<ddex_net.xml._20120404.ddexC.LabelName>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("LabelName", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.LabelName>(this.LabelNameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:RightsController of Rights in the ddex:SoundRecording.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, AvRating*, TechnicalSoundRecordingDetails*, FulfillmentDate?, Keywords*, Synopsis?)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.RightsController> RightsController {
            get {
                if ((this.RightsControllerField == null)) {
                    this.RightsControllerField = new XTypedList<ddex_net.xml._20120404.ddexC.RightsController>(this, LinqToXsdTypeManager.Instance, XName.Get("RightsController", ""));
                }
                return this.RightsControllerField;
            }
            set {
                if ((value == null)) {
                    this.RightsControllerField = null;
                }
                else {
                    if ((this.RightsControllerField == null)) {
                        this.RightsControllerField = XTypedList<ddex_net.xml._20120404.ddexC.RightsController>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("RightsController", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.RightsController>(this.RightsControllerField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ddex:SoundRecording was re-mastered (usually digitally).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, AvRating*, TechnicalSoundRecordingDetails*, FulfillmentDate?, Keywords*, Synopsis?)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.EventDate RemasteredDate {
            get {
                XElement x = this.GetElement(XName.Get("RemasteredDate", ""));
                return ((ddex_net.xml._20120404.ddexC.EventDate)(x));
            }
            set {
                this.SetElement(XName.Get("RemasteredDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ddex:SoundRecording was originally published, whether for physical or electronic/online distribution.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, AvRating*, TechnicalSoundRecordingDetails*, FulfillmentDate?, Keywords*, Synopsis?)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.EventDate OriginalResourceReleaseDate {
            get {
                XElement x = this.GetElement(XName.Get("OriginalResourceReleaseDate", ""));
                return ((ddex_net.xml._20120404.ddexC.EventDate)(x));
            }
            set {
                this.SetElement(XName.Get("OriginalResourceReleaseDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:PLine for the ddex:SoundRecording.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, AvRating*, TechnicalSoundRecordingDetails*, FulfillmentDate?, Keywords*, Synopsis?)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.PLine> PLine {
            get {
                if ((this.PLineField == null)) {
                    this.PLineField = new XTypedList<ddex_net.xml._20120404.ddexC.PLine>(this, LinqToXsdTypeManager.Instance, XName.Get("PLine", ""));
                }
                return this.PLineField;
            }
            set {
                if ((value == null)) {
                    this.PLineField = null;
                }
                else {
                    if ((this.PLineField == null)) {
                        this.PLineField = XTypedList<ddex_net.xml._20120404.ddexC.PLine>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("PLine", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.PLine>(this.PLineField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing an ddex:Annotation which acknowledges record companies and/or other Parties giving permission for guests ddex:Artists or others featured on the ddex:SoundRecording.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, AvRating*, TechnicalSoundRecordingDetails*, FulfillmentDate?, Keywords*, Synopsis?)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.CourtesyLine CourtesyLine {
            get {
                XElement x = this.GetElement(XName.Get("CourtesyLine", ""));
                return ((ddex_net.xml._20120404.ddexC.CourtesyLine)(x));
            }
            set {
                this.SetElement(XName.Get("CourtesyLine", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The number indicating the order of the ddex:SoundRecording in a group of ddex:SoundRecordings in a ddex:Release.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, AvRating*, TechnicalSoundRecordingDetails*, FulfillmentDate?, Keywords*, Synopsis?)
        /// </para>
        /// </summary>
        public string SequenceNumber {
            get {
                XElement x = this.GetElement(XName.Get("SequenceNumber", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("SequenceNumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:HostSoundCarrier on which the ddex:SoundRecording appears (e.g., the CD on which it was originally released). This ddex:Composite exists in the Release Notification Message Suite Standard, to support the identification and matching of ddex:SoundRecording information.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, AvRating*, TechnicalSoundRecordingDetails*, FulfillmentDate?, Keywords*, Synopsis?)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.HostSoundCarrier> HostSoundCarrier {
            get {
                if ((this.HostSoundCarrierField == null)) {
                    this.HostSoundCarrierField = new XTypedList<ddex_net.xml._20120404.ddexC.HostSoundCarrier>(this, LinqToXsdTypeManager.Instance, XName.Get("HostSoundCarrier", ""));
                }
                return this.HostSoundCarrierField;
            }
            set {
                if ((value == null)) {
                    this.HostSoundCarrierField = null;
                }
                else {
                    if ((this.HostSoundCarrierField == null)) {
                        this.HostSoundCarrierField = XTypedList<ddex_net.xml._20120404.ddexC.HostSoundCarrier>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("HostSoundCarrier", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.HostSoundCarrier>(this.HostSoundCarrierField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a ddex:Comment about the promotion and marketing of the ddex:SoundRecording.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, AvRating*, TechnicalSoundRecordingDetails*, FulfillmentDate?, Keywords*, Synopsis?)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.Comment MarketingComment {
            get {
                XElement x = this.GetElement(XName.Get("MarketingComment", ""));
                return ((ddex_net.xml._20120404.ddexC.Comment)(x));
            }
            set {
                this.SetElement(XName.Get("MarketingComment", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Genre to which the ddex:SoundRecording belongs.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, AvRating*, TechnicalSoundRecordingDetails*, FulfillmentDate?, Keywords*, Synopsis?)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Genre> Genre {
            get {
                if ((this.GenreField == null)) {
                    this.GenreField = new XTypedList<ddex_net.xml._20120404.ddexC.Genre>(this, LinqToXsdTypeManager.Instance, XName.Get("Genre", ""));
                }
                return this.GenreField;
            }
            set {
                if ((value == null)) {
                    this.GenreField = null;
                }
                else {
                    if ((this.GenreField == null)) {
                        this.GenreField = XTypedList<ddex_net.xml._20120404.ddexC.Genre>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Genre", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Genre>(this.GenreField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the classification of the ddex:SoundRecording according to advice which it carries about the level of explicitness or offensiveness of its content.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, AvRating*, TechnicalSoundRecordingDetails*, FulfillmentDate?, Keywords*, Synopsis?)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.ParentalWarningType> ParentalWarningType {
            get {
                if ((this.ParentalWarningTypeField == null)) {
                    this.ParentalWarningTypeField = new XTypedList<ddex_net.xml._20120404.ddexC.ParentalWarningType>(this, LinqToXsdTypeManager.Instance, XName.Get("ParentalWarningType", ""));
                }
                return this.ParentalWarningTypeField;
            }
            set {
                if ((value == null)) {
                    this.ParentalWarningTypeField = null;
                }
                else {
                    if ((this.ParentalWarningTypeField == null)) {
                        this.ParentalWarningTypeField = XTypedList<ddex_net.xml._20120404.ddexC.ParentalWarningType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ParentalWarningType", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.ParentalWarningType>(this.ParentalWarningTypeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a rating for the ddex:SoundRecording.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, AvRating*, TechnicalSoundRecordingDetails*, FulfillmentDate?, Keywords*, Synopsis?)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.AvRating> AvRating {
            get {
                if ((this.AvRatingField == null)) {
                    this.AvRatingField = new XTypedList<ddex_net.xml._20120404.ddexC.AvRating>(this, LinqToXsdTypeManager.Instance, XName.Get("AvRating", ""));
                }
                return this.AvRatingField;
            }
            set {
                if ((value == null)) {
                    this.AvRatingField = null;
                }
                else {
                    if ((this.AvRatingField == null)) {
                        this.AvRatingField = XTypedList<ddex_net.xml._20120404.ddexC.AvRating>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("AvRating", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.AvRating>(this.AvRatingField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing technical details of the ddex:SoundRecording.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, AvRating*, TechnicalSoundRecordingDetails*, FulfillmentDate?, Keywords*, Synopsis?)
        /// </para>
        /// </summary>
        public IList<TechnicalSoundRecordingDetails> TechnicalSoundRecordingDetails {
            get {
                if ((this.TechnicalSoundRecordingDetailsField == null)) {
                    this.TechnicalSoundRecordingDetailsField = new XTypedList<TechnicalSoundRecordingDetails>(this, LinqToXsdTypeManager.Instance, XName.Get("TechnicalSoundRecordingDetails", ""));
                }
                return this.TechnicalSoundRecordingDetailsField;
            }
            set {
                if ((value == null)) {
                    this.TechnicalSoundRecordingDetailsField = null;
                }
                else {
                    if ((this.TechnicalSoundRecordingDetailsField == null)) {
                        this.TechnicalSoundRecordingDetailsField = XTypedList<TechnicalSoundRecordingDetails>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("TechnicalSoundRecordingDetails", ""));
                    }
                    else {
                        XTypedServices.SetList<TechnicalSoundRecordingDetails>(this.TechnicalSoundRecordingDetailsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:FulfillmentDate.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, AvRating*, TechnicalSoundRecordingDetails*, FulfillmentDate?, Keywords*, Synopsis?)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.FulfillmentDate FulfillmentDate {
            get {
                XElement x = this.GetElement(XName.Get("FulfillmentDate", ""));
                return ((ddex_net.xml._20120404.ddexC.FulfillmentDate)(x));
            }
            set {
                this.SetElement(XName.Get("FulfillmentDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Description of the ddex:SoundRecording containing ddex:Keywords.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, AvRating*, TechnicalSoundRecordingDetails*, FulfillmentDate?, Keywords*, Synopsis?)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Keywords> Keywords {
            get {
                if ((this.KeywordsField == null)) {
                    this.KeywordsField = new XTypedList<ddex_net.xml._20120404.ddexC.Keywords>(this, LinqToXsdTypeManager.Instance, XName.Get("Keywords", ""));
                }
                return this.KeywordsField;
            }
            set {
                if ((value == null)) {
                    this.KeywordsField = null;
                }
                else {
                    if ((this.KeywordsField == null)) {
                        this.KeywordsField = XTypedList<ddex_net.xml._20120404.ddexC.Keywords>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Keywords", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Keywords>(this.KeywordsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Synopsis of the ddex:SoundRecording.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, AvRating*, TechnicalSoundRecordingDetails*, FulfillmentDate?, Keywords*, Synopsis?)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.Synopsis Synopsis {
            get {
                XElement x = this.GetElement(XName.Get("Synopsis", ""));
                return ((ddex_net.xml._20120404.ddexC.Synopsis)(x));
            }
            set {
                this.SetElement(XName.Get("Synopsis", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the ddexC:SoundRecordingDetailsByTerritory as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SoundRecordingDetailsByTerritory", "http://ddex.net/xml/ern/341");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SoundRecordingDetailsByTerritory>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("TerritoryCode", ""), typeof(object));
            localElementDictionary.Add(XName.Get("ExcludedTerritoryCode", ""), typeof(object));
            localElementDictionary.Add(XName.Get("Title", ""), typeof(ddex_net.xml._20120404.ddexC.Title));
            localElementDictionary.Add(XName.Get("DisplayArtist", ""), typeof(ddex_net.xml._20120404.ddexC.Artist));
            localElementDictionary.Add(XName.Get("ResourceContributor", ""), typeof(ddex_net.xml._20120404.ddexC.ResourceContributor));
            localElementDictionary.Add(XName.Get("IndirectResourceContributor", ""), typeof(ddex_net.xml._20120404.ddexC.IndirectResourceContributor));
            localElementDictionary.Add(XName.Get("RightsAgreementId", ""), typeof(ddex_net.xml._20120404.ddexC.RightsAgreementId));
            localElementDictionary.Add(XName.Get("LabelName", ""), typeof(ddex_net.xml._20120404.ddexC.LabelName));
            localElementDictionary.Add(XName.Get("RightsController", ""), typeof(ddex_net.xml._20120404.ddexC.RightsController));
            localElementDictionary.Add(XName.Get("RemasteredDate", ""), typeof(ddex_net.xml._20120404.ddexC.EventDate));
            localElementDictionary.Add(XName.Get("OriginalResourceReleaseDate", ""), typeof(ddex_net.xml._20120404.ddexC.EventDate));
            localElementDictionary.Add(XName.Get("PLine", ""), typeof(ddex_net.xml._20120404.ddexC.PLine));
            localElementDictionary.Add(XName.Get("CourtesyLine", ""), typeof(ddex_net.xml._20120404.ddexC.CourtesyLine));
            localElementDictionary.Add(XName.Get("SequenceNumber", ""), typeof(string));
            localElementDictionary.Add(XName.Get("HostSoundCarrier", ""), typeof(ddex_net.xml._20120404.ddexC.HostSoundCarrier));
            localElementDictionary.Add(XName.Get("MarketingComment", ""), typeof(ddex_net.xml._20120404.ddexC.Comment));
            localElementDictionary.Add(XName.Get("Genre", ""), typeof(ddex_net.xml._20120404.ddexC.Genre));
            localElementDictionary.Add(XName.Get("ParentalWarningType", ""), typeof(ddex_net.xml._20120404.ddexC.ParentalWarningType));
            localElementDictionary.Add(XName.Get("AvRating", ""), typeof(ddex_net.xml._20120404.ddexC.AvRating));
            localElementDictionary.Add(XName.Get("TechnicalSoundRecordingDetails", ""), typeof(TechnicalSoundRecordingDetails));
            localElementDictionary.Add(XName.Get("FulfillmentDate", ""), typeof(ddex_net.xml._20120404.ddexC.FulfillmentDate));
            localElementDictionary.Add(XName.Get("Keywords", ""), typeof(ddex_net.xml._20120404.ddexC.Keywords));
            localElementDictionary.Add(XName.Get("Synopsis", ""), typeof(ddex_net.xml._20120404.ddexC.Synopsis));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a preview.
    /// </para>
    /// <para>
    /// Regular expression: (PartType?, StartPoint?, EndPoint?, Duration?, TopLeftCorner?, BottomRightCorner?, ExpressionType)
    /// </para>
    /// </summary>
    public partial class SoundRecordingPreviewDetails : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator SoundRecordingPreviewDetails(XElement xe) { return XTypedServices.ToXTypedElement<SoundRecordingPreviewDetails>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SoundRecordingPreviewDetails() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("PartType", "")), new NamedContentModelEntity(XName.Get("StartPoint", "")), new NamedContentModelEntity(XName.Get("EndPoint", "")), new NamedContentModelEntity(XName.Get("Duration", "")), new NamedContentModelEntity(XName.Get("TopLeftCorner", "")), new NamedContentModelEntity(XName.Get("BottomRightCorner", "")), new NamedContentModelEntity(XName.Get("ExpressionType", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a preview.
        /// </para>
        /// <para>
        /// Regular expression: (PartType?, StartPoint?, EndPoint?, Duration?, TopLeftCorner?, BottomRightCorner?, ExpressionType)
        /// </para>
        /// </summary>
        public SoundRecordingPreviewDetails() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a ddex:Description of the ddex:Type of ddex:Part that the preview relates to, e.g. chorus or intro.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PartType?, StartPoint?, EndPoint?, Duration?, TopLeftCorner?, BottomRightCorner?, ExpressionType)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.Description PartType {
            get {
                XElement x = this.GetElement(XName.Get("PartType", ""));
                return ((ddex_net.xml._20120404.ddexC.Description)(x));
            }
            set {
                this.SetElement(XName.Get("PartType", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The start point of the preview given in seconds from the start of the ddex:Resource.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PartType?, StartPoint?, EndPoint?, Duration?, TopLeftCorner?, BottomRightCorner?, ExpressionType)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> StartPoint {
            get {
                XElement x = this.GetElement(XName.Get("StartPoint", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElement(XName.Get("StartPoint", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The end point of the preview given in seconds from the start of the ddex:Resource.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PartType?, StartPoint?, EndPoint?, Duration?, TopLeftCorner?, BottomRightCorner?, ExpressionType)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> EndPoint {
            get {
                XElement x = this.GetElement(XName.Get("EndPoint", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElement(XName.Get("EndPoint", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Duration of the preview, measured from the StartPoint.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PartType?, StartPoint?, EndPoint?, Duration?, TopLeftCorner?, BottomRightCorner?, ExpressionType)
        /// </para>
        /// </summary>
        public System.Nullable<System.TimeSpan> Duration {
            get {
                XElement x = this.GetElement(XName.Get("Duration", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
            set {
                this.SetElement(XName.Get("Duration", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The position of the preview measured in ddex:Pixels or millimetres from the top left corner of the ddex:Resource.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PartType?, StartPoint?, EndPoint?, Duration?, TopLeftCorner?, BottomRightCorner?, ExpressionType)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> TopLeftCorner {
            get {
                XElement x = this.GetElement(XName.Get("TopLeftCorner", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElement(XName.Get("TopLeftCorner", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The position of the preview measured in ddex:Pixels or millimetres  from the bottom right corner of the ddex:Resource.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PartType?, StartPoint?, EndPoint?, Duration?, TopLeftCorner?, BottomRightCorner?, ExpressionType)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> BottomRightCorner {
            get {
                XElement x = this.GetElement(XName.Get("BottomRightCorner", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElement(XName.Get("BottomRightCorner", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Type of expression indicating how this should be perceived, e.g. as instruction (meaning that this has to be done to create the preview) or as information (meaning that this has been done to craete the preview).
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (PartType?, StartPoint?, EndPoint?, Duration?, TopLeftCorner?, BottomRightCorner?, ExpressionType)
        /// </para>
        /// </summary>
        public string ExpressionType {
            get {
                XElement x = this.GetElement(XName.Get("ExpressionType", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("ExpressionType", ""), value, "ExpressionType", global::ddex_net.xml._20120404.ddex.ExpressionType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SoundRecordingPreviewDetails", "http://ddex.net/xml/ern/341");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SoundRecordingPreviewDetails>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("PartType", ""), typeof(ddex_net.xml._20120404.ddexC.Description));
            localElementDictionary.Add(XName.Get("StartPoint", ""), typeof(decimal));
            localElementDictionary.Add(XName.Get("EndPoint", ""), typeof(decimal));
            localElementDictionary.Add(XName.Get("Duration", ""), typeof(System.TimeSpan));
            localElementDictionary.Add(XName.Get("TopLeftCorner", ""), typeof(decimal));
            localElementDictionary.Add(XName.Get("BottomRightCorner", ""), typeof(decimal));
            localElementDictionary.Add(XName.Get("ExpressionType", ""), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing technical details of a ddex:Image.
    /// </para>
    /// <para>
    /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, ImageCodecType?, ImageHeight?, ImageWidth?, AspectRatio?, ColorDepth?, ImageResolution?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
    /// </para>
    /// </summary>
    public partial class TechnicalImageDetails : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Description> FileAvailabilityDescriptionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.File> FileField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Fingerprint> FingerprintField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator TechnicalImageDetails(XElement xe) { return XTypedServices.ToXTypedElement<TechnicalImageDetails>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TechnicalImageDetails() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing technical details of a ddex:Image.
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, ImageCodecType?, ImageHeight?, ImageWidth?, AspectRatio?, ColorDepth?, ImageResolution?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public TechnicalImageDetails() {
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Identifier (specific to the ddex:Message) of the ern:TechnicalImageDetails within the ddex:Release which contains it. This is a ddex:LocalTechnicalResourceDetailsAnchor starting with the letter T.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, ImageCodecType?, ImageHeight?, ImageWidth?, AspectRatio?, ColorDepth?, ImageResolution?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public string TechnicalResourceDetailsReference {
            get {
                XElement x = this.GetElement(XName.Get("TechnicalResourceDetailsReference", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("TechnicalResourceDetailsReference", ""), value, "TechnicalResourceDetailsReference", TechnicalResourceDetailsReferenceLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Type of ddex:DrmPlatform.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, ImageCodecType?, ImageHeight?, ImageWidth?, AspectRatio?, ColorDepth?, ImageResolution?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.DrmPlatformType DrmPlatformType {
            get {
                XElement x = this.GetElement(XName.Get("DrmPlatformType", ""));
                return ((ddex_net.xml._20120404.ddexC.DrmPlatformType)(x));
            }
            set {
                this.SetElement(XName.Get("DrmPlatformType", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:ContainerFormat.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, ImageCodecType?, ImageHeight?, ImageWidth?, AspectRatio?, ColorDepth?, ImageResolution?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.ContainerFormat ContainerFormat {
            get {
                XElement x = this.GetElement(XName.Get("ContainerFormat", ""));
                return ((ddex_net.xml._20120404.ddexC.ContainerFormat)(x));
            }
            set {
                this.SetElement(XName.Get("ContainerFormat", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Type of ddex:ImageCodec.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, ImageCodecType?, ImageHeight?, ImageWidth?, AspectRatio?, ColorDepth?, ImageResolution?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.ImageCodecType ImageCodecType {
            get {
                XElement x = this.GetElement(XName.Get("ImageCodecType", ""));
                return ((ddex_net.xml._20120404.ddexC.ImageCodecType)(x));
            }
            set {
                this.SetElement(XName.Get("ImageCodecType", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing the vertical ddex:Extent of an ddex:Image of the ddex:Image and a ddex:UnitOfMeasure (the default is pixels).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, ImageCodecType?, ImageHeight?, ImageWidth?, AspectRatio?, ColorDepth?, ImageResolution?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.Extent ImageHeight {
            get {
                XElement x = this.GetElement(XName.Get("ImageHeight", ""));
                return ((ddex_net.xml._20120404.ddexC.Extent)(x));
            }
            set {
                this.SetElement(XName.Get("ImageHeight", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing the horizontal ddex:Extent of an ddex:Image of the ddex:Image and a ddex:UnitOfMeasure (the default is pixels).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, ImageCodecType?, ImageHeight?, ImageWidth?, AspectRatio?, ColorDepth?, ImageResolution?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.Extent ImageWidth {
            get {
                XElement x = this.GetElement(XName.Get("ImageWidth", ""));
                return ((ddex_net.xml._20120404.ddexC.Extent)(x));
            }
            set {
                this.SetElement(XName.Get("ImageWidth", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ratio formed by dividing the ddex:ImageHeight by the ddex:ImageWidth.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, ImageCodecType?, ImageHeight?, ImageWidth?, AspectRatio?, ColorDepth?, ImageResolution?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> AspectRatio {
            get {
                XElement x = this.GetElement(XName.Get("AspectRatio", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElement(XName.Get("AspectRatio", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// An amount of data determining the color of a pixel of the ddex:Image (given in bits per pixel).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, ImageCodecType?, ImageHeight?, ImageWidth?, AspectRatio?, ColorDepth?, ImageResolution?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ColorDepth {
            get {
                XElement x = this.GetElement(XName.Get("ColorDepth", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElement(XName.Get("ColorDepth", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A number of pixels of the ddex:Image displayed in a specific spatial range (given in dpi).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, ImageCodecType?, ImageHeight?, ImageWidth?, AspectRatio?, ColorDepth?, ImageResolution?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ImageResolution {
            get {
                XElement x = this.GetElement(XName.Get("ImageResolution", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElement(XName.Get("ImageResolution", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ddex:Image is technically a preview of the parent ddex:Resource (=True) or not (=False). Note that nothing can be implied from this element as to the conditions under which the preview can be made available.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, ImageCodecType?, ImageHeight?, ImageWidth?, AspectRatio?, ColorDepth?, ImageResolution?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsPreview {
            get {
                XElement x = this.GetElement(XName.Get("IsPreview", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("IsPreview", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a preview.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, ImageCodecType?, ImageHeight?, ImageWidth?, AspectRatio?, ColorDepth?, ImageResolution?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public PreviewDetails PreviewDetails {
            get {
                XElement x = this.GetElement(XName.Get("PreviewDetails", ""));
                return ((PreviewDetails)(x));
            }
            set {
                this.SetElement(XName.Get("PreviewDetails", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:FulfillmentDate.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, ImageCodecType?, ImageHeight?, ImageWidth?, AspectRatio?, ColorDepth?, ImageResolution?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.FulfillmentDate FulfillmentDate {
            get {
                XElement x = this.GetElement(XName.Get("FulfillmentDate", ""));
                return ((ddex_net.xml._20120404.ddexC.FulfillmentDate)(x));
            }
            set {
                this.SetElement(XName.Get("FulfillmentDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of when a consumer is able to get hold of the ddex:Image.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, ImageCodecType?, ImageHeight?, ImageWidth?, AspectRatio?, ColorDepth?, ImageResolution?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.FulfillmentDate ConsumerFulfillmentDate {
            get {
                XElement x = this.GetElement(XName.Get("ConsumerFulfillmentDate", ""));
                return ((ddex_net.xml._20120404.ddexC.FulfillmentDate)(x));
            }
            set {
                this.SetElement(XName.Get("ConsumerFulfillmentDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a ddex:Description providing details of how a ddex:DSP can obtain a ddex:File that contains the ddex:Image.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, ImageCodecType?, ImageHeight?, ImageWidth?, AspectRatio?, ColorDepth?, ImageResolution?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Description> FileAvailabilityDescription {
            get {
                if ((this.FileAvailabilityDescriptionField == null)) {
                    this.FileAvailabilityDescriptionField = new XTypedList<ddex_net.xml._20120404.ddexC.Description>(this, LinqToXsdTypeManager.Instance, XName.Get("FileAvailabilityDescription", ""));
                }
                return this.FileAvailabilityDescriptionField;
            }
            set {
                if ((value == null)) {
                    this.FileAvailabilityDescriptionField = null;
                }
                else {
                    if ((this.FileAvailabilityDescriptionField == null)) {
                        this.FileAvailabilityDescriptionField = XTypedList<ddex_net.xml._20120404.ddexC.Description>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("FileAvailabilityDescription", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Description>(this.FileAvailabilityDescriptionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:File containing the ddex:Image that a ddex:DSP can obtain.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, ImageCodecType?, ImageHeight?, ImageWidth?, AspectRatio?, ColorDepth?, ImageResolution?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.File> File {
            get {
                if ((this.FileField == null)) {
                    this.FileField = new XTypedList<ddex_net.xml._20120404.ddexC.File>(this, LinqToXsdTypeManager.Instance, XName.Get("File", ""));
                }
                return this.FileField;
            }
            set {
                if ((value == null)) {
                    this.FileField = null;
                }
                else {
                    if ((this.FileField == null)) {
                        this.FileField = XTypedList<ddex_net.xml._20120404.ddexC.File>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("File", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.File>(this.FileField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Fingerprint and its governing algorithm.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, ImageCodecType?, ImageHeight?, ImageWidth?, AspectRatio?, ColorDepth?, ImageResolution?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Fingerprint> Fingerprint {
            get {
                if ((this.FingerprintField == null)) {
                    this.FingerprintField = new XTypedList<ddex_net.xml._20120404.ddexC.Fingerprint>(this, LinqToXsdTypeManager.Instance, XName.Get("Fingerprint", ""));
                }
                return this.FingerprintField;
            }
            set {
                if ((value == null)) {
                    this.FingerprintField = null;
                }
                else {
                    if ((this.FingerprintField == null)) {
                        this.FingerprintField = XTypedList<ddex_net.xml._20120404.ddexC.Fingerprint>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Fingerprint", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Fingerprint>(this.FingerprintField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the ern:TechnicalImageDetails as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("TechnicalImageDetails", "http://ddex.net/xml/ern/341");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TechnicalImageDetails>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("TechnicalResourceDetailsReference", ""), typeof(string));
            localElementDictionary.Add(XName.Get("DrmPlatformType", ""), typeof(ddex_net.xml._20120404.ddexC.DrmPlatformType));
            localElementDictionary.Add(XName.Get("ContainerFormat", ""), typeof(ddex_net.xml._20120404.ddexC.ContainerFormat));
            localElementDictionary.Add(XName.Get("ImageCodecType", ""), typeof(ddex_net.xml._20120404.ddexC.ImageCodecType));
            localElementDictionary.Add(XName.Get("ImageHeight", ""), typeof(ddex_net.xml._20120404.ddexC.Extent));
            localElementDictionary.Add(XName.Get("ImageWidth", ""), typeof(ddex_net.xml._20120404.ddexC.Extent));
            localElementDictionary.Add(XName.Get("AspectRatio", ""), typeof(decimal));
            localElementDictionary.Add(XName.Get("ColorDepth", ""), typeof(decimal));
            localElementDictionary.Add(XName.Get("ImageResolution", ""), typeof(decimal));
            localElementDictionary.Add(XName.Get("IsPreview", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("PreviewDetails", ""), typeof(PreviewDetails));
            localElementDictionary.Add(XName.Get("FulfillmentDate", ""), typeof(ddex_net.xml._20120404.ddexC.FulfillmentDate));
            localElementDictionary.Add(XName.Get("ConsumerFulfillmentDate", ""), typeof(ddex_net.xml._20120404.ddexC.FulfillmentDate));
            localElementDictionary.Add(XName.Get("FileAvailabilityDescription", ""), typeof(ddex_net.xml._20120404.ddexC.Description));
            localElementDictionary.Add(XName.Get("File", ""), typeof(ddex_net.xml._20120404.ddexC.File));
            localElementDictionary.Add(XName.Get("Fingerprint", ""), typeof(ddex_net.xml._20120404.ddexC.Fingerprint));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        private class TechnicalResourceDetailsReferenceLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "T[\\d\\-_a-zA-Z]+"}, 0, XmlSchemaWhiteSpace.Collapse));
            
            private TechnicalResourceDetailsReferenceLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing technical details of a ddex:MIDI.
    /// </para>
    /// <para>
    /// Regular expression: (TechnicalResourceDetailsReference, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, NumberOfVoices?, SoundProcessorType?, Fingerprint*)
    /// </para>
    /// </summary>
    public partial class TechnicalMidiDetails : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Description> FileAvailabilityDescriptionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.File> FileField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Fingerprint> FingerprintField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator TechnicalMidiDetails(XElement xe) { return XTypedServices.ToXTypedElement<TechnicalMidiDetails>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TechnicalMidiDetails() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing technical details of a ddex:MIDI.
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, NumberOfVoices?, SoundProcessorType?, Fingerprint*)
        /// </para>
        /// </summary>
        public TechnicalMidiDetails() {
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Identifier (specific to the ddex:Message) of the ern:TechnicalMidiDetails within the ddex:Release which contains it. This is a ddex:LocalTechnicalResourceDetailsAnchor starting with the letter T.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, NumberOfVoices?, SoundProcessorType?, Fingerprint*)
        /// </para>
        /// </summary>
        public string TechnicalResourceDetailsReference {
            get {
                XElement x = this.GetElement(XName.Get("TechnicalResourceDetailsReference", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("TechnicalResourceDetailsReference", ""), value, "TechnicalResourceDetailsReference", TechnicalResourceDetailsReferenceLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Duration of the instantiation of the ern:MIDI if this differs from the ddex:Duration provided for the ern:MIDI itself (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S). This element must only be used if and when there are no royalty reporting implications on this change in duration and when the specific technical instantiation is a clip taken from a technical instantiation representing the whole ern:MIDI.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, NumberOfVoices?, SoundProcessorType?, Fingerprint*)
        /// </para>
        /// </summary>
        public System.Nullable<System.TimeSpan> Duration {
            get {
                XElement x = this.GetElement(XName.Get("Duration", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
            set {
                this.SetElement(XName.Get("Duration", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ern:MIDI needs to be processed (=True) or not (=False) (typically: transcoded) by the ddex:MessageRecipient before being delivered to ddex:Consumers.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, NumberOfVoices?, SoundProcessorType?, Fingerprint*)
        /// </para>
        /// </summary>
        public System.Nullable<bool> ResourceProcessingRequired {
            get {
                XElement x = this.GetElement(XName.Get("ResourceProcessingRequired", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("ResourceProcessingRequired", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Duration of the ern:MIDI that may be sold to a ddex:Consumer if the ern:MIDI provided is not intended to be provided to ddex:Consumers 'as is' but will need to be transcoded into an appropriate format by the ddex:MessageRecipient or any other ddex:DSP handling the ddex:Release before it is sold (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, NumberOfVoices?, SoundProcessorType?, Fingerprint*)
        /// </para>
        /// </summary>
        public System.Nullable<System.TimeSpan> UsableResourceDuration {
            get {
                XElement x = this.GetElement(XName.Get("UsableResourceDuration", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
            set {
                this.SetElement(XName.Get("UsableResourceDuration", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ddex:MIDI is technically a preview of the parent ddex:Resource (=True) or not (=False). Note that nothing can be implied from this element as to the conditions under which the preview can be made available.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, NumberOfVoices?, SoundProcessorType?, Fingerprint*)
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsPreview {
            get {
                XElement x = this.GetElement(XName.Get("IsPreview", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("IsPreview", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a preview.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, NumberOfVoices?, SoundProcessorType?, Fingerprint*)
        /// </para>
        /// </summary>
        public SoundRecordingPreviewDetails PreviewDetails {
            get {
                XElement x = this.GetElement(XName.Get("PreviewDetails", ""));
                return ((SoundRecordingPreviewDetails)(x));
            }
            set {
                this.SetElement(XName.Get("PreviewDetails", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:FulfillmentDate.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, NumberOfVoices?, SoundProcessorType?, Fingerprint*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.FulfillmentDate FulfillmentDate {
            get {
                XElement x = this.GetElement(XName.Get("FulfillmentDate", ""));
                return ((ddex_net.xml._20120404.ddexC.FulfillmentDate)(x));
            }
            set {
                this.SetElement(XName.Get("FulfillmentDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of when a consumer is able to get hold of the ddex:MIDI.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, NumberOfVoices?, SoundProcessorType?, Fingerprint*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.FulfillmentDate ConsumerFulfillmentDate {
            get {
                XElement x = this.GetElement(XName.Get("ConsumerFulfillmentDate", ""));
                return ((ddex_net.xml._20120404.ddexC.FulfillmentDate)(x));
            }
            set {
                this.SetElement(XName.Get("ConsumerFulfillmentDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a ddex:Description providing details of how a ddex:DSP can obtain a ddex:File that contains the ddex:MIDI.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, NumberOfVoices?, SoundProcessorType?, Fingerprint*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Description> FileAvailabilityDescription {
            get {
                if ((this.FileAvailabilityDescriptionField == null)) {
                    this.FileAvailabilityDescriptionField = new XTypedList<ddex_net.xml._20120404.ddexC.Description>(this, LinqToXsdTypeManager.Instance, XName.Get("FileAvailabilityDescription", ""));
                }
                return this.FileAvailabilityDescriptionField;
            }
            set {
                if ((value == null)) {
                    this.FileAvailabilityDescriptionField = null;
                }
                else {
                    if ((this.FileAvailabilityDescriptionField == null)) {
                        this.FileAvailabilityDescriptionField = XTypedList<ddex_net.xml._20120404.ddexC.Description>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("FileAvailabilityDescription", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Description>(this.FileAvailabilityDescriptionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:File containing the ddex:MIDI that a ddex:DSP can obtain.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, NumberOfVoices?, SoundProcessorType?, Fingerprint*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.File> File {
            get {
                if ((this.FileField == null)) {
                    this.FileField = new XTypedList<ddex_net.xml._20120404.ddexC.File>(this, LinqToXsdTypeManager.Instance, XName.Get("File", ""));
                }
                return this.FileField;
            }
            set {
                if ((value == null)) {
                    this.FileField = null;
                }
                else {
                    if ((this.FileField == null)) {
                        this.FileField = XTypedList<ddex_net.xml._20120404.ddexC.File>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("File", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.File>(this.FileField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The number of voices.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, NumberOfVoices?, SoundProcessorType?, Fingerprint*)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> NumberOfVoices {
            get {
                XElement x = this.GetElement(XName.Get("NumberOfVoices", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElement(XName.Get("NumberOfVoices", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Type of sound processor.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, NumberOfVoices?, SoundProcessorType?, Fingerprint*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.SoundProcessorType SoundProcessorType {
            get {
                XElement x = this.GetElement(XName.Get("SoundProcessorType", ""));
                return ((ddex_net.xml._20120404.ddexC.SoundProcessorType)(x));
            }
            set {
                this.SetElement(XName.Get("SoundProcessorType", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Fingerprint and its governing algorithm.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, NumberOfVoices?, SoundProcessorType?, Fingerprint*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Fingerprint> Fingerprint {
            get {
                if ((this.FingerprintField == null)) {
                    this.FingerprintField = new XTypedList<ddex_net.xml._20120404.ddexC.Fingerprint>(this, LinqToXsdTypeManager.Instance, XName.Get("Fingerprint", ""));
                }
                return this.FingerprintField;
            }
            set {
                if ((value == null)) {
                    this.FingerprintField = null;
                }
                else {
                    if ((this.FingerprintField == null)) {
                        this.FingerprintField = XTypedList<ddex_net.xml._20120404.ddexC.Fingerprint>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Fingerprint", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Fingerprint>(this.FingerprintField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the ern:TechnicalMidiDetails as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("TechnicalMidiDetails", "http://ddex.net/xml/ern/341");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TechnicalMidiDetails>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("TechnicalResourceDetailsReference", ""), typeof(string));
            localElementDictionary.Add(XName.Get("Duration", ""), typeof(System.TimeSpan));
            localElementDictionary.Add(XName.Get("ResourceProcessingRequired", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("UsableResourceDuration", ""), typeof(System.TimeSpan));
            localElementDictionary.Add(XName.Get("IsPreview", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("PreviewDetails", ""), typeof(SoundRecordingPreviewDetails));
            localElementDictionary.Add(XName.Get("FulfillmentDate", ""), typeof(ddex_net.xml._20120404.ddexC.FulfillmentDate));
            localElementDictionary.Add(XName.Get("ConsumerFulfillmentDate", ""), typeof(ddex_net.xml._20120404.ddexC.FulfillmentDate));
            localElementDictionary.Add(XName.Get("FileAvailabilityDescription", ""), typeof(ddex_net.xml._20120404.ddexC.Description));
            localElementDictionary.Add(XName.Get("File", ""), typeof(ddex_net.xml._20120404.ddexC.File));
            localElementDictionary.Add(XName.Get("NumberOfVoices", ""), typeof(decimal));
            localElementDictionary.Add(XName.Get("SoundProcessorType", ""), typeof(ddex_net.xml._20120404.ddexC.SoundProcessorType));
            localElementDictionary.Add(XName.Get("Fingerprint", ""), typeof(ddex_net.xml._20120404.ddexC.Fingerprint));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        private class TechnicalResourceDetailsReferenceLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "T[\\d\\-_a-zA-Z]+"}, 0, XmlSchemaWhiteSpace.Collapse));
            
            private TechnicalResourceDetailsReferenceLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing technical details of a ddex:SheetMusic.
    /// </para>
    /// <para>
    /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, SheetMusicCodecType?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
    /// </para>
    /// </summary>
    public partial class TechnicalSheetMusicDetails : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Description> FileAvailabilityDescriptionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.File> FileField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Fingerprint> FingerprintField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator TechnicalSheetMusicDetails(XElement xe) { return XTypedServices.ToXTypedElement<TechnicalSheetMusicDetails>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TechnicalSheetMusicDetails() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing technical details of a ddex:SheetMusic.
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, SheetMusicCodecType?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public TechnicalSheetMusicDetails() {
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Identifier (specific to the ddex:Message) of the ern:TechnicalSheetMusicDetails within the ddex:Release which contains it. This is a ddex:LocalTechnicalResourceDetailsAnchor starting with the letter T.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, SheetMusicCodecType?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public string TechnicalResourceDetailsReference {
            get {
                XElement x = this.GetElement(XName.Get("TechnicalResourceDetailsReference", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("TechnicalResourceDetailsReference", ""), value, "TechnicalResourceDetailsReference", TechnicalResourceDetailsReferenceLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Type of ddex:DrmPlatform.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, SheetMusicCodecType?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.DrmPlatformType DrmPlatformType {
            get {
                XElement x = this.GetElement(XName.Get("DrmPlatformType", ""));
                return ((ddex_net.xml._20120404.ddexC.DrmPlatformType)(x));
            }
            set {
                this.SetElement(XName.Get("DrmPlatformType", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:ContainerFormat.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, SheetMusicCodecType?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.ContainerFormat ContainerFormat {
            get {
                XElement x = this.GetElement(XName.Get("ContainerFormat", ""));
                return ((ddex_net.xml._20120404.ddexC.ContainerFormat)(x));
            }
            set {
                this.SetElement(XName.Get("ContainerFormat", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Type of SheetMusicCodec.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, SheetMusicCodecType?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.SheetMusicCodecType SheetMusicCodecType {
            get {
                XElement x = this.GetElement(XName.Get("SheetMusicCodecType", ""));
                return ((ddex_net.xml._20120404.ddexC.SheetMusicCodecType)(x));
            }
            set {
                this.SetElement(XName.Get("SheetMusicCodecType", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ddex:SheetMusic is technically a preview of the parent ddex:Resource (=True) or not (=False). Note that nothing can be implied from this element as to the conditions under which the preview can be made available.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, SheetMusicCodecType?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsPreview {
            get {
                XElement x = this.GetElement(XName.Get("IsPreview", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("IsPreview", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a preview.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, SheetMusicCodecType?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public PreviewDetails PreviewDetails {
            get {
                XElement x = this.GetElement(XName.Get("PreviewDetails", ""));
                return ((PreviewDetails)(x));
            }
            set {
                this.SetElement(XName.Get("PreviewDetails", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:FulfillmentDate.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, SheetMusicCodecType?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.FulfillmentDate FulfillmentDate {
            get {
                XElement x = this.GetElement(XName.Get("FulfillmentDate", ""));
                return ((ddex_net.xml._20120404.ddexC.FulfillmentDate)(x));
            }
            set {
                this.SetElement(XName.Get("FulfillmentDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of when a consumer is able to get hold of the ddex:SheetMusic.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, SheetMusicCodecType?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.FulfillmentDate ConsumerFulfillmentDate {
            get {
                XElement x = this.GetElement(XName.Get("ConsumerFulfillmentDate", ""));
                return ((ddex_net.xml._20120404.ddexC.FulfillmentDate)(x));
            }
            set {
                this.SetElement(XName.Get("ConsumerFulfillmentDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a ddex:Description providing details of how a ddex:DSP can obtain a ddex:File that contains the ddex:SheetMusic.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, SheetMusicCodecType?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Description> FileAvailabilityDescription {
            get {
                if ((this.FileAvailabilityDescriptionField == null)) {
                    this.FileAvailabilityDescriptionField = new XTypedList<ddex_net.xml._20120404.ddexC.Description>(this, LinqToXsdTypeManager.Instance, XName.Get("FileAvailabilityDescription", ""));
                }
                return this.FileAvailabilityDescriptionField;
            }
            set {
                if ((value == null)) {
                    this.FileAvailabilityDescriptionField = null;
                }
                else {
                    if ((this.FileAvailabilityDescriptionField == null)) {
                        this.FileAvailabilityDescriptionField = XTypedList<ddex_net.xml._20120404.ddexC.Description>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("FileAvailabilityDescription", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Description>(this.FileAvailabilityDescriptionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:File containing the ddex:SheetMusic that a ddex:DSP can obtain.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, SheetMusicCodecType?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.File> File {
            get {
                if ((this.FileField == null)) {
                    this.FileField = new XTypedList<ddex_net.xml._20120404.ddexC.File>(this, LinqToXsdTypeManager.Instance, XName.Get("File", ""));
                }
                return this.FileField;
            }
            set {
                if ((value == null)) {
                    this.FileField = null;
                }
                else {
                    if ((this.FileField == null)) {
                        this.FileField = XTypedList<ddex_net.xml._20120404.ddexC.File>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("File", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.File>(this.FileField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Fingerprint and its governing algorithm.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, SheetMusicCodecType?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Fingerprint> Fingerprint {
            get {
                if ((this.FingerprintField == null)) {
                    this.FingerprintField = new XTypedList<ddex_net.xml._20120404.ddexC.Fingerprint>(this, LinqToXsdTypeManager.Instance, XName.Get("Fingerprint", ""));
                }
                return this.FingerprintField;
            }
            set {
                if ((value == null)) {
                    this.FingerprintField = null;
                }
                else {
                    if ((this.FingerprintField == null)) {
                        this.FingerprintField = XTypedList<ddex_net.xml._20120404.ddexC.Fingerprint>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Fingerprint", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Fingerprint>(this.FingerprintField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the ern:TechnicalSheetMusicDetails as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("TechnicalSheetMusicDetails", "http://ddex.net/xml/ern/341");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TechnicalSheetMusicDetails>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("TechnicalResourceDetailsReference", ""), typeof(string));
            localElementDictionary.Add(XName.Get("DrmPlatformType", ""), typeof(ddex_net.xml._20120404.ddexC.DrmPlatformType));
            localElementDictionary.Add(XName.Get("ContainerFormat", ""), typeof(ddex_net.xml._20120404.ddexC.ContainerFormat));
            localElementDictionary.Add(XName.Get("SheetMusicCodecType", ""), typeof(ddex_net.xml._20120404.ddexC.SheetMusicCodecType));
            localElementDictionary.Add(XName.Get("IsPreview", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("PreviewDetails", ""), typeof(PreviewDetails));
            localElementDictionary.Add(XName.Get("FulfillmentDate", ""), typeof(ddex_net.xml._20120404.ddexC.FulfillmentDate));
            localElementDictionary.Add(XName.Get("ConsumerFulfillmentDate", ""), typeof(ddex_net.xml._20120404.ddexC.FulfillmentDate));
            localElementDictionary.Add(XName.Get("FileAvailabilityDescription", ""), typeof(ddex_net.xml._20120404.ddexC.Description));
            localElementDictionary.Add(XName.Get("File", ""), typeof(ddex_net.xml._20120404.ddexC.File));
            localElementDictionary.Add(XName.Get("Fingerprint", ""), typeof(ddex_net.xml._20120404.ddexC.Fingerprint));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        private class TechnicalResourceDetailsReferenceLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "T[\\d\\-_a-zA-Z]+"}, 0, XmlSchemaWhiteSpace.Collapse));
            
            private TechnicalResourceDetailsReferenceLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing technical details of a ddex:Software.
    /// </para>
    /// <para>
    /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, OperatingSystemType?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
    /// </para>
    /// </summary>
    public partial class TechnicalSoftwareDetails : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Description> FileAvailabilityDescriptionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.File> FileField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Fingerprint> FingerprintField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator TechnicalSoftwareDetails(XElement xe) { return XTypedServices.ToXTypedElement<TechnicalSoftwareDetails>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TechnicalSoftwareDetails() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing technical details of a ddex:Software.
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, OperatingSystemType?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public TechnicalSoftwareDetails() {
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Identifier (specific to the ddex:Message) of the ern:TechnicalSoftwareDetails within the ddex:Release which contains it. This is a ddex:LocalTechnicalResourceDetailsAnchor starting with the letter T.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, OperatingSystemType?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public string TechnicalResourceDetailsReference {
            get {
                XElement x = this.GetElement(XName.Get("TechnicalResourceDetailsReference", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("TechnicalResourceDetailsReference", ""), value, "TechnicalResourceDetailsReference", TechnicalResourceDetailsReferenceLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Type of ddex:DrmPlatform.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, OperatingSystemType?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.DrmPlatformType DrmPlatformType {
            get {
                XElement x = this.GetElement(XName.Get("DrmPlatformType", ""));
                return ((ddex_net.xml._20120404.ddexC.DrmPlatformType)(x));
            }
            set {
                this.SetElement(XName.Get("DrmPlatformType", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Type of ddex:OperatingSystem.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, OperatingSystemType?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.OperatingSystemType OperatingSystemType {
            get {
                XElement x = this.GetElement(XName.Get("OperatingSystemType", ""));
                return ((ddex_net.xml._20120404.ddexC.OperatingSystemType)(x));
            }
            set {
                this.SetElement(XName.Get("OperatingSystemType", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ddex:Software is technically a preview of the parent ddex:Resource (=True) or not (=False). Note that nothing can be implied from this element as to the conditions under which the preview can be made available.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, OperatingSystemType?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsPreview {
            get {
                XElement x = this.GetElement(XName.Get("IsPreview", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("IsPreview", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a preview.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, OperatingSystemType?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public PreviewDetails PreviewDetails {
            get {
                XElement x = this.GetElement(XName.Get("PreviewDetails", ""));
                return ((PreviewDetails)(x));
            }
            set {
                this.SetElement(XName.Get("PreviewDetails", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:FulfillmentDate.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, OperatingSystemType?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.FulfillmentDate FulfillmentDate {
            get {
                XElement x = this.GetElement(XName.Get("FulfillmentDate", ""));
                return ((ddex_net.xml._20120404.ddexC.FulfillmentDate)(x));
            }
            set {
                this.SetElement(XName.Get("FulfillmentDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of when a consumer is able to get hold of the ddex:Software.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, OperatingSystemType?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.FulfillmentDate ConsumerFulfillmentDate {
            get {
                XElement x = this.GetElement(XName.Get("ConsumerFulfillmentDate", ""));
                return ((ddex_net.xml._20120404.ddexC.FulfillmentDate)(x));
            }
            set {
                this.SetElement(XName.Get("ConsumerFulfillmentDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a ddex:Description providing details of how a ddex:DSP can obtain a ddex:File that contains the ddex:Software.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, OperatingSystemType?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Description> FileAvailabilityDescription {
            get {
                if ((this.FileAvailabilityDescriptionField == null)) {
                    this.FileAvailabilityDescriptionField = new XTypedList<ddex_net.xml._20120404.ddexC.Description>(this, LinqToXsdTypeManager.Instance, XName.Get("FileAvailabilityDescription", ""));
                }
                return this.FileAvailabilityDescriptionField;
            }
            set {
                if ((value == null)) {
                    this.FileAvailabilityDescriptionField = null;
                }
                else {
                    if ((this.FileAvailabilityDescriptionField == null)) {
                        this.FileAvailabilityDescriptionField = XTypedList<ddex_net.xml._20120404.ddexC.Description>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("FileAvailabilityDescription", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Description>(this.FileAvailabilityDescriptionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:File containing the ddex:Software that a ddex:DSP can obtain.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, OperatingSystemType?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.File> File {
            get {
                if ((this.FileField == null)) {
                    this.FileField = new XTypedList<ddex_net.xml._20120404.ddexC.File>(this, LinqToXsdTypeManager.Instance, XName.Get("File", ""));
                }
                return this.FileField;
            }
            set {
                if ((value == null)) {
                    this.FileField = null;
                }
                else {
                    if ((this.FileField == null)) {
                        this.FileField = XTypedList<ddex_net.xml._20120404.ddexC.File>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("File", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.File>(this.FileField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Fingerprint and its governing algorithm.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, OperatingSystemType?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Fingerprint> Fingerprint {
            get {
                if ((this.FingerprintField == null)) {
                    this.FingerprintField = new XTypedList<ddex_net.xml._20120404.ddexC.Fingerprint>(this, LinqToXsdTypeManager.Instance, XName.Get("Fingerprint", ""));
                }
                return this.FingerprintField;
            }
            set {
                if ((value == null)) {
                    this.FingerprintField = null;
                }
                else {
                    if ((this.FingerprintField == null)) {
                        this.FingerprintField = XTypedList<ddex_net.xml._20120404.ddexC.Fingerprint>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Fingerprint", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Fingerprint>(this.FingerprintField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the ern:TechnicalSoftwareDetails as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("TechnicalSoftwareDetails", "http://ddex.net/xml/ern/341");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TechnicalSoftwareDetails>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("TechnicalResourceDetailsReference", ""), typeof(string));
            localElementDictionary.Add(XName.Get("DrmPlatformType", ""), typeof(ddex_net.xml._20120404.ddexC.DrmPlatformType));
            localElementDictionary.Add(XName.Get("OperatingSystemType", ""), typeof(ddex_net.xml._20120404.ddexC.OperatingSystemType));
            localElementDictionary.Add(XName.Get("IsPreview", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("PreviewDetails", ""), typeof(PreviewDetails));
            localElementDictionary.Add(XName.Get("FulfillmentDate", ""), typeof(ddex_net.xml._20120404.ddexC.FulfillmentDate));
            localElementDictionary.Add(XName.Get("ConsumerFulfillmentDate", ""), typeof(ddex_net.xml._20120404.ddexC.FulfillmentDate));
            localElementDictionary.Add(XName.Get("FileAvailabilityDescription", ""), typeof(ddex_net.xml._20120404.ddexC.Description));
            localElementDictionary.Add(XName.Get("File", ""), typeof(ddex_net.xml._20120404.ddexC.File));
            localElementDictionary.Add(XName.Get("Fingerprint", ""), typeof(ddex_net.xml._20120404.ddexC.Fingerprint));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        private class TechnicalResourceDetailsReferenceLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "T[\\d\\-_a-zA-Z]+"}, 0, XmlSchemaWhiteSpace.Collapse));
            
            private TechnicalResourceDetailsReferenceLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing technical details of a ddex:SoundRecording.
    /// </para>
    /// <para>
    /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, AudioCodecType?, BitRate?, NumberOfChannels?, SamplingRate?, BitsPerSample?, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
    /// </para>
    /// </summary>
    public partial class TechnicalSoundRecordingDetails : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Description> FileAvailabilityDescriptionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.File> FileField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Fingerprint> FingerprintField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator TechnicalSoundRecordingDetails(XElement xe) { return XTypedServices.ToXTypedElement<TechnicalSoundRecordingDetails>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TechnicalSoundRecordingDetails() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing technical details of a ddex:SoundRecording.
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, AudioCodecType?, BitRate?, NumberOfChannels?, SamplingRate?, BitsPerSample?, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public TechnicalSoundRecordingDetails() {
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Identifier (specific to the ddex:Message) of the ern:TechnicalSoundRecordingDetails within the ddex:Release which contains it. This is a ddex:LocalTechnicalResourceDetailsAnchor starting with the letter T.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, AudioCodecType?, BitRate?, NumberOfChannels?, SamplingRate?, BitsPerSample?, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public string TechnicalResourceDetailsReference {
            get {
                XElement x = this.GetElement(XName.Get("TechnicalResourceDetailsReference", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("TechnicalResourceDetailsReference", ""), value, "TechnicalResourceDetailsReference", TechnicalResourceDetailsReferenceLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Type of ddex:DrmPlatform.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, AudioCodecType?, BitRate?, NumberOfChannels?, SamplingRate?, BitsPerSample?, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.DrmPlatformType DrmPlatformType {
            get {
                XElement x = this.GetElement(XName.Get("DrmPlatformType", ""));
                return ((ddex_net.xml._20120404.ddexC.DrmPlatformType)(x));
            }
            set {
                this.SetElement(XName.Get("DrmPlatformType", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:ContainerFormat.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, AudioCodecType?, BitRate?, NumberOfChannels?, SamplingRate?, BitsPerSample?, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.ContainerFormat ContainerFormat {
            get {
                XElement x = this.GetElement(XName.Get("ContainerFormat", ""));
                return ((ddex_net.xml._20120404.ddexC.ContainerFormat)(x));
            }
            set {
                this.SetElement(XName.Get("ContainerFormat", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Type of ddex:AudioCodec.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, AudioCodecType?, BitRate?, NumberOfChannels?, SamplingRate?, BitsPerSample?, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.AudioCodecType AudioCodecType {
            get {
                XElement x = this.GetElement(XName.Get("AudioCodecType", ""));
                return ((ddex_net.xml._20120404.ddexC.AudioCodecType)(x));
            }
            set {
                this.SetElement(XName.Get("AudioCodecType", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing the ddex:BitRate for the audio data and a ddex:UnitOfMeasure (the default is ddex:kbps).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, AudioCodecType?, BitRate?, NumberOfChannels?, SamplingRate?, BitsPerSample?, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.BitRate BitRate {
            get {
                XElement x = this.GetElement(XName.Get("BitRate", ""));
                return ((ddex_net.xml._20120404.ddexC.BitRate)(x));
            }
            set {
                this.SetElement(XName.Get("BitRate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A number of audio channels.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, AudioCodecType?, BitRate?, NumberOfChannels?, SamplingRate?, BitsPerSample?, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> NumberOfChannels {
            get {
                XElement x = this.GetElement(XName.Get("NumberOfChannels", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElement(XName.Get("NumberOfChannels", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing the sampling rate of the ddex:SoundRecording and a ddex:UnitOfMeasure (the default is ddex:Hz).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, AudioCodecType?, BitRate?, NumberOfChannels?, SamplingRate?, BitsPerSample?, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.SamplingRate SamplingRate {
            get {
                XElement x = this.GetElement(XName.Get("SamplingRate", ""));
                return ((ddex_net.xml._20120404.ddexC.SamplingRate)(x));
            }
            set {
                this.SetElement(XName.Get("SamplingRate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// An amount of audio data in a sample.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, AudioCodecType?, BitRate?, NumberOfChannels?, SamplingRate?, BitsPerSample?, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> BitsPerSample {
            get {
                XElement x = this.GetElement(XName.Get("BitsPerSample", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElement(XName.Get("BitsPerSample", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Duration of the instantiation of the ern:SoundRecording if this differs from the ddex:Duration provided for the ern:SoundRecording itself (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S). This element must only be used if and when there are no royalty reporting implications on this change in duration and when the specific technical instantiation is a clip taken from a technical instantiation representing the whole ern:SoundRecording.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, AudioCodecType?, BitRate?, NumberOfChannels?, SamplingRate?, BitsPerSample?, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public System.Nullable<System.TimeSpan> Duration {
            get {
                XElement x = this.GetElement(XName.Get("Duration", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
            set {
                this.SetElement(XName.Get("Duration", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ern:SoundRecording needs to be processed (=True) or not (=False) (typically: transcoded) by the ddex:MessageRecipient before being delivered to ddex:Consumers.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, AudioCodecType?, BitRate?, NumberOfChannels?, SamplingRate?, BitsPerSample?, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public System.Nullable<bool> ResourceProcessingRequired {
            get {
                XElement x = this.GetElement(XName.Get("ResourceProcessingRequired", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("ResourceProcessingRequired", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Duration of the ern:SoundRecording that may be sold to a ddex:Consumer if the ern:SoundRecording provided is not intended to be provided to ddex:Consumers 'as is' but will need to be transcoded into an appropriate format by the ddex:MessageRecipient or any other ddex:DSP handling the ddex:Release before it is sold (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, AudioCodecType?, BitRate?, NumberOfChannels?, SamplingRate?, BitsPerSample?, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public System.Nullable<System.TimeSpan> UsableResourceDuration {
            get {
                XElement x = this.GetElement(XName.Get("UsableResourceDuration", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
            set {
                this.SetElement(XName.Get("UsableResourceDuration", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ddex:SoundRecording is technically a preview of the parent ddex:Resource (=True) or not (=False). Note that nothing can be implied from this element as to the conditions under which the preview can be made available.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, AudioCodecType?, BitRate?, NumberOfChannels?, SamplingRate?, BitsPerSample?, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsPreview {
            get {
                XElement x = this.GetElement(XName.Get("IsPreview", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("IsPreview", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a preview.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, AudioCodecType?, BitRate?, NumberOfChannels?, SamplingRate?, BitsPerSample?, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public SoundRecordingPreviewDetails PreviewDetails {
            get {
                XElement x = this.GetElement(XName.Get("PreviewDetails", ""));
                return ((SoundRecordingPreviewDetails)(x));
            }
            set {
                this.SetElement(XName.Get("PreviewDetails", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:FulfillmentDate.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, AudioCodecType?, BitRate?, NumberOfChannels?, SamplingRate?, BitsPerSample?, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.FulfillmentDate FulfillmentDate {
            get {
                XElement x = this.GetElement(XName.Get("FulfillmentDate", ""));
                return ((ddex_net.xml._20120404.ddexC.FulfillmentDate)(x));
            }
            set {
                this.SetElement(XName.Get("FulfillmentDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of when a consumer is able to get hold of the ddex:SoundRecording.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, AudioCodecType?, BitRate?, NumberOfChannels?, SamplingRate?, BitsPerSample?, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.FulfillmentDate ConsumerFulfillmentDate {
            get {
                XElement x = this.GetElement(XName.Get("ConsumerFulfillmentDate", ""));
                return ((ddex_net.xml._20120404.ddexC.FulfillmentDate)(x));
            }
            set {
                this.SetElement(XName.Get("ConsumerFulfillmentDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a ddex:Description providing details of how a ddex:DSP can obtain a ddex:File that contains the ddex:SoundRecording.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, AudioCodecType?, BitRate?, NumberOfChannels?, SamplingRate?, BitsPerSample?, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Description> FileAvailabilityDescription {
            get {
                if ((this.FileAvailabilityDescriptionField == null)) {
                    this.FileAvailabilityDescriptionField = new XTypedList<ddex_net.xml._20120404.ddexC.Description>(this, LinqToXsdTypeManager.Instance, XName.Get("FileAvailabilityDescription", ""));
                }
                return this.FileAvailabilityDescriptionField;
            }
            set {
                if ((value == null)) {
                    this.FileAvailabilityDescriptionField = null;
                }
                else {
                    if ((this.FileAvailabilityDescriptionField == null)) {
                        this.FileAvailabilityDescriptionField = XTypedList<ddex_net.xml._20120404.ddexC.Description>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("FileAvailabilityDescription", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Description>(this.FileAvailabilityDescriptionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:File containing the ddex:SoundRecording that a ddex:DSP can obtain.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, AudioCodecType?, BitRate?, NumberOfChannels?, SamplingRate?, BitsPerSample?, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.File> File {
            get {
                if ((this.FileField == null)) {
                    this.FileField = new XTypedList<ddex_net.xml._20120404.ddexC.File>(this, LinqToXsdTypeManager.Instance, XName.Get("File", ""));
                }
                return this.FileField;
            }
            set {
                if ((value == null)) {
                    this.FileField = null;
                }
                else {
                    if ((this.FileField == null)) {
                        this.FileField = XTypedList<ddex_net.xml._20120404.ddexC.File>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("File", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.File>(this.FileField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Fingerprint and its governing algorithm.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, AudioCodecType?, BitRate?, NumberOfChannels?, SamplingRate?, BitsPerSample?, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Fingerprint> Fingerprint {
            get {
                if ((this.FingerprintField == null)) {
                    this.FingerprintField = new XTypedList<ddex_net.xml._20120404.ddexC.Fingerprint>(this, LinqToXsdTypeManager.Instance, XName.Get("Fingerprint", ""));
                }
                return this.FingerprintField;
            }
            set {
                if ((value == null)) {
                    this.FingerprintField = null;
                }
                else {
                    if ((this.FingerprintField == null)) {
                        this.FingerprintField = XTypedList<ddex_net.xml._20120404.ddexC.Fingerprint>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Fingerprint", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Fingerprint>(this.FingerprintField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the ern:TechnicalSoundRecordingDetails as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("TechnicalSoundRecordingDetails", "http://ddex.net/xml/ern/341");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TechnicalSoundRecordingDetails>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("TechnicalResourceDetailsReference", ""), typeof(string));
            localElementDictionary.Add(XName.Get("DrmPlatformType", ""), typeof(ddex_net.xml._20120404.ddexC.DrmPlatformType));
            localElementDictionary.Add(XName.Get("ContainerFormat", ""), typeof(ddex_net.xml._20120404.ddexC.ContainerFormat));
            localElementDictionary.Add(XName.Get("AudioCodecType", ""), typeof(ddex_net.xml._20120404.ddexC.AudioCodecType));
            localElementDictionary.Add(XName.Get("BitRate", ""), typeof(ddex_net.xml._20120404.ddexC.BitRate));
            localElementDictionary.Add(XName.Get("NumberOfChannels", ""), typeof(decimal));
            localElementDictionary.Add(XName.Get("SamplingRate", ""), typeof(ddex_net.xml._20120404.ddexC.SamplingRate));
            localElementDictionary.Add(XName.Get("BitsPerSample", ""), typeof(decimal));
            localElementDictionary.Add(XName.Get("Duration", ""), typeof(System.TimeSpan));
            localElementDictionary.Add(XName.Get("ResourceProcessingRequired", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("UsableResourceDuration", ""), typeof(System.TimeSpan));
            localElementDictionary.Add(XName.Get("IsPreview", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("PreviewDetails", ""), typeof(SoundRecordingPreviewDetails));
            localElementDictionary.Add(XName.Get("FulfillmentDate", ""), typeof(ddex_net.xml._20120404.ddexC.FulfillmentDate));
            localElementDictionary.Add(XName.Get("ConsumerFulfillmentDate", ""), typeof(ddex_net.xml._20120404.ddexC.FulfillmentDate));
            localElementDictionary.Add(XName.Get("FileAvailabilityDescription", ""), typeof(ddex_net.xml._20120404.ddexC.Description));
            localElementDictionary.Add(XName.Get("File", ""), typeof(ddex_net.xml._20120404.ddexC.File));
            localElementDictionary.Add(XName.Get("Fingerprint", ""), typeof(ddex_net.xml._20120404.ddexC.Fingerprint));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        private class TechnicalResourceDetailsReferenceLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "T[\\d\\-_a-zA-Z]+"}, 0, XmlSchemaWhiteSpace.Collapse));
            
            private TechnicalResourceDetailsReferenceLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing technical details of a ddex:Text.
    /// </para>
    /// <para>
    /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, TextCodecType?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
    /// </para>
    /// </summary>
    public partial class TechnicalTextDetails : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Description> FileAvailabilityDescriptionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.File> FileField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Fingerprint> FingerprintField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator TechnicalTextDetails(XElement xe) { return XTypedServices.ToXTypedElement<TechnicalTextDetails>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TechnicalTextDetails() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing technical details of a ddex:Text.
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, TextCodecType?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public TechnicalTextDetails() {
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Identifier (specific to the ddex:Message) of the ern:TechnicalTextDetails within the ddex:Release which contains it. This is a ddex:LocalTechnicalResourceDetailsAnchor starting with the letter T.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, TextCodecType?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public string TechnicalResourceDetailsReference {
            get {
                XElement x = this.GetElement(XName.Get("TechnicalResourceDetailsReference", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("TechnicalResourceDetailsReference", ""), value, "TechnicalResourceDetailsReference", TechnicalResourceDetailsReferenceLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Type of ddex:DrmPlatform.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, TextCodecType?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.DrmPlatformType DrmPlatformType {
            get {
                XElement x = this.GetElement(XName.Get("DrmPlatformType", ""));
                return ((ddex_net.xml._20120404.ddexC.DrmPlatformType)(x));
            }
            set {
                this.SetElement(XName.Get("DrmPlatformType", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:ContainerFormat.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, TextCodecType?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.ContainerFormat ContainerFormat {
            get {
                XElement x = this.GetElement(XName.Get("ContainerFormat", ""));
                return ((ddex_net.xml._20120404.ddexC.ContainerFormat)(x));
            }
            set {
                this.SetElement(XName.Get("ContainerFormat", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Type of ddex:TextCodec.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, TextCodecType?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.TextCodecType TextCodecType {
            get {
                XElement x = this.GetElement(XName.Get("TextCodecType", ""));
                return ((ddex_net.xml._20120404.ddexC.TextCodecType)(x));
            }
            set {
                this.SetElement(XName.Get("TextCodecType", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ddex:Text is technically a preview of the parent ddex:Resource (=True) or not (=False). Note that nothing can be implied from this element as to the conditions under which the preview can be made available.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, TextCodecType?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsPreview {
            get {
                XElement x = this.GetElement(XName.Get("IsPreview", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("IsPreview", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a preview.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, TextCodecType?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public PreviewDetails PreviewDetails {
            get {
                XElement x = this.GetElement(XName.Get("PreviewDetails", ""));
                return ((PreviewDetails)(x));
            }
            set {
                this.SetElement(XName.Get("PreviewDetails", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:FulfillmentDate.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, TextCodecType?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.FulfillmentDate FulfillmentDate {
            get {
                XElement x = this.GetElement(XName.Get("FulfillmentDate", ""));
                return ((ddex_net.xml._20120404.ddexC.FulfillmentDate)(x));
            }
            set {
                this.SetElement(XName.Get("FulfillmentDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of when a consumer is able to get hold of the ddex:Text.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, TextCodecType?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.FulfillmentDate ConsumerFulfillmentDate {
            get {
                XElement x = this.GetElement(XName.Get("ConsumerFulfillmentDate", ""));
                return ((ddex_net.xml._20120404.ddexC.FulfillmentDate)(x));
            }
            set {
                this.SetElement(XName.Get("ConsumerFulfillmentDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a ddex:Description providing details of how a ddex:DSP can obtain a ddex:File that contains the ddex:Text.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, TextCodecType?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Description> FileAvailabilityDescription {
            get {
                if ((this.FileAvailabilityDescriptionField == null)) {
                    this.FileAvailabilityDescriptionField = new XTypedList<ddex_net.xml._20120404.ddexC.Description>(this, LinqToXsdTypeManager.Instance, XName.Get("FileAvailabilityDescription", ""));
                }
                return this.FileAvailabilityDescriptionField;
            }
            set {
                if ((value == null)) {
                    this.FileAvailabilityDescriptionField = null;
                }
                else {
                    if ((this.FileAvailabilityDescriptionField == null)) {
                        this.FileAvailabilityDescriptionField = XTypedList<ddex_net.xml._20120404.ddexC.Description>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("FileAvailabilityDescription", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Description>(this.FileAvailabilityDescriptionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:File containing the ddex:Text that a ddex:DSP can obtain.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, TextCodecType?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.File> File {
            get {
                if ((this.FileField == null)) {
                    this.FileField = new XTypedList<ddex_net.xml._20120404.ddexC.File>(this, LinqToXsdTypeManager.Instance, XName.Get("File", ""));
                }
                return this.FileField;
            }
            set {
                if ((value == null)) {
                    this.FileField = null;
                }
                else {
                    if ((this.FileField == null)) {
                        this.FileField = XTypedList<ddex_net.xml._20120404.ddexC.File>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("File", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.File>(this.FileField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Fingerprint and its governing algorithm.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, ContainerFormat?, TextCodecType?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Fingerprint> Fingerprint {
            get {
                if ((this.FingerprintField == null)) {
                    this.FingerprintField = new XTypedList<ddex_net.xml._20120404.ddexC.Fingerprint>(this, LinqToXsdTypeManager.Instance, XName.Get("Fingerprint", ""));
                }
                return this.FingerprintField;
            }
            set {
                if ((value == null)) {
                    this.FingerprintField = null;
                }
                else {
                    if ((this.FingerprintField == null)) {
                        this.FingerprintField = XTypedList<ddex_net.xml._20120404.ddexC.Fingerprint>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Fingerprint", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Fingerprint>(this.FingerprintField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the ern:TechnicalTextDetails as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("TechnicalTextDetails", "http://ddex.net/xml/ern/341");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TechnicalTextDetails>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("TechnicalResourceDetailsReference", ""), typeof(string));
            localElementDictionary.Add(XName.Get("DrmPlatformType", ""), typeof(ddex_net.xml._20120404.ddexC.DrmPlatformType));
            localElementDictionary.Add(XName.Get("ContainerFormat", ""), typeof(ddex_net.xml._20120404.ddexC.ContainerFormat));
            localElementDictionary.Add(XName.Get("TextCodecType", ""), typeof(ddex_net.xml._20120404.ddexC.TextCodecType));
            localElementDictionary.Add(XName.Get("IsPreview", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("PreviewDetails", ""), typeof(PreviewDetails));
            localElementDictionary.Add(XName.Get("FulfillmentDate", ""), typeof(ddex_net.xml._20120404.ddexC.FulfillmentDate));
            localElementDictionary.Add(XName.Get("ConsumerFulfillmentDate", ""), typeof(ddex_net.xml._20120404.ddexC.FulfillmentDate));
            localElementDictionary.Add(XName.Get("FileAvailabilityDescription", ""), typeof(ddex_net.xml._20120404.ddexC.Description));
            localElementDictionary.Add(XName.Get("File", ""), typeof(ddex_net.xml._20120404.ddexC.File));
            localElementDictionary.Add(XName.Get("Fingerprint", ""), typeof(ddex_net.xml._20120404.ddexC.Fingerprint));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        private class TechnicalResourceDetailsReferenceLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "T[\\d\\-_a-zA-Z]+"}, 0, XmlSchemaWhiteSpace.Collapse));
            
            private TechnicalResourceDetailsReferenceLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing technical details of a ddex:UserDefinedResource.
    /// </para>
    /// <para>
    /// Regular expression: (TechnicalResourceDetailsReference, UserDefinedValue*, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
    /// </para>
    /// </summary>
    public partial class TechnicalUserDefinedResourceDetails : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.UserDefinedValue> UserDefinedValueField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Description> FileAvailabilityDescriptionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.File> FileField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Fingerprint> FingerprintField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator TechnicalUserDefinedResourceDetails(XElement xe) { return XTypedServices.ToXTypedElement<TechnicalUserDefinedResourceDetails>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TechnicalUserDefinedResourceDetails() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing technical details of a ddex:UserDefinedResource.
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, UserDefinedValue*, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public TechnicalUserDefinedResourceDetails() {
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Identifier (specific to the ddex:Message) of the ern:TechnicalUserDefinedResourceDetails within the ddex:Release which contains it. This is a ddex:LocalTechnicalResourceDetailsAnchor starting with the letter T.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, UserDefinedValue*, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public string TechnicalResourceDetailsReference {
            get {
                XElement x = this.GetElement(XName.Get("TechnicalResourceDetailsReference", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("TechnicalResourceDetailsReference", ""), value, "TechnicalResourceDetailsReference", TechnicalResourceDetailsReferenceLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:UserDefinedValue.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, UserDefinedValue*, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.UserDefinedValue> UserDefinedValue {
            get {
                if ((this.UserDefinedValueField == null)) {
                    this.UserDefinedValueField = new XTypedList<ddex_net.xml._20120404.ddexC.UserDefinedValue>(this, LinqToXsdTypeManager.Instance, XName.Get("UserDefinedValue", ""));
                }
                return this.UserDefinedValueField;
            }
            set {
                if ((value == null)) {
                    this.UserDefinedValueField = null;
                }
                else {
                    if ((this.UserDefinedValueField == null)) {
                        this.UserDefinedValueField = XTypedList<ddex_net.xml._20120404.ddexC.UserDefinedValue>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("UserDefinedValue", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.UserDefinedValue>(this.UserDefinedValueField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ddex:UserDefinedResource is technically a preview of the parent ddex:Resource (=True) or not (=False). Note that nothing can be implied from this element as to the conditions under which the preview can be made available.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, UserDefinedValue*, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsPreview {
            get {
                XElement x = this.GetElement(XName.Get("IsPreview", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("IsPreview", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a preview.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, UserDefinedValue*, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public PreviewDetails PreviewDetails {
            get {
                XElement x = this.GetElement(XName.Get("PreviewDetails", ""));
                return ((PreviewDetails)(x));
            }
            set {
                this.SetElement(XName.Get("PreviewDetails", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:FulfillmentDate.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, UserDefinedValue*, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.FulfillmentDate FulfillmentDate {
            get {
                XElement x = this.GetElement(XName.Get("FulfillmentDate", ""));
                return ((ddex_net.xml._20120404.ddexC.FulfillmentDate)(x));
            }
            set {
                this.SetElement(XName.Get("FulfillmentDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of when a consumer is able to get hold of the ddex:UserDefinedResource.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, UserDefinedValue*, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.FulfillmentDate ConsumerFulfillmentDate {
            get {
                XElement x = this.GetElement(XName.Get("ConsumerFulfillmentDate", ""));
                return ((ddex_net.xml._20120404.ddexC.FulfillmentDate)(x));
            }
            set {
                this.SetElement(XName.Get("ConsumerFulfillmentDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a ddex:Description providing details of how a ddex:DSP can obtain a ddex:File that contains the ddex:UserDefinedResource.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, UserDefinedValue*, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Description> FileAvailabilityDescription {
            get {
                if ((this.FileAvailabilityDescriptionField == null)) {
                    this.FileAvailabilityDescriptionField = new XTypedList<ddex_net.xml._20120404.ddexC.Description>(this, LinqToXsdTypeManager.Instance, XName.Get("FileAvailabilityDescription", ""));
                }
                return this.FileAvailabilityDescriptionField;
            }
            set {
                if ((value == null)) {
                    this.FileAvailabilityDescriptionField = null;
                }
                else {
                    if ((this.FileAvailabilityDescriptionField == null)) {
                        this.FileAvailabilityDescriptionField = XTypedList<ddex_net.xml._20120404.ddexC.Description>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("FileAvailabilityDescription", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Description>(this.FileAvailabilityDescriptionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:File containing the ddex:UserDefinedResource that a ddex:DSP can obtain.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, UserDefinedValue*, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.File> File {
            get {
                if ((this.FileField == null)) {
                    this.FileField = new XTypedList<ddex_net.xml._20120404.ddexC.File>(this, LinqToXsdTypeManager.Instance, XName.Get("File", ""));
                }
                return this.FileField;
            }
            set {
                if ((value == null)) {
                    this.FileField = null;
                }
                else {
                    if ((this.FileField == null)) {
                        this.FileField = XTypedList<ddex_net.xml._20120404.ddexC.File>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("File", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.File>(this.FileField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Fingerprint and its governing algorithm.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, UserDefinedValue*, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Fingerprint> Fingerprint {
            get {
                if ((this.FingerprintField == null)) {
                    this.FingerprintField = new XTypedList<ddex_net.xml._20120404.ddexC.Fingerprint>(this, LinqToXsdTypeManager.Instance, XName.Get("Fingerprint", ""));
                }
                return this.FingerprintField;
            }
            set {
                if ((value == null)) {
                    this.FingerprintField = null;
                }
                else {
                    if ((this.FingerprintField == null)) {
                        this.FingerprintField = XTypedList<ddex_net.xml._20120404.ddexC.Fingerprint>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Fingerprint", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Fingerprint>(this.FingerprintField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the ern:TechnicalUserDefinedResourceDetails as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("TechnicalUserDefinedResourceDetails", "http://ddex.net/xml/ern/341");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TechnicalUserDefinedResourceDetails>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("TechnicalResourceDetailsReference", ""), typeof(string));
            localElementDictionary.Add(XName.Get("UserDefinedValue", ""), typeof(ddex_net.xml._20120404.ddexC.UserDefinedValue));
            localElementDictionary.Add(XName.Get("IsPreview", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("PreviewDetails", ""), typeof(PreviewDetails));
            localElementDictionary.Add(XName.Get("FulfillmentDate", ""), typeof(ddex_net.xml._20120404.ddexC.FulfillmentDate));
            localElementDictionary.Add(XName.Get("ConsumerFulfillmentDate", ""), typeof(ddex_net.xml._20120404.ddexC.FulfillmentDate));
            localElementDictionary.Add(XName.Get("FileAvailabilityDescription", ""), typeof(ddex_net.xml._20120404.ddexC.Description));
            localElementDictionary.Add(XName.Get("File", ""), typeof(ddex_net.xml._20120404.ddexC.File));
            localElementDictionary.Add(XName.Get("Fingerprint", ""), typeof(ddex_net.xml._20120404.ddexC.Fingerprint));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        private class TechnicalResourceDetailsReferenceLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "T[\\d\\-_a-zA-Z]+"}, 0, XmlSchemaWhiteSpace.Collapse));
            
            private TechnicalResourceDetailsReferenceLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing technical details of a ddex:Video.
    /// </para>
    /// <para>
    /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, OverallBitRate?, ContainerFormat?, VideoCodecType?, VideoBitRate?, FrameRate?, ImageHeight?, ImageWidth?, AspectRatio?, ColorDepth?, VideoDefinitionType?, AudioCodecType?, AudioBitRate?, NumberOfAudioChannels?, AudioSamplingRate?, AudioBitsPerSample?, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
    /// </para>
    /// </summary>
    public partial class TechnicalVideoDetails : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Description> FileAvailabilityDescriptionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.File> FileField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Fingerprint> FingerprintField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator TechnicalVideoDetails(XElement xe) { return XTypedServices.ToXTypedElement<TechnicalVideoDetails>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TechnicalVideoDetails() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing technical details of a ddex:Video.
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, OverallBitRate?, ContainerFormat?, VideoCodecType?, VideoBitRate?, FrameRate?, ImageHeight?, ImageWidth?, AspectRatio?, ColorDepth?, VideoDefinitionType?, AudioCodecType?, AudioBitRate?, NumberOfAudioChannels?, AudioSamplingRate?, AudioBitsPerSample?, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public TechnicalVideoDetails() {
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Identifier (specific to the ddex:Message) of the ern:TechnicalVideoDetails within the ddex:Release which contains it. This is a ddex:LocalTechnicalResourceDetailsAnchor starting with the letter T.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, OverallBitRate?, ContainerFormat?, VideoCodecType?, VideoBitRate?, FrameRate?, ImageHeight?, ImageWidth?, AspectRatio?, ColorDepth?, VideoDefinitionType?, AudioCodecType?, AudioBitRate?, NumberOfAudioChannels?, AudioSamplingRate?, AudioBitsPerSample?, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public string TechnicalResourceDetailsReference {
            get {
                XElement x = this.GetElement(XName.Get("TechnicalResourceDetailsReference", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("TechnicalResourceDetailsReference", ""), value, "TechnicalResourceDetailsReference", TechnicalResourceDetailsReferenceLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Type of ddex:DrmPlatform.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, OverallBitRate?, ContainerFormat?, VideoCodecType?, VideoBitRate?, FrameRate?, ImageHeight?, ImageWidth?, AspectRatio?, ColorDepth?, VideoDefinitionType?, AudioCodecType?, AudioBitRate?, NumberOfAudioChannels?, AudioSamplingRate?, AudioBitsPerSample?, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.DrmPlatformType DrmPlatformType {
            get {
                XElement x = this.GetElement(XName.Get("DrmPlatformType", ""));
                return ((ddex_net.xml._20120404.ddexC.DrmPlatformType)(x));
            }
            set {
                this.SetElement(XName.Get("DrmPlatformType", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing the overall ddex:BitRate and a ddex:UnitOfMeasure (the default is ddex:kbps).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, OverallBitRate?, ContainerFormat?, VideoCodecType?, VideoBitRate?, FrameRate?, ImageHeight?, ImageWidth?, AspectRatio?, ColorDepth?, VideoDefinitionType?, AudioCodecType?, AudioBitRate?, NumberOfAudioChannels?, AudioSamplingRate?, AudioBitsPerSample?, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.BitRate OverallBitRate {
            get {
                XElement x = this.GetElement(XName.Get("OverallBitRate", ""));
                return ((ddex_net.xml._20120404.ddexC.BitRate)(x));
            }
            set {
                this.SetElement(XName.Get("OverallBitRate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:ContainerFormat.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, OverallBitRate?, ContainerFormat?, VideoCodecType?, VideoBitRate?, FrameRate?, ImageHeight?, ImageWidth?, AspectRatio?, ColorDepth?, VideoDefinitionType?, AudioCodecType?, AudioBitRate?, NumberOfAudioChannels?, AudioSamplingRate?, AudioBitsPerSample?, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.ContainerFormat ContainerFormat {
            get {
                XElement x = this.GetElement(XName.Get("ContainerFormat", ""));
                return ((ddex_net.xml._20120404.ddexC.ContainerFormat)(x));
            }
            set {
                this.SetElement(XName.Get("ContainerFormat", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Type of ddex:VideoCodec.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, OverallBitRate?, ContainerFormat?, VideoCodecType?, VideoBitRate?, FrameRate?, ImageHeight?, ImageWidth?, AspectRatio?, ColorDepth?, VideoDefinitionType?, AudioCodecType?, AudioBitRate?, NumberOfAudioChannels?, AudioSamplingRate?, AudioBitsPerSample?, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.VideoCodecType VideoCodecType {
            get {
                XElement x = this.GetElement(XName.Get("VideoCodecType", ""));
                return ((ddex_net.xml._20120404.ddexC.VideoCodecType)(x));
            }
            set {
                this.SetElement(XName.Get("VideoCodecType", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing the ddex:BitRate for the video data and a ddex:UnitOfMeasure (the default is ddex:kbps).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, OverallBitRate?, ContainerFormat?, VideoCodecType?, VideoBitRate?, FrameRate?, ImageHeight?, ImageWidth?, AspectRatio?, ColorDepth?, VideoDefinitionType?, AudioCodecType?, AudioBitRate?, NumberOfAudioChannels?, AudioSamplingRate?, AudioBitsPerSample?, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.BitRate VideoBitRate {
            get {
                XElement x = this.GetElement(XName.Get("VideoBitRate", ""));
                return ((ddex_net.xml._20120404.ddexC.BitRate)(x));
            }
            set {
                this.SetElement(XName.Get("VideoBitRate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing the ddex:Rate for a number of frames shown in the ddex:Video in a specific ddex:Period of ddex:Time and a ddex:UnitOfMeasure (the default is ddex:Hz, interlaced).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, OverallBitRate?, ContainerFormat?, VideoCodecType?, VideoBitRate?, FrameRate?, ImageHeight?, ImageWidth?, AspectRatio?, ColorDepth?, VideoDefinitionType?, AudioCodecType?, AudioBitRate?, NumberOfAudioChannels?, AudioSamplingRate?, AudioBitsPerSample?, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.FrameRate FrameRate {
            get {
                XElement x = this.GetElement(XName.Get("FrameRate", ""));
                return ((ddex_net.xml._20120404.ddexC.FrameRate)(x));
            }
            set {
                this.SetElement(XName.Get("FrameRate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing the vertical ddex:Extent of an ddex:Image of the ddex:Video and a ddex:UnitOfMeasure (the default is pixels).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, OverallBitRate?, ContainerFormat?, VideoCodecType?, VideoBitRate?, FrameRate?, ImageHeight?, ImageWidth?, AspectRatio?, ColorDepth?, VideoDefinitionType?, AudioCodecType?, AudioBitRate?, NumberOfAudioChannels?, AudioSamplingRate?, AudioBitsPerSample?, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.Extent ImageHeight {
            get {
                XElement x = this.GetElement(XName.Get("ImageHeight", ""));
                return ((ddex_net.xml._20120404.ddexC.Extent)(x));
            }
            set {
                this.SetElement(XName.Get("ImageHeight", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing the horizontal ddex:Extent of an ddex:Image of the ddex:Video and a ddex:UnitOfMeasure (the default is pixels).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, OverallBitRate?, ContainerFormat?, VideoCodecType?, VideoBitRate?, FrameRate?, ImageHeight?, ImageWidth?, AspectRatio?, ColorDepth?, VideoDefinitionType?, AudioCodecType?, AudioBitRate?, NumberOfAudioChannels?, AudioSamplingRate?, AudioBitsPerSample?, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.Extent ImageWidth {
            get {
                XElement x = this.GetElement(XName.Get("ImageWidth", ""));
                return ((ddex_net.xml._20120404.ddexC.Extent)(x));
            }
            set {
                this.SetElement(XName.Get("ImageWidth", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ratio formed by dividing the ddex:ImageHeight by the ddex:ImageWidth.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, OverallBitRate?, ContainerFormat?, VideoCodecType?, VideoBitRate?, FrameRate?, ImageHeight?, ImageWidth?, AspectRatio?, ColorDepth?, VideoDefinitionType?, AudioCodecType?, AudioBitRate?, NumberOfAudioChannels?, AudioSamplingRate?, AudioBitsPerSample?, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> AspectRatio {
            get {
                XElement x = this.GetElement(XName.Get("AspectRatio", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElement(XName.Get("AspectRatio", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// An amount of data determining the color of a pixel of an ddex:Image of the ddex:Video (given in bits per pixel).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, OverallBitRate?, ContainerFormat?, VideoCodecType?, VideoBitRate?, FrameRate?, ImageHeight?, ImageWidth?, AspectRatio?, ColorDepth?, VideoDefinitionType?, AudioCodecType?, AudioBitRate?, NumberOfAudioChannels?, AudioSamplingRate?, AudioBitsPerSample?, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ColorDepth {
            get {
                XElement x = this.GetElement(XName.Get("ColorDepth", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElement(XName.Get("ColorDepth", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Type of resolution (or definition) in which the ddex:Video is provided.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, OverallBitRate?, ContainerFormat?, VideoCodecType?, VideoBitRate?, FrameRate?, ImageHeight?, ImageWidth?, AspectRatio?, ColorDepth?, VideoDefinitionType?, AudioCodecType?, AudioBitRate?, NumberOfAudioChannels?, AudioSamplingRate?, AudioBitsPerSample?, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public string VideoDefinitionType {
            get {
                XElement x = this.GetElement(XName.Get("VideoDefinitionType", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("VideoDefinitionType", ""), value, "VideoDefinitionType", global::ddex_net.xml._20120404.ddex.VideoDefinitionType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Type of ddex:AudioCodec.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, OverallBitRate?, ContainerFormat?, VideoCodecType?, VideoBitRate?, FrameRate?, ImageHeight?, ImageWidth?, AspectRatio?, ColorDepth?, VideoDefinitionType?, AudioCodecType?, AudioBitRate?, NumberOfAudioChannels?, AudioSamplingRate?, AudioBitsPerSample?, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.AudioCodecType AudioCodecType {
            get {
                XElement x = this.GetElement(XName.Get("AudioCodecType", ""));
                return ((ddex_net.xml._20120404.ddexC.AudioCodecType)(x));
            }
            set {
                this.SetElement(XName.Get("AudioCodecType", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing the ddex:BitRate for the audio data and a ddex:UnitOfMeasure (the default is ddex:kbps).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, OverallBitRate?, ContainerFormat?, VideoCodecType?, VideoBitRate?, FrameRate?, ImageHeight?, ImageWidth?, AspectRatio?, ColorDepth?, VideoDefinitionType?, AudioCodecType?, AudioBitRate?, NumberOfAudioChannels?, AudioSamplingRate?, AudioBitsPerSample?, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.BitRate AudioBitRate {
            get {
                XElement x = this.GetElement(XName.Get("AudioBitRate", ""));
                return ((ddex_net.xml._20120404.ddexC.BitRate)(x));
            }
            set {
                this.SetElement(XName.Get("AudioBitRate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A number of audio channels.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, OverallBitRate?, ContainerFormat?, VideoCodecType?, VideoBitRate?, FrameRate?, ImageHeight?, ImageWidth?, AspectRatio?, ColorDepth?, VideoDefinitionType?, AudioCodecType?, AudioBitRate?, NumberOfAudioChannels?, AudioSamplingRate?, AudioBitsPerSample?, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> NumberOfAudioChannels {
            get {
                XElement x = this.GetElement(XName.Get("NumberOfAudioChannels", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElement(XName.Get("NumberOfAudioChannels", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing the ddex:SamplingRate for the audio data and a ddex:UnitOfMeasure (the default is ddex:Hz).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, OverallBitRate?, ContainerFormat?, VideoCodecType?, VideoBitRate?, FrameRate?, ImageHeight?, ImageWidth?, AspectRatio?, ColorDepth?, VideoDefinitionType?, AudioCodecType?, AudioBitRate?, NumberOfAudioChannels?, AudioSamplingRate?, AudioBitsPerSample?, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.SamplingRate AudioSamplingRate {
            get {
                XElement x = this.GetElement(XName.Get("AudioSamplingRate", ""));
                return ((ddex_net.xml._20120404.ddexC.SamplingRate)(x));
            }
            set {
                this.SetElement(XName.Get("AudioSamplingRate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// An amount of audio data in a sample.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, OverallBitRate?, ContainerFormat?, VideoCodecType?, VideoBitRate?, FrameRate?, ImageHeight?, ImageWidth?, AspectRatio?, ColorDepth?, VideoDefinitionType?, AudioCodecType?, AudioBitRate?, NumberOfAudioChannels?, AudioSamplingRate?, AudioBitsPerSample?, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> AudioBitsPerSample {
            get {
                XElement x = this.GetElement(XName.Get("AudioBitsPerSample", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElement(XName.Get("AudioBitsPerSample", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Duration of the instantiation of the ern:Video if this differs from the ddex:Duration provided for the ern:Video itself (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S). This element must only be used if and when there are no royalty reporting implications on this change in duration and when the specific technical instantiation is a clip taken from a technical instantiation representing the whole ern:Video.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, OverallBitRate?, ContainerFormat?, VideoCodecType?, VideoBitRate?, FrameRate?, ImageHeight?, ImageWidth?, AspectRatio?, ColorDepth?, VideoDefinitionType?, AudioCodecType?, AudioBitRate?, NumberOfAudioChannels?, AudioSamplingRate?, AudioBitsPerSample?, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public System.Nullable<System.TimeSpan> Duration {
            get {
                XElement x = this.GetElement(XName.Get("Duration", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
            set {
                this.SetElement(XName.Get("Duration", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ern:Video needs to be processed (=True) or not (=False) (typically: transcoded) by the ddex:MessageRecipient before being delivered to ddex:Consumers.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, OverallBitRate?, ContainerFormat?, VideoCodecType?, VideoBitRate?, FrameRate?, ImageHeight?, ImageWidth?, AspectRatio?, ColorDepth?, VideoDefinitionType?, AudioCodecType?, AudioBitRate?, NumberOfAudioChannels?, AudioSamplingRate?, AudioBitsPerSample?, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public System.Nullable<bool> ResourceProcessingRequired {
            get {
                XElement x = this.GetElement(XName.Get("ResourceProcessingRequired", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("ResourceProcessingRequired", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Duration of the ern:Video that may be sold to a ddex:Consumer if the ern:Video provided is not intended to be provided to ddex:Consumers 'as is' but will need to be transcoded into an appropriate format by the ddex:MessageRecipient or any other ddex:DSP handling the ddex:Release before it is sold (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, OverallBitRate?, ContainerFormat?, VideoCodecType?, VideoBitRate?, FrameRate?, ImageHeight?, ImageWidth?, AspectRatio?, ColorDepth?, VideoDefinitionType?, AudioCodecType?, AudioBitRate?, NumberOfAudioChannels?, AudioSamplingRate?, AudioBitsPerSample?, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public System.Nullable<System.TimeSpan> UsableResourceDuration {
            get {
                XElement x = this.GetElement(XName.Get("UsableResourceDuration", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
            set {
                this.SetElement(XName.Get("UsableResourceDuration", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ddex:Video is technically a preview of the parent ddex:Resource (=True) or not (=False). Note that nothing can be implied from this element as to the conditions under which the preview can be made available.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, OverallBitRate?, ContainerFormat?, VideoCodecType?, VideoBitRate?, FrameRate?, ImageHeight?, ImageWidth?, AspectRatio?, ColorDepth?, VideoDefinitionType?, AudioCodecType?, AudioBitRate?, NumberOfAudioChannels?, AudioSamplingRate?, AudioBitsPerSample?, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsPreview {
            get {
                XElement x = this.GetElement(XName.Get("IsPreview", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("IsPreview", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a preview.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, OverallBitRate?, ContainerFormat?, VideoCodecType?, VideoBitRate?, FrameRate?, ImageHeight?, ImageWidth?, AspectRatio?, ColorDepth?, VideoDefinitionType?, AudioCodecType?, AudioBitRate?, NumberOfAudioChannels?, AudioSamplingRate?, AudioBitsPerSample?, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public SoundRecordingPreviewDetails PreviewDetails {
            get {
                XElement x = this.GetElement(XName.Get("PreviewDetails", ""));
                return ((SoundRecordingPreviewDetails)(x));
            }
            set {
                this.SetElement(XName.Get("PreviewDetails", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:FulfillmentDate.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, OverallBitRate?, ContainerFormat?, VideoCodecType?, VideoBitRate?, FrameRate?, ImageHeight?, ImageWidth?, AspectRatio?, ColorDepth?, VideoDefinitionType?, AudioCodecType?, AudioBitRate?, NumberOfAudioChannels?, AudioSamplingRate?, AudioBitsPerSample?, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.FulfillmentDate FulfillmentDate {
            get {
                XElement x = this.GetElement(XName.Get("FulfillmentDate", ""));
                return ((ddex_net.xml._20120404.ddexC.FulfillmentDate)(x));
            }
            set {
                this.SetElement(XName.Get("FulfillmentDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of when a consumer is able to get hold of the ddex:Video.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, OverallBitRate?, ContainerFormat?, VideoCodecType?, VideoBitRate?, FrameRate?, ImageHeight?, ImageWidth?, AspectRatio?, ColorDepth?, VideoDefinitionType?, AudioCodecType?, AudioBitRate?, NumberOfAudioChannels?, AudioSamplingRate?, AudioBitsPerSample?, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.FulfillmentDate ConsumerFulfillmentDate {
            get {
                XElement x = this.GetElement(XName.Get("ConsumerFulfillmentDate", ""));
                return ((ddex_net.xml._20120404.ddexC.FulfillmentDate)(x));
            }
            set {
                this.SetElement(XName.Get("ConsumerFulfillmentDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a ddex:Description providing details of how a ddex:DSP can obtain a ddex:File that contains the ddex:Video.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, OverallBitRate?, ContainerFormat?, VideoCodecType?, VideoBitRate?, FrameRate?, ImageHeight?, ImageWidth?, AspectRatio?, ColorDepth?, VideoDefinitionType?, AudioCodecType?, AudioBitRate?, NumberOfAudioChannels?, AudioSamplingRate?, AudioBitsPerSample?, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Description> FileAvailabilityDescription {
            get {
                if ((this.FileAvailabilityDescriptionField == null)) {
                    this.FileAvailabilityDescriptionField = new XTypedList<ddex_net.xml._20120404.ddexC.Description>(this, LinqToXsdTypeManager.Instance, XName.Get("FileAvailabilityDescription", ""));
                }
                return this.FileAvailabilityDescriptionField;
            }
            set {
                if ((value == null)) {
                    this.FileAvailabilityDescriptionField = null;
                }
                else {
                    if ((this.FileAvailabilityDescriptionField == null)) {
                        this.FileAvailabilityDescriptionField = XTypedList<ddex_net.xml._20120404.ddexC.Description>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("FileAvailabilityDescription", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Description>(this.FileAvailabilityDescriptionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:File containing the ddex:Video that a ddex:DSP can obtain.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, OverallBitRate?, ContainerFormat?, VideoCodecType?, VideoBitRate?, FrameRate?, ImageHeight?, ImageWidth?, AspectRatio?, ColorDepth?, VideoDefinitionType?, AudioCodecType?, AudioBitRate?, NumberOfAudioChannels?, AudioSamplingRate?, AudioBitsPerSample?, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.File> File {
            get {
                if ((this.FileField == null)) {
                    this.FileField = new XTypedList<ddex_net.xml._20120404.ddexC.File>(this, LinqToXsdTypeManager.Instance, XName.Get("File", ""));
                }
                return this.FileField;
            }
            set {
                if ((value == null)) {
                    this.FileField = null;
                }
                else {
                    if ((this.FileField == null)) {
                        this.FileField = XTypedList<ddex_net.xml._20120404.ddexC.File>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("File", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.File>(this.FileField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Fingerprint and its governing algorithm.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (TechnicalResourceDetailsReference, DrmPlatformType?, OverallBitRate?, ContainerFormat?, VideoCodecType?, VideoBitRate?, FrameRate?, ImageHeight?, ImageWidth?, AspectRatio?, ColorDepth?, VideoDefinitionType?, AudioCodecType?, AudioBitRate?, NumberOfAudioChannels?, AudioSamplingRate?, AudioBitsPerSample?, Duration?, ResourceProcessingRequired?, UsableResourceDuration?, IsPreview?, PreviewDetails?, FulfillmentDate?, ConsumerFulfillmentDate?, (FileAvailabilityDescription+ | File+)?, Fingerprint*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Fingerprint> Fingerprint {
            get {
                if ((this.FingerprintField == null)) {
                    this.FingerprintField = new XTypedList<ddex_net.xml._20120404.ddexC.Fingerprint>(this, LinqToXsdTypeManager.Instance, XName.Get("Fingerprint", ""));
                }
                return this.FingerprintField;
            }
            set {
                if ((value == null)) {
                    this.FingerprintField = null;
                }
                else {
                    if ((this.FingerprintField == null)) {
                        this.FingerprintField = XTypedList<ddex_net.xml._20120404.ddexC.Fingerprint>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Fingerprint", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Fingerprint>(this.FingerprintField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the TechnicalSoundRecordingDetails as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("TechnicalVideoDetails", "http://ddex.net/xml/ern/341");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TechnicalVideoDetails>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("TechnicalResourceDetailsReference", ""), typeof(string));
            localElementDictionary.Add(XName.Get("DrmPlatformType", ""), typeof(ddex_net.xml._20120404.ddexC.DrmPlatformType));
            localElementDictionary.Add(XName.Get("OverallBitRate", ""), typeof(ddex_net.xml._20120404.ddexC.BitRate));
            localElementDictionary.Add(XName.Get("ContainerFormat", ""), typeof(ddex_net.xml._20120404.ddexC.ContainerFormat));
            localElementDictionary.Add(XName.Get("VideoCodecType", ""), typeof(ddex_net.xml._20120404.ddexC.VideoCodecType));
            localElementDictionary.Add(XName.Get("VideoBitRate", ""), typeof(ddex_net.xml._20120404.ddexC.BitRate));
            localElementDictionary.Add(XName.Get("FrameRate", ""), typeof(ddex_net.xml._20120404.ddexC.FrameRate));
            localElementDictionary.Add(XName.Get("ImageHeight", ""), typeof(ddex_net.xml._20120404.ddexC.Extent));
            localElementDictionary.Add(XName.Get("ImageWidth", ""), typeof(ddex_net.xml._20120404.ddexC.Extent));
            localElementDictionary.Add(XName.Get("AspectRatio", ""), typeof(decimal));
            localElementDictionary.Add(XName.Get("ColorDepth", ""), typeof(decimal));
            localElementDictionary.Add(XName.Get("VideoDefinitionType", ""), typeof(string));
            localElementDictionary.Add(XName.Get("AudioCodecType", ""), typeof(ddex_net.xml._20120404.ddexC.AudioCodecType));
            localElementDictionary.Add(XName.Get("AudioBitRate", ""), typeof(ddex_net.xml._20120404.ddexC.BitRate));
            localElementDictionary.Add(XName.Get("NumberOfAudioChannels", ""), typeof(decimal));
            localElementDictionary.Add(XName.Get("AudioSamplingRate", ""), typeof(ddex_net.xml._20120404.ddexC.SamplingRate));
            localElementDictionary.Add(XName.Get("AudioBitsPerSample", ""), typeof(decimal));
            localElementDictionary.Add(XName.Get("Duration", ""), typeof(System.TimeSpan));
            localElementDictionary.Add(XName.Get("ResourceProcessingRequired", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("UsableResourceDuration", ""), typeof(System.TimeSpan));
            localElementDictionary.Add(XName.Get("IsPreview", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("PreviewDetails", ""), typeof(SoundRecordingPreviewDetails));
            localElementDictionary.Add(XName.Get("FulfillmentDate", ""), typeof(ddex_net.xml._20120404.ddexC.FulfillmentDate));
            localElementDictionary.Add(XName.Get("ConsumerFulfillmentDate", ""), typeof(ddex_net.xml._20120404.ddexC.FulfillmentDate));
            localElementDictionary.Add(XName.Get("FileAvailabilityDescription", ""), typeof(ddex_net.xml._20120404.ddexC.Description));
            localElementDictionary.Add(XName.Get("File", ""), typeof(ddex_net.xml._20120404.ddexC.File));
            localElementDictionary.Add(XName.Get("Fingerprint", ""), typeof(ddex_net.xml._20120404.ddexC.Fingerprint));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        private class TechnicalResourceDetailsReferenceLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "T[\\d\\-_a-zA-Z]+"}, 0, XmlSchemaWhiteSpace.Collapse));
            
            private TechnicalResourceDetailsReferenceLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:Text.
    /// </para>
    /// <para>
    /// Regular expression: (TextType?, IsArtistRelated?, TextId*, IndirectTextId*, ResourceReference, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, Title*, CreationDate?, TextDetailsByTerritory+)
    /// </para>
    /// </summary>
    public partial class Text : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.TextId> TextIdField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.MusicalWorkId> IndirectTextIdField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Title> TitleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TextDetailsByTerritory> TextDetailsByTerritoryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Text(XElement xe) { return XTypedServices.ToXTypedElement<Text>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Text() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("TextType", "")), new NamedContentModelEntity(XName.Get("IsArtistRelated", "")), new NamedContentModelEntity(XName.Get("TextId", "")), new NamedContentModelEntity(XName.Get("IndirectTextId", "")), new NamedContentModelEntity(XName.Get("ResourceReference", "")), new NamedContentModelEntity(XName.Get("ResourceMusicalWorkReferenceList", "")), new NamedContentModelEntity(XName.Get("ResourceContainedResourceReferenceList", "")), new NamedContentModelEntity(XName.Get("Title", "")), new NamedContentModelEntity(XName.Get("CreationDate", "")), new NamedContentModelEntity(XName.Get("TextDetailsByTerritory", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Text.
        /// </para>
        /// <para>
        /// Regular expression: (TextType?, IsArtistRelated?, TextId*, IndirectTextId*, ResourceReference, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, Title*, CreationDate?, TextDetailsByTerritory+)
        /// </para>
        /// </summary>
        public Text() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:Type of the ern:Text.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TextType?, IsArtistRelated?, TextId*, IndirectTextId*, ResourceReference, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, Title*, CreationDate?, TextDetailsByTerritory+)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.TextType TextType {
            get {
                XElement x = this.GetElement(XName.Get("TextType", ""));
                return ((ddex_net.xml._20120404.ddexC.TextType)(x));
            }
            set {
                this.SetElement(XName.Get("TextType", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ern:Text is related to an ddex:Artist (=True) or not (=False).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TextType?, IsArtistRelated?, TextId*, IndirectTextId*, ResourceReference, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, Title*, CreationDate?, TextDetailsByTerritory+)
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsArtistRelated {
            get {
                XElement x = this.GetElement(XName.Get("IsArtistRelated", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("IsArtistRelated", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of an ddex:Identifier of the ern:Text.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (TextType?, IsArtistRelated?, TextId*, IndirectTextId*, ResourceReference, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, Title*, CreationDate?, TextDetailsByTerritory+)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.TextId> TextId {
            get {
                if ((this.TextIdField == null)) {
                    this.TextIdField = new XTypedList<ddex_net.xml._20120404.ddexC.TextId>(this, LinqToXsdTypeManager.Instance, XName.Get("TextId", ""));
                }
                return this.TextIdField;
            }
            set {
                if ((value == null)) {
                    this.TextIdField = null;
                }
                else {
                    if ((this.TextIdField == null)) {
                        this.TextIdField = XTypedList<ddex_net.xml._20120404.ddexC.TextId>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("TextId", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.TextId>(this.TextIdField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:MusicalWorkId of a ddex:MusicalWork used in the ern:Text.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (TextType?, IsArtistRelated?, TextId*, IndirectTextId*, ResourceReference, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, Title*, CreationDate?, TextDetailsByTerritory+)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.MusicalWorkId> IndirectTextId {
            get {
                if ((this.IndirectTextIdField == null)) {
                    this.IndirectTextIdField = new XTypedList<ddex_net.xml._20120404.ddexC.MusicalWorkId>(this, LinqToXsdTypeManager.Instance, XName.Get("IndirectTextId", ""));
                }
                return this.IndirectTextIdField;
            }
            set {
                if ((value == null)) {
                    this.IndirectTextIdField = null;
                }
                else {
                    if ((this.IndirectTextIdField == null)) {
                        this.IndirectTextIdField = XTypedList<ddex_net.xml._20120404.ddexC.MusicalWorkId>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("IndirectTextId", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.MusicalWorkId>(this.IndirectTextIdField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Identifier (specific to the ddex:Message) of the ern:Text within the ddex:Release which contains it. This is a ddex:LocalResourceAnchor starting with the letter A.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TextType?, IsArtistRelated?, TextId*, IndirectTextId*, ResourceReference, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, Title*, CreationDate?, TextDetailsByTerritory+)
        /// </para>
        /// </summary>
        public string ResourceReference {
            get {
                XElement x = this.GetElement(XName.Get("ResourceReference", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("ResourceReference", ""), value, "ResourceReference", ResourceReferenceLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of one or more ddex:MusicalWorks contained in the ern:Text.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TextType?, IsArtistRelated?, TextId*, IndirectTextId*, ResourceReference, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, Title*, CreationDate?, TextDetailsByTerritory+)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.ResourceMusicalWorkReferenceList ResourceMusicalWorkReferenceList {
            get {
                XElement x = this.GetElement(XName.Get("ResourceMusicalWorkReferenceList", ""));
                return ((ddex_net.xml._20120404.ddexC.ResourceMusicalWorkReferenceList)(x));
            }
            set {
                this.SetElement(XName.Get("ResourceMusicalWorkReferenceList", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:ResourceContainedResourceReferences referring to a ddex:Resource that is contained in the current ern:Text.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TextType?, IsArtistRelated?, TextId*, IndirectTextId*, ResourceReference, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, Title*, CreationDate?, TextDetailsByTerritory+)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.ResourceContainedResourceReferenceList ResourceContainedResourceReferenceList {
            get {
                XElement x = this.GetElement(XName.Get("ResourceContainedResourceReferenceList", ""));
                return ((ddex_net.xml._20120404.ddexC.ResourceContainedResourceReferenceList)(x));
            }
            set {
                this.SetElement(XName.Get("ResourceContainedResourceReferenceList", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Title of the ern:Text.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (TextType?, IsArtistRelated?, TextId*, IndirectTextId*, ResourceReference, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, Title*, CreationDate?, TextDetailsByTerritory+)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Title> Title {
            get {
                if ((this.TitleField == null)) {
                    this.TitleField = new XTypedList<ddex_net.xml._20120404.ddexC.Title>(this, LinqToXsdTypeManager.Instance, XName.Get("Title", ""));
                }
                return this.TitleField;
            }
            set {
                if ((value == null)) {
                    this.TitleField = null;
                }
                else {
                    if ((this.TitleField == null)) {
                        this.TitleField = XTypedList<ddex_net.xml._20120404.ddexC.Title>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Title", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Title>(this.TitleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ern:Text was created.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TextType?, IsArtistRelated?, TextId*, IndirectTextId*, ResourceReference, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, Title*, CreationDate?, TextDetailsByTerritory+)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.EventDate CreationDate {
            get {
                XElement x = this.GetElement(XName.Get("CreationDate", ""));
                return ((ddex_net.xml._20120404.ddexC.EventDate)(x));
            }
            set {
                this.SetElement(XName.Get("CreationDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ern:Text which may vary according to ddex:Territory of release.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (TextType?, IsArtistRelated?, TextId*, IndirectTextId*, ResourceReference, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, Title*, CreationDate?, TextDetailsByTerritory+)
        /// </para>
        /// </summary>
        public IList<TextDetailsByTerritory> TextDetailsByTerritory {
            get {
                if ((this.TextDetailsByTerritoryField == null)) {
                    this.TextDetailsByTerritoryField = new XTypedList<TextDetailsByTerritory>(this, LinqToXsdTypeManager.Instance, XName.Get("TextDetailsByTerritory", ""));
                }
                return this.TextDetailsByTerritoryField;
            }
            set {
                if ((value == null)) {
                    this.TextDetailsByTerritoryField = null;
                }
                else {
                    if ((this.TextDetailsByTerritoryField == null)) {
                        this.TextDetailsByTerritoryField = XTypedList<TextDetailsByTerritory>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("TextDetailsByTerritory", ""));
                    }
                    else {
                        XTypedServices.SetList<TextDetailsByTerritory>(this.TextDetailsByTerritoryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ern:Text ddex:Element was updated (=True) or not (=False). The ddex:Flag may only be used when the ddex:UpdateIndicator is set to ddex:UpdateMessage. When this ddex:Boolean ddex:Flag is set to true, the ddex:MessageRecipient is expected to replace any previously provided ern:Text data with the now provided data.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsUpdated {
            get {
                XAttribute x = this.Attribute(XName.Get("IsUpdated", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("IsUpdated", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the ern:Text as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Text", "http://ddex.net/xml/ern/341");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Text>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("TextType", ""), typeof(ddex_net.xml._20120404.ddexC.TextType));
            localElementDictionary.Add(XName.Get("IsArtistRelated", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("TextId", ""), typeof(ddex_net.xml._20120404.ddexC.TextId));
            localElementDictionary.Add(XName.Get("IndirectTextId", ""), typeof(ddex_net.xml._20120404.ddexC.MusicalWorkId));
            localElementDictionary.Add(XName.Get("ResourceReference", ""), typeof(string));
            localElementDictionary.Add(XName.Get("ResourceMusicalWorkReferenceList", ""), typeof(ddex_net.xml._20120404.ddexC.ResourceMusicalWorkReferenceList));
            localElementDictionary.Add(XName.Get("ResourceContainedResourceReferenceList", ""), typeof(ddex_net.xml._20120404.ddexC.ResourceContainedResourceReferenceList));
            localElementDictionary.Add(XName.Get("Title", ""), typeof(ddex_net.xml._20120404.ddexC.Title));
            localElementDictionary.Add(XName.Get("CreationDate", ""), typeof(ddex_net.xml._20120404.ddexC.EventDate));
            localElementDictionary.Add(XName.Get("TextDetailsByTerritory", ""), typeof(TextDetailsByTerritory));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class ResourceReferenceLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "A[\\d\\-_a-zA-Z]+"}, 0, XmlSchemaWhiteSpace.Collapse));
            
            private ResourceReferenceLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of ddex:Descriptors, Dates and other attributes of a ddex:Text which may vary according to ddex:Territory of release.
    /// </para>
    /// <para>
    /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalTextDetails*)
    /// </para>
    /// </summary>
    public partial class TextDetailsByTerritory : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<object> TerritoryCodeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<object> ExcludedTerritoryCodeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.ResourceContributor> ResourceContributorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.IndirectResourceContributor> IndirectResourceContributorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.CLine> CLineField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Keywords> KeywordsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Genre> GenreField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.ParentalWarningType> ParentalWarningTypeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TechnicalTextDetails> TechnicalTextDetailsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator TextDetailsByTerritory(XElement xe) { return XTypedServices.ToXTypedElement<TextDetailsByTerritory>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TextDetailsByTerritory() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:Descriptors, Dates and other attributes of a ddex:Text which may vary according to ddex:Territory of release.
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalTextDetails*)
        /// </para>
        /// </summary>
        public TextDetailsByTerritory() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Territory to which the ddex:Text details apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:ExcludedTerritory shall be present, but not both.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalTextDetails*)
        /// </para>
        /// </summary>
        public IList<object> TerritoryCode {
            get {
                if ((this.TerritoryCodeField == null)) {
                    this.TerritoryCodeField = new XSimpleList<object>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, XName.Get("TerritoryCode", ""));
                }
                return this.TerritoryCodeField;
            }
            set {
                if ((value == null)) {
                    this.TerritoryCodeField = null;
                }
                else {
                    if ((this.TerritoryCodeField == null)) {
                        this.TerritoryCodeField = XSimpleList<object>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, value, XName.Get("TerritoryCode", ""));
                    }
                    else {
                        XTypedServices.SetList<System.Object>(this.TerritoryCodeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Territory to which the ddex:Text details do not apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:Territory shall be present, but not both.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalTextDetails*)
        /// </para>
        /// </summary>
        public IList<object> ExcludedTerritoryCode {
            get {
                if ((this.ExcludedTerritoryCodeField == null)) {
                    this.ExcludedTerritoryCodeField = new XSimpleList<object>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, XName.Get("ExcludedTerritoryCode", ""));
                }
                return this.ExcludedTerritoryCodeField;
            }
            set {
                if ((value == null)) {
                    this.ExcludedTerritoryCodeField = null;
                }
                else {
                    if ((this.ExcludedTerritoryCodeField == null)) {
                        this.ExcludedTerritoryCodeField = XSimpleList<object>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, value, XName.Get("ExcludedTerritoryCode", ""));
                    }
                    else {
                        XTypedServices.SetList<System.Object>(this.ExcludedTerritoryCodeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Contributor to the ddex:Text.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalTextDetails*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.ResourceContributor> ResourceContributor {
            get {
                if ((this.ResourceContributorField == null)) {
                    this.ResourceContributorField = new XTypedList<ddex_net.xml._20120404.ddexC.ResourceContributor>(this, LinqToXsdTypeManager.Instance, XName.Get("ResourceContributor", ""));
                }
                return this.ResourceContributorField;
            }
            set {
                if ((value == null)) {
                    this.ResourceContributorField = null;
                }
                else {
                    if ((this.ResourceContributorField == null)) {
                        this.ResourceContributorField = XTypedList<ddex_net.xml._20120404.ddexC.ResourceContributor>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ResourceContributor", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.ResourceContributor>(this.ResourceContributorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of an indirect ddex:Contributor to the ddex:Text.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalTextDetails*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.IndirectResourceContributor> IndirectResourceContributor {
            get {
                if ((this.IndirectResourceContributorField == null)) {
                    this.IndirectResourceContributorField = new XTypedList<ddex_net.xml._20120404.ddexC.IndirectResourceContributor>(this, LinqToXsdTypeManager.Instance, XName.Get("IndirectResourceContributor", ""));
                }
                return this.IndirectResourceContributorField;
            }
            set {
                if ((value == null)) {
                    this.IndirectResourceContributorField = null;
                }
                else {
                    if ((this.IndirectResourceContributorField == null)) {
                        this.IndirectResourceContributorField = XTypedList<ddex_net.xml._20120404.ddexC.IndirectResourceContributor>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("IndirectResourceContributor", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.IndirectResourceContributor>(this.IndirectResourceContributorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:CLine for the ddex:Text.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalTextDetails*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.CLine> CLine {
            get {
                if ((this.CLineField == null)) {
                    this.CLineField = new XTypedList<ddex_net.xml._20120404.ddexC.CLine>(this, LinqToXsdTypeManager.Instance, XName.Get("CLine", ""));
                }
                return this.CLineField;
            }
            set {
                if ((value == null)) {
                    this.CLineField = null;
                }
                else {
                    if ((this.CLineField == null)) {
                        this.CLineField = XTypedList<ddex_net.xml._20120404.ddexC.CLine>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CLine", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.CLine>(this.CLineField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing an ddex:Annotation which acknowledges record companies and/or other Parties giving permission for ddex:Artists or others featured in the ddex:Text.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalTextDetails*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.CourtesyLine CourtesyLine {
            get {
                XElement x = this.GetElement(XName.Get("CourtesyLine", ""));
                return ((ddex_net.xml._20120404.ddexC.CourtesyLine)(x));
            }
            set {
                this.SetElement(XName.Get("CourtesyLine", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ddex:Text was originally published, whether for physical or electronic/online distribution.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalTextDetails*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.EventDate OriginalResourceReleaseDate {
            get {
                XElement x = this.GetElement(XName.Get("OriginalResourceReleaseDate", ""));
                return ((ddex_net.xml._20120404.ddexC.EventDate)(x));
            }
            set {
                this.SetElement(XName.Get("OriginalResourceReleaseDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:FulfillmentDate.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalTextDetails*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.FulfillmentDate FulfillmentDate {
            get {
                XElement x = this.GetElement(XName.Get("FulfillmentDate", ""));
                return ((ddex_net.xml._20120404.ddexC.FulfillmentDate)(x));
            }
            set {
                this.SetElement(XName.Get("FulfillmentDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Description of the ddex:Text containing ddex:Keywords.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalTextDetails*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Keywords> Keywords {
            get {
                if ((this.KeywordsField == null)) {
                    this.KeywordsField = new XTypedList<ddex_net.xml._20120404.ddexC.Keywords>(this, LinqToXsdTypeManager.Instance, XName.Get("Keywords", ""));
                }
                return this.KeywordsField;
            }
            set {
                if ((value == null)) {
                    this.KeywordsField = null;
                }
                else {
                    if ((this.KeywordsField == null)) {
                        this.KeywordsField = XTypedList<ddex_net.xml._20120404.ddexC.Keywords>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Keywords", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Keywords>(this.KeywordsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Synopsis of the ddex:Text.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalTextDetails*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.Synopsis Synopsis {
            get {
                XElement x = this.GetElement(XName.Get("Synopsis", ""));
                return ((ddex_net.xml._20120404.ddexC.Synopsis)(x));
            }
            set {
                this.SetElement(XName.Get("Synopsis", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Genre to which the ddex:Text belongs.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalTextDetails*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Genre> Genre {
            get {
                if ((this.GenreField == null)) {
                    this.GenreField = new XTypedList<ddex_net.xml._20120404.ddexC.Genre>(this, LinqToXsdTypeManager.Instance, XName.Get("Genre", ""));
                }
                return this.GenreField;
            }
            set {
                if ((value == null)) {
                    this.GenreField = null;
                }
                else {
                    if ((this.GenreField == null)) {
                        this.GenreField = XTypedList<ddex_net.xml._20120404.ddexC.Genre>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Genre", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Genre>(this.GenreField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the classification of the ddex:Text according to advice which it carries about the level of explicitness or offensiveness of its content.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalTextDetails*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.ParentalWarningType> ParentalWarningType {
            get {
                if ((this.ParentalWarningTypeField == null)) {
                    this.ParentalWarningTypeField = new XTypedList<ddex_net.xml._20120404.ddexC.ParentalWarningType>(this, LinqToXsdTypeManager.Instance, XName.Get("ParentalWarningType", ""));
                }
                return this.ParentalWarningTypeField;
            }
            set {
                if ((value == null)) {
                    this.ParentalWarningTypeField = null;
                }
                else {
                    if ((this.ParentalWarningTypeField == null)) {
                        this.ParentalWarningTypeField = XTypedList<ddex_net.xml._20120404.ddexC.ParentalWarningType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ParentalWarningType", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.ParentalWarningType>(this.ParentalWarningTypeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing technical details of the ddex:Text.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalTextDetails*)
        /// </para>
        /// </summary>
        public IList<TechnicalTextDetails> TechnicalTextDetails {
            get {
                if ((this.TechnicalTextDetailsField == null)) {
                    this.TechnicalTextDetailsField = new XTypedList<TechnicalTextDetails>(this, LinqToXsdTypeManager.Instance, XName.Get("TechnicalTextDetails", ""));
                }
                return this.TechnicalTextDetailsField;
            }
            set {
                if ((value == null)) {
                    this.TechnicalTextDetailsField = null;
                }
                else {
                    if ((this.TechnicalTextDetailsField == null)) {
                        this.TechnicalTextDetailsField = XTypedList<TechnicalTextDetails>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("TechnicalTextDetails", ""));
                    }
                    else {
                        XTypedServices.SetList<TechnicalTextDetails>(this.TechnicalTextDetailsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the ddexC:TextDetailsByTerritory as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("TextDetailsByTerritory", "http://ddex.net/xml/ern/341");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TextDetailsByTerritory>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("TerritoryCode", ""), typeof(object));
            localElementDictionary.Add(XName.Get("ExcludedTerritoryCode", ""), typeof(object));
            localElementDictionary.Add(XName.Get("ResourceContributor", ""), typeof(ddex_net.xml._20120404.ddexC.ResourceContributor));
            localElementDictionary.Add(XName.Get("IndirectResourceContributor", ""), typeof(ddex_net.xml._20120404.ddexC.IndirectResourceContributor));
            localElementDictionary.Add(XName.Get("CLine", ""), typeof(ddex_net.xml._20120404.ddexC.CLine));
            localElementDictionary.Add(XName.Get("CourtesyLine", ""), typeof(ddex_net.xml._20120404.ddexC.CourtesyLine));
            localElementDictionary.Add(XName.Get("OriginalResourceReleaseDate", ""), typeof(ddex_net.xml._20120404.ddexC.EventDate));
            localElementDictionary.Add(XName.Get("FulfillmentDate", ""), typeof(ddex_net.xml._20120404.ddexC.FulfillmentDate));
            localElementDictionary.Add(XName.Get("Keywords", ""), typeof(ddex_net.xml._20120404.ddexC.Keywords));
            localElementDictionary.Add(XName.Get("Synopsis", ""), typeof(ddex_net.xml._20120404.ddexC.Synopsis));
            localElementDictionary.Add(XName.Get("Genre", ""), typeof(ddex_net.xml._20120404.ddexC.Genre));
            localElementDictionary.Add(XName.Get("ParentalWarningType", ""), typeof(ddex_net.xml._20120404.ddexC.ParentalWarningType));
            localElementDictionary.Add(XName.Get("TechnicalTextDetails", ""), typeof(TechnicalTextDetails));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:UserDefinedResource.
    /// </para>
    /// <para>
    /// Regular expression: (UserDefinedResourceType?, IsArtistRelated?, UserDefinedResourceId+, IndirectUserDefinedResourceId*, ResourceReference, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, Title*, UserDefinedValue*, UserDefinedResourceDetailsByTerritory+)
    /// </para>
    /// </summary>
    public partial class UserDefinedResource : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.UserDefinedResourceId> UserDefinedResourceIdField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.MusicalWorkId> IndirectUserDefinedResourceIdField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Title> TitleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.UserDefinedValue> UserDefinedValueField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UserDefinedResourceDetailsByTerritory> UserDefinedResourceDetailsByTerritoryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator UserDefinedResource(XElement xe) { return XTypedServices.ToXTypedElement<UserDefinedResource>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static UserDefinedResource() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("UserDefinedResourceType", "")), new NamedContentModelEntity(XName.Get("IsArtistRelated", "")), new NamedContentModelEntity(XName.Get("UserDefinedResourceId", "")), new NamedContentModelEntity(XName.Get("IndirectUserDefinedResourceId", "")), new NamedContentModelEntity(XName.Get("ResourceReference", "")), new NamedContentModelEntity(XName.Get("ResourceMusicalWorkReferenceList", "")), new NamedContentModelEntity(XName.Get("ResourceContainedResourceReferenceList", "")), new NamedContentModelEntity(XName.Get("Title", "")), new NamedContentModelEntity(XName.Get("UserDefinedValue", "")), new NamedContentModelEntity(XName.Get("UserDefinedResourceDetailsByTerritory", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:UserDefinedResource.
        /// </para>
        /// <para>
        /// Regular expression: (UserDefinedResourceType?, IsArtistRelated?, UserDefinedResourceId+, IndirectUserDefinedResourceId*, ResourceReference, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, Title*, UserDefinedValue*, UserDefinedResourceDetailsByTerritory+)
        /// </para>
        /// </summary>
        public UserDefinedResource() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:Type of the ern:UserDefinedResource.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (UserDefinedResourceType?, IsArtistRelated?, UserDefinedResourceId+, IndirectUserDefinedResourceId*, ResourceReference, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, Title*, UserDefinedValue*, UserDefinedResourceDetailsByTerritory+)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.UserDefinedResourceType UserDefinedResourceType {
            get {
                XElement x = this.GetElement(XName.Get("UserDefinedResourceType", ""));
                return ((ddex_net.xml._20120404.ddexC.UserDefinedResourceType)(x));
            }
            set {
                this.SetElement(XName.Get("UserDefinedResourceType", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ern:UserDefinedResource is related to an ddex:Artist (=True) or not (=False).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (UserDefinedResourceType?, IsArtistRelated?, UserDefinedResourceId+, IndirectUserDefinedResourceId*, ResourceReference, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, Title*, UserDefinedValue*, UserDefinedResourceDetailsByTerritory+)
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsArtistRelated {
            get {
                XElement x = this.GetElement(XName.Get("IsArtistRelated", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("IsArtistRelated", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:Identifiers of the ern:UserDefinedResource.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (UserDefinedResourceType?, IsArtistRelated?, UserDefinedResourceId+, IndirectUserDefinedResourceId*, ResourceReference, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, Title*, UserDefinedValue*, UserDefinedResourceDetailsByTerritory+)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.UserDefinedResourceId> UserDefinedResourceId {
            get {
                if ((this.UserDefinedResourceIdField == null)) {
                    this.UserDefinedResourceIdField = new XTypedList<ddex_net.xml._20120404.ddexC.UserDefinedResourceId>(this, LinqToXsdTypeManager.Instance, XName.Get("UserDefinedResourceId", ""));
                }
                return this.UserDefinedResourceIdField;
            }
            set {
                if ((value == null)) {
                    this.UserDefinedResourceIdField = null;
                }
                else {
                    if ((this.UserDefinedResourceIdField == null)) {
                        this.UserDefinedResourceIdField = XTypedList<ddex_net.xml._20120404.ddexC.UserDefinedResourceId>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("UserDefinedResourceId", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.UserDefinedResourceId>(this.UserDefinedResourceIdField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:MusicalWorkId of a ddex:MusicalWork used in the ern:UserDefinedResource.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (UserDefinedResourceType?, IsArtistRelated?, UserDefinedResourceId+, IndirectUserDefinedResourceId*, ResourceReference, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, Title*, UserDefinedValue*, UserDefinedResourceDetailsByTerritory+)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.MusicalWorkId> IndirectUserDefinedResourceId {
            get {
                if ((this.IndirectUserDefinedResourceIdField == null)) {
                    this.IndirectUserDefinedResourceIdField = new XTypedList<ddex_net.xml._20120404.ddexC.MusicalWorkId>(this, LinqToXsdTypeManager.Instance, XName.Get("IndirectUserDefinedResourceId", ""));
                }
                return this.IndirectUserDefinedResourceIdField;
            }
            set {
                if ((value == null)) {
                    this.IndirectUserDefinedResourceIdField = null;
                }
                else {
                    if ((this.IndirectUserDefinedResourceIdField == null)) {
                        this.IndirectUserDefinedResourceIdField = XTypedList<ddex_net.xml._20120404.ddexC.MusicalWorkId>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("IndirectUserDefinedResourceId", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.MusicalWorkId>(this.IndirectUserDefinedResourceIdField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Identifier (specific to the ddex:Message) of the ern:UserDefinedResource within the ddex:Release which contains it. This is a ddex:LocalResourceAnchor starting with the letter A.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (UserDefinedResourceType?, IsArtistRelated?, UserDefinedResourceId+, IndirectUserDefinedResourceId*, ResourceReference, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, Title*, UserDefinedValue*, UserDefinedResourceDetailsByTerritory+)
        /// </para>
        /// </summary>
        public string ResourceReference {
            get {
                XElement x = this.GetElement(XName.Get("ResourceReference", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("ResourceReference", ""), value, "ResourceReference", ResourceReferenceLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of one or more ddex:MusicalWorks contained in the ern:UserDefinedResource.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (UserDefinedResourceType?, IsArtistRelated?, UserDefinedResourceId+, IndirectUserDefinedResourceId*, ResourceReference, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, Title*, UserDefinedValue*, UserDefinedResourceDetailsByTerritory+)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.ResourceMusicalWorkReferenceList ResourceMusicalWorkReferenceList {
            get {
                XElement x = this.GetElement(XName.Get("ResourceMusicalWorkReferenceList", ""));
                return ((ddex_net.xml._20120404.ddexC.ResourceMusicalWorkReferenceList)(x));
            }
            set {
                this.SetElement(XName.Get("ResourceMusicalWorkReferenceList", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:ResourceContainedResourceReferences referring to a ddex:Resource that is contained in the current ern:UserDefinedResource.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (UserDefinedResourceType?, IsArtistRelated?, UserDefinedResourceId+, IndirectUserDefinedResourceId*, ResourceReference, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, Title*, UserDefinedValue*, UserDefinedResourceDetailsByTerritory+)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.ResourceContainedResourceReferenceList ResourceContainedResourceReferenceList {
            get {
                XElement x = this.GetElement(XName.Get("ResourceContainedResourceReferenceList", ""));
                return ((ddex_net.xml._20120404.ddexC.ResourceContainedResourceReferenceList)(x));
            }
            set {
                this.SetElement(XName.Get("ResourceContainedResourceReferenceList", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Title of the ern:UserDefinedResource.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (UserDefinedResourceType?, IsArtistRelated?, UserDefinedResourceId+, IndirectUserDefinedResourceId*, ResourceReference, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, Title*, UserDefinedValue*, UserDefinedResourceDetailsByTerritory+)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Title> Title {
            get {
                if ((this.TitleField == null)) {
                    this.TitleField = new XTypedList<ddex_net.xml._20120404.ddexC.Title>(this, LinqToXsdTypeManager.Instance, XName.Get("Title", ""));
                }
                return this.TitleField;
            }
            set {
                if ((value == null)) {
                    this.TitleField = null;
                }
                else {
                    if ((this.TitleField == null)) {
                        this.TitleField = XTypedList<ddex_net.xml._20120404.ddexC.Title>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Title", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Title>(this.TitleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:UserDefinedValue.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (UserDefinedResourceType?, IsArtistRelated?, UserDefinedResourceId+, IndirectUserDefinedResourceId*, ResourceReference, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, Title*, UserDefinedValue*, UserDefinedResourceDetailsByTerritory+)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.UserDefinedValue> UserDefinedValue {
            get {
                if ((this.UserDefinedValueField == null)) {
                    this.UserDefinedValueField = new XTypedList<ddex_net.xml._20120404.ddexC.UserDefinedValue>(this, LinqToXsdTypeManager.Instance, XName.Get("UserDefinedValue", ""));
                }
                return this.UserDefinedValueField;
            }
            set {
                if ((value == null)) {
                    this.UserDefinedValueField = null;
                }
                else {
                    if ((this.UserDefinedValueField == null)) {
                        this.UserDefinedValueField = XTypedList<ddex_net.xml._20120404.ddexC.UserDefinedValue>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("UserDefinedValue", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.UserDefinedValue>(this.UserDefinedValueField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ern:UserDefinedResource which may vary according to ddex:Territory of release.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (UserDefinedResourceType?, IsArtistRelated?, UserDefinedResourceId+, IndirectUserDefinedResourceId*, ResourceReference, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, Title*, UserDefinedValue*, UserDefinedResourceDetailsByTerritory+)
        /// </para>
        /// </summary>
        public IList<UserDefinedResourceDetailsByTerritory> UserDefinedResourceDetailsByTerritory {
            get {
                if ((this.UserDefinedResourceDetailsByTerritoryField == null)) {
                    this.UserDefinedResourceDetailsByTerritoryField = new XTypedList<UserDefinedResourceDetailsByTerritory>(this, LinqToXsdTypeManager.Instance, XName.Get("UserDefinedResourceDetailsByTerritory", ""));
                }
                return this.UserDefinedResourceDetailsByTerritoryField;
            }
            set {
                if ((value == null)) {
                    this.UserDefinedResourceDetailsByTerritoryField = null;
                }
                else {
                    if ((this.UserDefinedResourceDetailsByTerritoryField == null)) {
                        this.UserDefinedResourceDetailsByTerritoryField = XTypedList<UserDefinedResourceDetailsByTerritory>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("UserDefinedResourceDetailsByTerritory", ""));
                    }
                    else {
                        XTypedServices.SetList<UserDefinedResourceDetailsByTerritory>(this.UserDefinedResourceDetailsByTerritoryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ern:UserDefinedResource ddex:Element was updated (=True) or not (=False). The ddex:Flag may only be used when the ddex:UpdateIndicator is set to ddex:UpdateMessage. When this ddex:Boolean ddex:Flag is set to true, the ddex:MessageRecipient is expected to replace any previously provided ern:UserDefinedResource data with the now provided data.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsUpdated {
            get {
                XAttribute x = this.Attribute(XName.Get("IsUpdated", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("IsUpdated", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the ern:UserDefinedResource as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("UserDefinedResource", "http://ddex.net/xml/ern/341");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<UserDefinedResource>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("UserDefinedResourceType", ""), typeof(ddex_net.xml._20120404.ddexC.UserDefinedResourceType));
            localElementDictionary.Add(XName.Get("IsArtistRelated", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("UserDefinedResourceId", ""), typeof(ddex_net.xml._20120404.ddexC.UserDefinedResourceId));
            localElementDictionary.Add(XName.Get("IndirectUserDefinedResourceId", ""), typeof(ddex_net.xml._20120404.ddexC.MusicalWorkId));
            localElementDictionary.Add(XName.Get("ResourceReference", ""), typeof(string));
            localElementDictionary.Add(XName.Get("ResourceMusicalWorkReferenceList", ""), typeof(ddex_net.xml._20120404.ddexC.ResourceMusicalWorkReferenceList));
            localElementDictionary.Add(XName.Get("ResourceContainedResourceReferenceList", ""), typeof(ddex_net.xml._20120404.ddexC.ResourceContainedResourceReferenceList));
            localElementDictionary.Add(XName.Get("Title", ""), typeof(ddex_net.xml._20120404.ddexC.Title));
            localElementDictionary.Add(XName.Get("UserDefinedValue", ""), typeof(ddex_net.xml._20120404.ddexC.UserDefinedValue));
            localElementDictionary.Add(XName.Get("UserDefinedResourceDetailsByTerritory", ""), typeof(UserDefinedResourceDetailsByTerritory));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class ResourceReferenceLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "A[\\d\\-_a-zA-Z]+"}, 0, XmlSchemaWhiteSpace.Collapse));
            
            private ResourceReferenceLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of ddex:Descriptors, Dates and other attributes of a ddex:UserDefinedResource application which may vary according to ddex:Territory of release.
    /// </para>
    /// <para>
    /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, UserDefinedValue*, PLine*, CLine*, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalUserDefinedResourceDetails*)
    /// </para>
    /// </summary>
    public partial class UserDefinedResourceDetailsByTerritory : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<object> TerritoryCodeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<object> ExcludedTerritoryCodeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.ResourceContributor> ResourceContributorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.IndirectResourceContributor> IndirectResourceContributorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.UserDefinedValue> UserDefinedValueField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.PLine> PLineField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.CLine> CLineField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Keywords> KeywordsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Genre> GenreField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.ParentalWarningType> ParentalWarningTypeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TechnicalUserDefinedResourceDetails> TechnicalUserDefinedResourceDetailsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator UserDefinedResourceDetailsByTerritory(XElement xe) { return XTypedServices.ToXTypedElement<UserDefinedResourceDetailsByTerritory>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static UserDefinedResourceDetailsByTerritory() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:Descriptors, Dates and other attributes of a ddex:UserDefinedResource application which may vary according to ddex:Territory of release.
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, UserDefinedValue*, PLine*, CLine*, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalUserDefinedResourceDetails*)
        /// </para>
        /// </summary>
        public UserDefinedResourceDetailsByTerritory() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Territory to which the ddex:UserDefinedResource details apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:ExcludedTerritory shall be present, but not both. 
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, UserDefinedValue*, PLine*, CLine*, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalUserDefinedResourceDetails*)
        /// </para>
        /// </summary>
        public IList<object> TerritoryCode {
            get {
                if ((this.TerritoryCodeField == null)) {
                    this.TerritoryCodeField = new XSimpleList<object>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, XName.Get("TerritoryCode", ""));
                }
                return this.TerritoryCodeField;
            }
            set {
                if ((value == null)) {
                    this.TerritoryCodeField = null;
                }
                else {
                    if ((this.TerritoryCodeField == null)) {
                        this.TerritoryCodeField = XSimpleList<object>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, value, XName.Get("TerritoryCode", ""));
                    }
                    else {
                        XTypedServices.SetList<System.Object>(this.TerritoryCodeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Territory to which the ddex:UserDefinedResource details do not apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:Territory shall be present, but not both.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, UserDefinedValue*, PLine*, CLine*, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalUserDefinedResourceDetails*)
        /// </para>
        /// </summary>
        public IList<object> ExcludedTerritoryCode {
            get {
                if ((this.ExcludedTerritoryCodeField == null)) {
                    this.ExcludedTerritoryCodeField = new XSimpleList<object>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, XName.Get("ExcludedTerritoryCode", ""));
                }
                return this.ExcludedTerritoryCodeField;
            }
            set {
                if ((value == null)) {
                    this.ExcludedTerritoryCodeField = null;
                }
                else {
                    if ((this.ExcludedTerritoryCodeField == null)) {
                        this.ExcludedTerritoryCodeField = XSimpleList<object>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, value, XName.Get("ExcludedTerritoryCode", ""));
                    }
                    else {
                        XTypedServices.SetList<System.Object>(this.ExcludedTerritoryCodeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Contributor to the ddex:UserDefinedResource.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, UserDefinedValue*, PLine*, CLine*, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalUserDefinedResourceDetails*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.ResourceContributor> ResourceContributor {
            get {
                if ((this.ResourceContributorField == null)) {
                    this.ResourceContributorField = new XTypedList<ddex_net.xml._20120404.ddexC.ResourceContributor>(this, LinqToXsdTypeManager.Instance, XName.Get("ResourceContributor", ""));
                }
                return this.ResourceContributorField;
            }
            set {
                if ((value == null)) {
                    this.ResourceContributorField = null;
                }
                else {
                    if ((this.ResourceContributorField == null)) {
                        this.ResourceContributorField = XTypedList<ddex_net.xml._20120404.ddexC.ResourceContributor>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ResourceContributor", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.ResourceContributor>(this.ResourceContributorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of an indirect ddex:Contributor to the ddex:UserDefinedResource.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, UserDefinedValue*, PLine*, CLine*, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalUserDefinedResourceDetails*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.IndirectResourceContributor> IndirectResourceContributor {
            get {
                if ((this.IndirectResourceContributorField == null)) {
                    this.IndirectResourceContributorField = new XTypedList<ddex_net.xml._20120404.ddexC.IndirectResourceContributor>(this, LinqToXsdTypeManager.Instance, XName.Get("IndirectResourceContributor", ""));
                }
                return this.IndirectResourceContributorField;
            }
            set {
                if ((value == null)) {
                    this.IndirectResourceContributorField = null;
                }
                else {
                    if ((this.IndirectResourceContributorField == null)) {
                        this.IndirectResourceContributorField = XTypedList<ddex_net.xml._20120404.ddexC.IndirectResourceContributor>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("IndirectResourceContributor", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.IndirectResourceContributor>(this.IndirectResourceContributorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:UserDefinedValue.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, UserDefinedValue*, PLine*, CLine*, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalUserDefinedResourceDetails*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.UserDefinedValue> UserDefinedValue {
            get {
                if ((this.UserDefinedValueField == null)) {
                    this.UserDefinedValueField = new XTypedList<ddex_net.xml._20120404.ddexC.UserDefinedValue>(this, LinqToXsdTypeManager.Instance, XName.Get("UserDefinedValue", ""));
                }
                return this.UserDefinedValueField;
            }
            set {
                if ((value == null)) {
                    this.UserDefinedValueField = null;
                }
                else {
                    if ((this.UserDefinedValueField == null)) {
                        this.UserDefinedValueField = XTypedList<ddex_net.xml._20120404.ddexC.UserDefinedValue>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("UserDefinedValue", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.UserDefinedValue>(this.UserDefinedValueField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:PLine for the ddex:UserDefinedResource.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, UserDefinedValue*, PLine*, CLine*, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalUserDefinedResourceDetails*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.PLine> PLine {
            get {
                if ((this.PLineField == null)) {
                    this.PLineField = new XTypedList<ddex_net.xml._20120404.ddexC.PLine>(this, LinqToXsdTypeManager.Instance, XName.Get("PLine", ""));
                }
                return this.PLineField;
            }
            set {
                if ((value == null)) {
                    this.PLineField = null;
                }
                else {
                    if ((this.PLineField == null)) {
                        this.PLineField = XTypedList<ddex_net.xml._20120404.ddexC.PLine>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("PLine", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.PLine>(this.PLineField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:CLine for the ddex:UserDefinedResource.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, UserDefinedValue*, PLine*, CLine*, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalUserDefinedResourceDetails*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.CLine> CLine {
            get {
                if ((this.CLineField == null)) {
                    this.CLineField = new XTypedList<ddex_net.xml._20120404.ddexC.CLine>(this, LinqToXsdTypeManager.Instance, XName.Get("CLine", ""));
                }
                return this.CLineField;
            }
            set {
                if ((value == null)) {
                    this.CLineField = null;
                }
                else {
                    if ((this.CLineField == null)) {
                        this.CLineField = XTypedList<ddex_net.xml._20120404.ddexC.CLine>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CLine", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.CLine>(this.CLineField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ddex:UserDefinedResource was originally published, whether for physical or electronic/online distribution.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, UserDefinedValue*, PLine*, CLine*, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalUserDefinedResourceDetails*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.EventDate OriginalResourceReleaseDate {
            get {
                XElement x = this.GetElement(XName.Get("OriginalResourceReleaseDate", ""));
                return ((ddex_net.xml._20120404.ddexC.EventDate)(x));
            }
            set {
                this.SetElement(XName.Get("OriginalResourceReleaseDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:FulfillmentDate.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, UserDefinedValue*, PLine*, CLine*, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalUserDefinedResourceDetails*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.FulfillmentDate FulfillmentDate {
            get {
                XElement x = this.GetElement(XName.Get("FulfillmentDate", ""));
                return ((ddex_net.xml._20120404.ddexC.FulfillmentDate)(x));
            }
            set {
                this.SetElement(XName.Get("FulfillmentDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Description of the ddex:UserDefinedResource containing ddex:Keywords.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, UserDefinedValue*, PLine*, CLine*, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalUserDefinedResourceDetails*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Keywords> Keywords {
            get {
                if ((this.KeywordsField == null)) {
                    this.KeywordsField = new XTypedList<ddex_net.xml._20120404.ddexC.Keywords>(this, LinqToXsdTypeManager.Instance, XName.Get("Keywords", ""));
                }
                return this.KeywordsField;
            }
            set {
                if ((value == null)) {
                    this.KeywordsField = null;
                }
                else {
                    if ((this.KeywordsField == null)) {
                        this.KeywordsField = XTypedList<ddex_net.xml._20120404.ddexC.Keywords>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Keywords", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Keywords>(this.KeywordsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Synopsis of the ddex:UserDefinedResource.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, UserDefinedValue*, PLine*, CLine*, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalUserDefinedResourceDetails*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.Synopsis Synopsis {
            get {
                XElement x = this.GetElement(XName.Get("Synopsis", ""));
                return ((ddex_net.xml._20120404.ddexC.Synopsis)(x));
            }
            set {
                this.SetElement(XName.Get("Synopsis", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Genre to which the ddex:UserDefinedResource belongs.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, UserDefinedValue*, PLine*, CLine*, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalUserDefinedResourceDetails*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Genre> Genre {
            get {
                if ((this.GenreField == null)) {
                    this.GenreField = new XTypedList<ddex_net.xml._20120404.ddexC.Genre>(this, LinqToXsdTypeManager.Instance, XName.Get("Genre", ""));
                }
                return this.GenreField;
            }
            set {
                if ((value == null)) {
                    this.GenreField = null;
                }
                else {
                    if ((this.GenreField == null)) {
                        this.GenreField = XTypedList<ddex_net.xml._20120404.ddexC.Genre>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Genre", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Genre>(this.GenreField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the classification of the ddex:UserDefinedResource according to advice which it carries about the level of explicitness or offensiveness of its content.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, UserDefinedValue*, PLine*, CLine*, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalUserDefinedResourceDetails*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.ParentalWarningType> ParentalWarningType {
            get {
                if ((this.ParentalWarningTypeField == null)) {
                    this.ParentalWarningTypeField = new XTypedList<ddex_net.xml._20120404.ddexC.ParentalWarningType>(this, LinqToXsdTypeManager.Instance, XName.Get("ParentalWarningType", ""));
                }
                return this.ParentalWarningTypeField;
            }
            set {
                if ((value == null)) {
                    this.ParentalWarningTypeField = null;
                }
                else {
                    if ((this.ParentalWarningTypeField == null)) {
                        this.ParentalWarningTypeField = XTypedList<ddex_net.xml._20120404.ddexC.ParentalWarningType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ParentalWarningType", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.ParentalWarningType>(this.ParentalWarningTypeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing technical details of the ddex:UserDefinedResource.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, UserDefinedValue*, PLine*, CLine*, OriginalResourceReleaseDate?, FulfillmentDate?, Keywords*, Synopsis?, Genre*, ParentalWarningType*, TechnicalUserDefinedResourceDetails*)
        /// </para>
        /// </summary>
        public IList<TechnicalUserDefinedResourceDetails> TechnicalUserDefinedResourceDetails {
            get {
                if ((this.TechnicalUserDefinedResourceDetailsField == null)) {
                    this.TechnicalUserDefinedResourceDetailsField = new XTypedList<TechnicalUserDefinedResourceDetails>(this, LinqToXsdTypeManager.Instance, XName.Get("TechnicalUserDefinedResourceDetails", ""));
                }
                return this.TechnicalUserDefinedResourceDetailsField;
            }
            set {
                if ((value == null)) {
                    this.TechnicalUserDefinedResourceDetailsField = null;
                }
                else {
                    if ((this.TechnicalUserDefinedResourceDetailsField == null)) {
                        this.TechnicalUserDefinedResourceDetailsField = XTypedList<TechnicalUserDefinedResourceDetails>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("TechnicalUserDefinedResourceDetails", ""));
                    }
                    else {
                        XTypedServices.SetList<TechnicalUserDefinedResourceDetails>(this.TechnicalUserDefinedResourceDetailsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the ddexC:UserDefinedResourceDetailsByTerritory as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("UserDefinedResourceDetailsByTerritory", "http://ddex.net/xml/ern/341");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<UserDefinedResourceDetailsByTerritory>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("TerritoryCode", ""), typeof(object));
            localElementDictionary.Add(XName.Get("ExcludedTerritoryCode", ""), typeof(object));
            localElementDictionary.Add(XName.Get("ResourceContributor", ""), typeof(ddex_net.xml._20120404.ddexC.ResourceContributor));
            localElementDictionary.Add(XName.Get("IndirectResourceContributor", ""), typeof(ddex_net.xml._20120404.ddexC.IndirectResourceContributor));
            localElementDictionary.Add(XName.Get("UserDefinedValue", ""), typeof(ddex_net.xml._20120404.ddexC.UserDefinedValue));
            localElementDictionary.Add(XName.Get("PLine", ""), typeof(ddex_net.xml._20120404.ddexC.PLine));
            localElementDictionary.Add(XName.Get("CLine", ""), typeof(ddex_net.xml._20120404.ddexC.CLine));
            localElementDictionary.Add(XName.Get("OriginalResourceReleaseDate", ""), typeof(ddex_net.xml._20120404.ddexC.EventDate));
            localElementDictionary.Add(XName.Get("FulfillmentDate", ""), typeof(ddex_net.xml._20120404.ddexC.FulfillmentDate));
            localElementDictionary.Add(XName.Get("Keywords", ""), typeof(ddex_net.xml._20120404.ddexC.Keywords));
            localElementDictionary.Add(XName.Get("Synopsis", ""), typeof(ddex_net.xml._20120404.ddexC.Synopsis));
            localElementDictionary.Add(XName.Get("Genre", ""), typeof(ddex_net.xml._20120404.ddexC.Genre));
            localElementDictionary.Add(XName.Get("ParentalWarningType", ""), typeof(ddex_net.xml._20120404.ddexC.ParentalWarningType));
            localElementDictionary.Add(XName.Get("TechnicalUserDefinedResourceDetails", ""), typeof(TechnicalUserDefinedResourceDetails));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:Video.
    /// </para>
    /// <para>
    /// Regular expression: (VideoType?, IsArtistRelated?, VideoId*, IndirectVideoId*, ResourceReference, (VideoCueSheetReference+ | ReasonForCueSheetAbsence)?, ReferenceTitle?, Title*, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance*, Duration, RightsAgreementId?, VideoCollectionReferenceList?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, VideoDetailsByTerritory+)
    /// </para>
    /// </summary>
    public partial class Video : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.VideoId> VideoIdField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.MusicalWorkId> IndirectVideoIdField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.VideoCueSheetReference> VideoCueSheetReferenceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Title> TitleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> LanguageOfPerformanceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<VideoDetailsByTerritory> VideoDetailsByTerritoryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator Video(XElement xe) { return XTypedServices.ToXTypedElement<Video>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Video() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Video.
        /// </para>
        /// <para>
        /// Regular expression: (VideoType?, IsArtistRelated?, VideoId*, IndirectVideoId*, ResourceReference, (VideoCueSheetReference+ | ReasonForCueSheetAbsence)?, ReferenceTitle?, Title*, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance*, Duration, RightsAgreementId?, VideoCollectionReferenceList?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, VideoDetailsByTerritory+)
        /// </para>
        /// </summary>
        public Video() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:Type of the ern:Video.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VideoType?, IsArtistRelated?, VideoId*, IndirectVideoId*, ResourceReference, (VideoCueSheetReference+ | ReasonForCueSheetAbsence)?, ReferenceTitle?, Title*, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance*, Duration, RightsAgreementId?, VideoCollectionReferenceList?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, VideoDetailsByTerritory+)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.VideoType VideoType {
            get {
                XElement x = this.GetElement(XName.Get("VideoType", ""));
                return ((ddex_net.xml._20120404.ddexC.VideoType)(x));
            }
            set {
                this.SetElement(XName.Get("VideoType", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ern:Video is related to an ddex:Artist (=True) or not (=False).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VideoType?, IsArtistRelated?, VideoId*, IndirectVideoId*, ResourceReference, (VideoCueSheetReference+ | ReasonForCueSheetAbsence)?, ReferenceTitle?, Title*, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance*, Duration, RightsAgreementId?, VideoCollectionReferenceList?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, VideoDetailsByTerritory+)
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsArtistRelated {
            get {
                XElement x = this.GetElement(XName.Get("IsArtistRelated", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("IsArtistRelated", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of an ddex:Identifier of the ern:Video.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (VideoType?, IsArtistRelated?, VideoId*, IndirectVideoId*, ResourceReference, (VideoCueSheetReference+ | ReasonForCueSheetAbsence)?, ReferenceTitle?, Title*, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance*, Duration, RightsAgreementId?, VideoCollectionReferenceList?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, VideoDetailsByTerritory+)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.VideoId> VideoId {
            get {
                if ((this.VideoIdField == null)) {
                    this.VideoIdField = new XTypedList<ddex_net.xml._20120404.ddexC.VideoId>(this, LinqToXsdTypeManager.Instance, XName.Get("VideoId", ""));
                }
                return this.VideoIdField;
            }
            set {
                if ((value == null)) {
                    this.VideoIdField = null;
                }
                else {
                    if ((this.VideoIdField == null)) {
                        this.VideoIdField = XTypedList<ddex_net.xml._20120404.ddexC.VideoId>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("VideoId", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.VideoId>(this.VideoIdField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:MusicalWorkId of a ddex:MusicalWork used in the ern:Video.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (VideoType?, IsArtistRelated?, VideoId*, IndirectVideoId*, ResourceReference, (VideoCueSheetReference+ | ReasonForCueSheetAbsence)?, ReferenceTitle?, Title*, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance*, Duration, RightsAgreementId?, VideoCollectionReferenceList?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, VideoDetailsByTerritory+)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.MusicalWorkId> IndirectVideoId {
            get {
                if ((this.IndirectVideoIdField == null)) {
                    this.IndirectVideoIdField = new XTypedList<ddex_net.xml._20120404.ddexC.MusicalWorkId>(this, LinqToXsdTypeManager.Instance, XName.Get("IndirectVideoId", ""));
                }
                return this.IndirectVideoIdField;
            }
            set {
                if ((value == null)) {
                    this.IndirectVideoIdField = null;
                }
                else {
                    if ((this.IndirectVideoIdField == null)) {
                        this.IndirectVideoIdField = XTypedList<ddex_net.xml._20120404.ddexC.MusicalWorkId>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("IndirectVideoId", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.MusicalWorkId>(this.IndirectVideoIdField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Identifier (specific to the ddex:Message) of the ern:Video within the ddex:Release which contains it. This is a ddex:LocalResourceAnchor starting with the letter A.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (VideoType?, IsArtistRelated?, VideoId*, IndirectVideoId*, ResourceReference, (VideoCueSheetReference+ | ReasonForCueSheetAbsence)?, ReferenceTitle?, Title*, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance*, Duration, RightsAgreementId?, VideoCollectionReferenceList?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, VideoDetailsByTerritory+)
        /// </para>
        /// </summary>
        public string ResourceReference {
            get {
                XElement x = this.GetElement(XName.Get("ResourceReference", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("ResourceReference", ""), value, "ResourceReference", ResourceReferenceLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a ddex:VideoCueSheetReference for a ddex:CueSheet (specific to this ddex:Message).
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (VideoType?, IsArtistRelated?, VideoId*, IndirectVideoId*, ResourceReference, (VideoCueSheetReference+ | ReasonForCueSheetAbsence)?, ReferenceTitle?, Title*, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance*, Duration, RightsAgreementId?, VideoCollectionReferenceList?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, VideoDetailsByTerritory+)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.VideoCueSheetReference> VideoCueSheetReference {
            get {
                if ((this.VideoCueSheetReferenceField == null)) {
                    this.VideoCueSheetReferenceField = new XTypedList<ddex_net.xml._20120404.ddexC.VideoCueSheetReference>(this, LinqToXsdTypeManager.Instance, XName.Get("VideoCueSheetReference", ""));
                }
                return this.VideoCueSheetReferenceField;
            }
            set {
                if ((value == null)) {
                    this.VideoCueSheetReferenceField = null;
                }
                else {
                    if ((this.VideoCueSheetReferenceField == null)) {
                        this.VideoCueSheetReferenceField = XTypedList<ddex_net.xml._20120404.ddexC.VideoCueSheetReference>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("VideoCueSheetReference", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.VideoCueSheetReference>(this.VideoCueSheetReferenceField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing the textual ddex:Description of the reason for the ddex:Identifier being used as a proxy.
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (VideoType?, IsArtistRelated?, VideoId*, IndirectVideoId*, ResourceReference, (VideoCueSheetReference+ | ReasonForCueSheetAbsence)?, ReferenceTitle?, Title*, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance*, Duration, RightsAgreementId?, VideoCollectionReferenceList?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, VideoDetailsByTerritory+)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.Reason ReasonForCueSheetAbsence {
            get {
                XElement x = this.GetElement(XName.Get("ReasonForCueSheetAbsence", ""));
                return ((ddex_net.xml._20120404.ddexC.Reason)(x));
            }
            set {
                this.SetElement(XName.Get("ReasonForCueSheetAbsence", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:ReferenceTitle of the ern:Video.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VideoType?, IsArtistRelated?, VideoId*, IndirectVideoId*, ResourceReference, (VideoCueSheetReference+ | ReasonForCueSheetAbsence)?, ReferenceTitle?, Title*, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance*, Duration, RightsAgreementId?, VideoCollectionReferenceList?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, VideoDetailsByTerritory+)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.ReferenceTitle ReferenceTitle {
            get {
                XElement x = this.GetElement(XName.Get("ReferenceTitle", ""));
                return ((ddex_net.xml._20120404.ddexC.ReferenceTitle)(x));
            }
            set {
                this.SetElement(XName.Get("ReferenceTitle", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Title of the ern:Video.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (VideoType?, IsArtistRelated?, VideoId*, IndirectVideoId*, ResourceReference, (VideoCueSheetReference+ | ReasonForCueSheetAbsence)?, ReferenceTitle?, Title*, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance*, Duration, RightsAgreementId?, VideoCollectionReferenceList?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, VideoDetailsByTerritory+)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Title> Title {
            get {
                if ((this.TitleField == null)) {
                    this.TitleField = new XTypedList<ddex_net.xml._20120404.ddexC.Title>(this, LinqToXsdTypeManager.Instance, XName.Get("Title", ""));
                }
                return this.TitleField;
            }
            set {
                if ((value == null)) {
                    this.TitleField = null;
                }
                else {
                    if ((this.TitleField == null)) {
                        this.TitleField = XTypedList<ddex_net.xml._20120404.ddexC.Title>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Title", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Title>(this.TitleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a ddex:Description of the ddex:Type of instrumentation of the MusicalWork(s) in the ern:Video.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VideoType?, IsArtistRelated?, VideoId*, IndirectVideoId*, ResourceReference, (VideoCueSheetReference+ | ReasonForCueSheetAbsence)?, ReferenceTitle?, Title*, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance*, Duration, RightsAgreementId?, VideoCollectionReferenceList?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, VideoDetailsByTerritory+)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.Description InstrumentationDescription {
            get {
                XElement x = this.GetElement(XName.Get("InstrumentationDescription", ""));
                return ((ddex_net.xml._20120404.ddexC.Description)(x));
            }
            set {
                this.SetElement(XName.Get("InstrumentationDescription", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ern:Video is a ddex:Medley (=True) or not (=False).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VideoType?, IsArtistRelated?, VideoId*, IndirectVideoId*, ResourceReference, (VideoCueSheetReference+ | ReasonForCueSheetAbsence)?, ReferenceTitle?, Title*, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance*, Duration, RightsAgreementId?, VideoCollectionReferenceList?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, VideoDetailsByTerritory+)
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsMedley {
            get {
                XElement x = this.GetElement(XName.Get("IsMedley", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("IsMedley", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ern:Video is a ddex:Potpourri (=True) or not (=False).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VideoType?, IsArtistRelated?, VideoId*, IndirectVideoId*, ResourceReference, (VideoCueSheetReference+ | ReasonForCueSheetAbsence)?, ReferenceTitle?, Title*, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance*, Duration, RightsAgreementId?, VideoCollectionReferenceList?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, VideoDetailsByTerritory+)
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsPotpourri {
            get {
                XElement x = this.GetElement(XName.Get("IsPotpourri", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("IsPotpourri", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ern:Video is instrumental (=True) or not (=False).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VideoType?, IsArtistRelated?, VideoId*, IndirectVideoId*, ResourceReference, (VideoCueSheetReference+ | ReasonForCueSheetAbsence)?, ReferenceTitle?, Title*, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance*, Duration, RightsAgreementId?, VideoCollectionReferenceList?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, VideoDetailsByTerritory+)
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsInstrumental {
            get {
                XElement x = this.GetElement(XName.Get("IsInstrumental", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("IsInstrumental", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ern:Video is used as background to other audio or audiovisual material (=True) or not (=False).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VideoType?, IsArtistRelated?, VideoId*, IndirectVideoId*, ResourceReference, (VideoCueSheetReference+ | ReasonForCueSheetAbsence)?, ReferenceTitle?, Title*, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance*, Duration, RightsAgreementId?, VideoCollectionReferenceList?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, VideoDetailsByTerritory+)
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsBackground {
            get {
                XElement x = this.GetElement(XName.Get("IsBackground", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("IsBackground", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ern:Video is hidden in some way from the ddex:Consumer (=True) or not (=False).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VideoType?, IsArtistRelated?, VideoId*, IndirectVideoId*, ResourceReference, (VideoCueSheetReference+ | ReasonForCueSheetAbsence)?, ReferenceTitle?, Title*, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance*, Duration, RightsAgreementId?, VideoCollectionReferenceList?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, VideoDetailsByTerritory+)
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsHiddenResource {
            get {
                XElement x = this.GetElement(XName.Get("IsHiddenResource", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("IsHiddenResource", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ern:Video is additional to those on the original ddex:Release of which this is a ddex:Version (=True) or not (=False).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VideoType?, IsArtistRelated?, VideoId*, IndirectVideoId*, ResourceReference, (VideoCueSheetReference+ | ReasonForCueSheetAbsence)?, ReferenceTitle?, Title*, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance*, Duration, RightsAgreementId?, VideoCollectionReferenceList?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, VideoDetailsByTerritory+)
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsBonusResource {
            get {
                XElement x = this.GetElement(XName.Get("IsBonusResource", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("IsBonusResource", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ern:Video is preceded by a period of silence (=False) or not (=True). 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VideoType?, IsArtistRelated?, VideoId*, IndirectVideoId*, ResourceReference, (VideoCueSheetReference+ | ReasonForCueSheetAbsence)?, ReferenceTitle?, Title*, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance*, Duration, RightsAgreementId?, VideoCollectionReferenceList?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, VideoDetailsByTerritory+)
        /// </para>
        /// </summary>
        public System.Nullable<bool> NoSilenceBefore {
            get {
                XElement x = this.GetElement(XName.Get("NoSilenceBefore", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("NoSilenceBefore", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ern:Video is followed by a period of silence (=False) or not (=True). 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VideoType?, IsArtistRelated?, VideoId*, IndirectVideoId*, ResourceReference, (VideoCueSheetReference+ | ReasonForCueSheetAbsence)?, ReferenceTitle?, Title*, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance*, Duration, RightsAgreementId?, VideoCollectionReferenceList?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, VideoDetailsByTerritory+)
        /// </para>
        /// </summary>
        public System.Nullable<bool> NoSilenceAfter {
            get {
                XElement x = this.GetElement(XName.Get("NoSilenceAfter", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("NoSilenceAfter", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Flag indicating whether performer information is required (=True) or not (=False) when communicating details of the ern:Video.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VideoType?, IsArtistRelated?, VideoId*, IndirectVideoId*, ResourceReference, (VideoCueSheetReference+ | ReasonForCueSheetAbsence)?, ReferenceTitle?, Title*, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance*, Duration, RightsAgreementId?, VideoCollectionReferenceList?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, VideoDetailsByTerritory+)
        /// </para>
        /// </summary>
        public System.Nullable<bool> PerformerInformationRequired {
            get {
                XElement x = this.GetElement(XName.Get("PerformerInformationRequired", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("PerformerInformationRequired", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language of the ddex:Performance recorded in the ern:Video (represented by an ISO 639-2 iso639a2:LanguageCode).
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (VideoType?, IsArtistRelated?, VideoId*, IndirectVideoId*, ResourceReference, (VideoCueSheetReference+ | ReasonForCueSheetAbsence)?, ReferenceTitle?, Title*, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance*, Duration, RightsAgreementId?, VideoCollectionReferenceList?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, VideoDetailsByTerritory+)
        /// </para>
        /// </summary>
        public IList<string> LanguageOfPerformance {
            get {
                if ((this.LanguageOfPerformanceField == null)) {
                    this.LanguageOfPerformanceField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("LanguageOfPerformance", ""));
                }
                return this.LanguageOfPerformanceField;
            }
            set {
                if ((value == null)) {
                    this.LanguageOfPerformanceField = null;
                }
                else {
                    if ((this.LanguageOfPerformanceField == null)) {
                        this.LanguageOfPerformanceField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("LanguageOfPerformance", ""));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.LanguageOfPerformanceField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Duration of the ern:Video (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (VideoType?, IsArtistRelated?, VideoId*, IndirectVideoId*, ResourceReference, (VideoCueSheetReference+ | ReasonForCueSheetAbsence)?, ReferenceTitle?, Title*, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance*, Duration, RightsAgreementId?, VideoCollectionReferenceList?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, VideoDetailsByTerritory+)
        /// </para>
        /// </summary>
        public System.TimeSpan Duration {
            get {
                XElement x = this.GetElement(XName.Get("Duration", ""));
                return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
            set {
                this.SetElement(XName.Get("Duration", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:Identifiers of a ddex:License, ddex:Claim, ddex:RightShare or contract for the MusicalWork(s) used in the ern:Video.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VideoType?, IsArtistRelated?, VideoId*, IndirectVideoId*, ResourceReference, (VideoCueSheetReference+ | ReasonForCueSheetAbsence)?, ReferenceTitle?, Title*, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance*, Duration, RightsAgreementId?, VideoCollectionReferenceList?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, VideoDetailsByTerritory+)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.RightsAgreementId RightsAgreementId {
            get {
                XElement x = this.GetElement(XName.Get("RightsAgreementId", ""));
                return ((ddex_net.xml._20120404.ddexC.RightsAgreementId)(x));
            }
            set {
                this.SetElement(XName.Get("RightsAgreementId", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of one or more ddex:Collections. The referenced ddex:Collection has to be of ddex:CollectionType ddex:VideoChapter.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VideoType?, IsArtistRelated?, VideoId*, IndirectVideoId*, ResourceReference, (VideoCueSheetReference+ | ReasonForCueSheetAbsence)?, ReferenceTitle?, Title*, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance*, Duration, RightsAgreementId?, VideoCollectionReferenceList?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, VideoDetailsByTerritory+)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.SoundRecordingCollectionReferenceList VideoCollectionReferenceList {
            get {
                XElement x = this.GetElement(XName.Get("VideoCollectionReferenceList", ""));
                return ((ddex_net.xml._20120404.ddexC.SoundRecordingCollectionReferenceList)(x));
            }
            set {
                this.SetElement(XName.Get("VideoCollectionReferenceList", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of one or more ddex:MusicalWorks contained in the ern:Video.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VideoType?, IsArtistRelated?, VideoId*, IndirectVideoId*, ResourceReference, (VideoCueSheetReference+ | ReasonForCueSheetAbsence)?, ReferenceTitle?, Title*, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance*, Duration, RightsAgreementId?, VideoCollectionReferenceList?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, VideoDetailsByTerritory+)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.ResourceMusicalWorkReferenceList ResourceMusicalWorkReferenceList {
            get {
                XElement x = this.GetElement(XName.Get("ResourceMusicalWorkReferenceList", ""));
                return ((ddex_net.xml._20120404.ddexC.ResourceMusicalWorkReferenceList)(x));
            }
            set {
                this.SetElement(XName.Get("ResourceMusicalWorkReferenceList", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:ResourceContainedResourceReferences referring to a ddex:Resource that is contained in the current ern:Video.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VideoType?, IsArtistRelated?, VideoId*, IndirectVideoId*, ResourceReference, (VideoCueSheetReference+ | ReasonForCueSheetAbsence)?, ReferenceTitle?, Title*, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance*, Duration, RightsAgreementId?, VideoCollectionReferenceList?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, VideoDetailsByTerritory+)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.ResourceContainedResourceReferenceList ResourceContainedResourceReferenceList {
            get {
                XElement x = this.GetElement(XName.Get("ResourceContainedResourceReferenceList", ""));
                return ((ddex_net.xml._20120404.ddexC.ResourceContainedResourceReferenceList)(x));
            }
            set {
                this.SetElement(XName.Get("ResourceContainedResourceReferenceList", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ern:Video was created.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VideoType?, IsArtistRelated?, VideoId*, IndirectVideoId*, ResourceReference, (VideoCueSheetReference+ | ReasonForCueSheetAbsence)?, ReferenceTitle?, Title*, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance*, Duration, RightsAgreementId?, VideoCollectionReferenceList?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, VideoDetailsByTerritory+)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.EventDate CreationDate {
            get {
                XElement x = this.GetElement(XName.Get("CreationDate", ""));
                return ((ddex_net.xml._20120404.ddexC.EventDate)(x));
            }
            set {
                this.SetElement(XName.Get("CreationDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ern:Video was originally mastered (in either analogue or digital form).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VideoType?, IsArtistRelated?, VideoId*, IndirectVideoId*, ResourceReference, (VideoCueSheetReference+ | ReasonForCueSheetAbsence)?, ReferenceTitle?, Title*, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance*, Duration, RightsAgreementId?, VideoCollectionReferenceList?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, VideoDetailsByTerritory+)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.EventDate MasteredDate {
            get {
                XElement x = this.GetElement(XName.Get("MasteredDate", ""));
                return ((ddex_net.xml._20120404.ddexC.EventDate)(x));
            }
            set {
                this.SetElement(XName.Get("MasteredDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:Descriptors and other attributes of the ern:Video which may vary according to ddex:Territory of release. 
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (VideoType?, IsArtistRelated?, VideoId*, IndirectVideoId*, ResourceReference, (VideoCueSheetReference+ | ReasonForCueSheetAbsence)?, ReferenceTitle?, Title*, InstrumentationDescription?, IsMedley?, IsPotpourri?, IsInstrumental?, IsBackground?, IsHiddenResource?, IsBonusResource?, NoSilenceBefore?, NoSilenceAfter?, PerformerInformationRequired?, LanguageOfPerformance*, Duration, RightsAgreementId?, VideoCollectionReferenceList?, ResourceMusicalWorkReferenceList?, ResourceContainedResourceReferenceList?, CreationDate?, MasteredDate?, VideoDetailsByTerritory+)
        /// </para>
        /// </summary>
        public IList<VideoDetailsByTerritory> VideoDetailsByTerritory {
            get {
                if ((this.VideoDetailsByTerritoryField == null)) {
                    this.VideoDetailsByTerritoryField = new XTypedList<VideoDetailsByTerritory>(this, LinqToXsdTypeManager.Instance, XName.Get("VideoDetailsByTerritory", ""));
                }
                return this.VideoDetailsByTerritoryField;
            }
            set {
                if ((value == null)) {
                    this.VideoDetailsByTerritoryField = null;
                }
                else {
                    if ((this.VideoDetailsByTerritoryField == null)) {
                        this.VideoDetailsByTerritoryField = XTypedList<VideoDetailsByTerritory>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("VideoDetailsByTerritory", ""));
                    }
                    else {
                        XTypedServices.SetList<VideoDetailsByTerritory>(this.VideoDetailsByTerritoryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ern:Video ddex:Element was updated (=True) or not (=False). The ddex:Flag may only be used when the ddex:UpdateIndicator is set to ddex:UpdateMessage. When this ddex:Boolean ddex:Flag is set to true, the ddex:MessageRecipient is expected to replace any previously provided ern:Video data with the now provided data.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsUpdated {
            get {
                XAttribute x = this.Attribute(XName.Get("IsUpdated", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("IsUpdated", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the ern:Video as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Video", "http://ddex.net/xml/ern/341");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Video>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("VideoType", ""), typeof(ddex_net.xml._20120404.ddexC.VideoType));
            localElementDictionary.Add(XName.Get("IsArtistRelated", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("VideoId", ""), typeof(ddex_net.xml._20120404.ddexC.VideoId));
            localElementDictionary.Add(XName.Get("IndirectVideoId", ""), typeof(ddex_net.xml._20120404.ddexC.MusicalWorkId));
            localElementDictionary.Add(XName.Get("ResourceReference", ""), typeof(string));
            localElementDictionary.Add(XName.Get("VideoCueSheetReference", ""), typeof(ddex_net.xml._20120404.ddexC.VideoCueSheetReference));
            localElementDictionary.Add(XName.Get("ReasonForCueSheetAbsence", ""), typeof(ddex_net.xml._20120404.ddexC.Reason));
            localElementDictionary.Add(XName.Get("ReferenceTitle", ""), typeof(ddex_net.xml._20120404.ddexC.ReferenceTitle));
            localElementDictionary.Add(XName.Get("Title", ""), typeof(ddex_net.xml._20120404.ddexC.Title));
            localElementDictionary.Add(XName.Get("InstrumentationDescription", ""), typeof(ddex_net.xml._20120404.ddexC.Description));
            localElementDictionary.Add(XName.Get("IsMedley", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("IsPotpourri", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("IsInstrumental", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("IsBackground", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("IsHiddenResource", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("IsBonusResource", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("NoSilenceBefore", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("NoSilenceAfter", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("PerformerInformationRequired", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("LanguageOfPerformance", ""), typeof(string));
            localElementDictionary.Add(XName.Get("Duration", ""), typeof(System.TimeSpan));
            localElementDictionary.Add(XName.Get("RightsAgreementId", ""), typeof(ddex_net.xml._20120404.ddexC.RightsAgreementId));
            localElementDictionary.Add(XName.Get("VideoCollectionReferenceList", ""), typeof(ddex_net.xml._20120404.ddexC.SoundRecordingCollectionReferenceList));
            localElementDictionary.Add(XName.Get("ResourceMusicalWorkReferenceList", ""), typeof(ddex_net.xml._20120404.ddexC.ResourceMusicalWorkReferenceList));
            localElementDictionary.Add(XName.Get("ResourceContainedResourceReferenceList", ""), typeof(ddex_net.xml._20120404.ddexC.ResourceContainedResourceReferenceList));
            localElementDictionary.Add(XName.Get("CreationDate", ""), typeof(ddex_net.xml._20120404.ddexC.EventDate));
            localElementDictionary.Add(XName.Get("MasteredDate", ""), typeof(ddex_net.xml._20120404.ddexC.EventDate));
            localElementDictionary.Add(XName.Get("VideoDetailsByTerritory", ""), typeof(VideoDetailsByTerritory));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        private class ResourceReferenceLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "A[\\d\\-_a-zA-Z]+"}, 0, XmlSchemaWhiteSpace.Collapse));
            
            private ResourceReferenceLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of ddex:Descriptors and other attributes of a ddex:Video which may vary according to ddex:Territory of release. 
    /// </para>
    /// <para>
    /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, AvRating*, FulfillmentDate?, Keywords*, Synopsis?, CLine*, TechnicalVideoDetails*, Character*)
    /// </para>
    /// </summary>
    public partial class VideoDetailsByTerritory : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<object> TerritoryCodeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<object> ExcludedTerritoryCodeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Title> TitleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Artist> DisplayArtistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.ResourceContributor> ResourceContributorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.IndirectResourceContributor> IndirectResourceContributorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.LabelName> LabelNameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.RightsController> RightsControllerField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.PLine> PLineField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.HostSoundCarrier> HostSoundCarrierField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Genre> GenreField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.ParentalWarningType> ParentalWarningTypeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.AvRating> AvRatingField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Keywords> KeywordsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.CLine> CLineField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TechnicalVideoDetails> TechnicalVideoDetailsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ddex_net.xml._20120404.ddexC.Character> CharacterField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator VideoDetailsByTerritory(XElement xe) { return XTypedServices.ToXTypedElement<VideoDetailsByTerritory>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static VideoDetailsByTerritory() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:Descriptors and other attributes of a ddex:Video which may vary according to ddex:Territory of release. 
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, AvRating*, FulfillmentDate?, Keywords*, Synopsis?, CLine*, TechnicalVideoDetails*, Character*)
        /// </para>
        /// </summary>
        public VideoDetailsByTerritory() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Territory to which the ddex:SoundRecording details apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:ExcludedTerritory shall be present, but not both. 
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, AvRating*, FulfillmentDate?, Keywords*, Synopsis?, CLine*, TechnicalVideoDetails*, Character*)
        /// </para>
        /// </summary>
        public IList<object> TerritoryCode {
            get {
                if ((this.TerritoryCodeField == null)) {
                    this.TerritoryCodeField = new XSimpleList<object>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, XName.Get("TerritoryCode", ""));
                }
                return this.TerritoryCodeField;
            }
            set {
                if ((value == null)) {
                    this.TerritoryCodeField = null;
                }
                else {
                    if ((this.TerritoryCodeField == null)) {
                        this.TerritoryCodeField = XSimpleList<object>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, value, XName.Get("TerritoryCode", ""));
                    }
                    else {
                        XTypedServices.SetList<System.Object>(this.TerritoryCodeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Territory to which the ddex:SoundRecording details do not apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:Territory shall be present, but not both.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, AvRating*, FulfillmentDate?, Keywords*, Synopsis?, CLine*, TechnicalVideoDetails*, Character*)
        /// </para>
        /// </summary>
        public IList<object> ExcludedTerritoryCode {
            get {
                if ((this.ExcludedTerritoryCodeField == null)) {
                    this.ExcludedTerritoryCodeField = new XSimpleList<object>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, XName.Get("ExcludedTerritoryCode", ""));
                }
                return this.ExcludedTerritoryCodeField;
            }
            set {
                if ((value == null)) {
                    this.ExcludedTerritoryCodeField = null;
                }
                else {
                    if ((this.ExcludedTerritoryCodeField == null)) {
                        this.ExcludedTerritoryCodeField = XSimpleList<object>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, value, XName.Get("ExcludedTerritoryCode", ""));
                    }
                    else {
                        XTypedServices.SetList<System.Object>(this.ExcludedTerritoryCodeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Title of the ddex:SoundRecording.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, AvRating*, FulfillmentDate?, Keywords*, Synopsis?, CLine*, TechnicalVideoDetails*, Character*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Title> Title {
            get {
                if ((this.TitleField == null)) {
                    this.TitleField = new XTypedList<ddex_net.xml._20120404.ddexC.Title>(this, LinqToXsdTypeManager.Instance, XName.Get("Title", ""));
                }
                return this.TitleField;
            }
            set {
                if ((value == null)) {
                    this.TitleField = null;
                }
                else {
                    if ((this.TitleField == null)) {
                        this.TitleField = XTypedList<ddex_net.xml._20120404.ddexC.Title>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Title", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Title>(this.TitleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:DisplayArtist for the ddex:SoundRecording. The ddex:DisplayArtist may be described through ddex:Name, ddex:Identifier and Roles.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, AvRating*, FulfillmentDate?, Keywords*, Synopsis?, CLine*, TechnicalVideoDetails*, Character*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Artist> DisplayArtist {
            get {
                if ((this.DisplayArtistField == null)) {
                    this.DisplayArtistField = new XTypedList<ddex_net.xml._20120404.ddexC.Artist>(this, LinqToXsdTypeManager.Instance, XName.Get("DisplayArtist", ""));
                }
                return this.DisplayArtistField;
            }
            set {
                if ((value == null)) {
                    this.DisplayArtistField = null;
                }
                else {
                    if ((this.DisplayArtistField == null)) {
                        this.DisplayArtistField = XTypedList<ddex_net.xml._20120404.ddexC.Artist>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("DisplayArtist", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Artist>(this.DisplayArtistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Contributor to the ddex:SoundRecording.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, AvRating*, FulfillmentDate?, Keywords*, Synopsis?, CLine*, TechnicalVideoDetails*, Character*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.ResourceContributor> ResourceContributor {
            get {
                if ((this.ResourceContributorField == null)) {
                    this.ResourceContributorField = new XTypedList<ddex_net.xml._20120404.ddexC.ResourceContributor>(this, LinqToXsdTypeManager.Instance, XName.Get("ResourceContributor", ""));
                }
                return this.ResourceContributorField;
            }
            set {
                if ((value == null)) {
                    this.ResourceContributorField = null;
                }
                else {
                    if ((this.ResourceContributorField == null)) {
                        this.ResourceContributorField = XTypedList<ddex_net.xml._20120404.ddexC.ResourceContributor>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ResourceContributor", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.ResourceContributor>(this.ResourceContributorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of an indirect ddex:Contributor to the ddex:SoundRecording.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, AvRating*, FulfillmentDate?, Keywords*, Synopsis?, CLine*, TechnicalVideoDetails*, Character*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.IndirectResourceContributor> IndirectResourceContributor {
            get {
                if ((this.IndirectResourceContributorField == null)) {
                    this.IndirectResourceContributorField = new XTypedList<ddex_net.xml._20120404.ddexC.IndirectResourceContributor>(this, LinqToXsdTypeManager.Instance, XName.Get("IndirectResourceContributor", ""));
                }
                return this.IndirectResourceContributorField;
            }
            set {
                if ((value == null)) {
                    this.IndirectResourceContributorField = null;
                }
                else {
                    if ((this.IndirectResourceContributorField == null)) {
                        this.IndirectResourceContributorField = XTypedList<ddex_net.xml._20120404.ddexC.IndirectResourceContributor>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("IndirectResourceContributor", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.IndirectResourceContributor>(this.IndirectResourceContributorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:Identifiers of a ddex:License, ddex:Claim, ddex:RightShare or contract for the MusicalWork(s) used in the ddex:SoundRecording.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, AvRating*, FulfillmentDate?, Keywords*, Synopsis?, CLine*, TechnicalVideoDetails*, Character*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.RightsAgreementId RightsAgreementId {
            get {
                XElement x = this.GetElement(XName.Get("RightsAgreementId", ""));
                return ((ddex_net.xml._20120404.ddexC.RightsAgreementId)(x));
            }
            set {
                this.SetElement(XName.Get("RightsAgreementId", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing the ddex:Name of the ddex:Label under which the ddex:Release is to be marketed.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, AvRating*, FulfillmentDate?, Keywords*, Synopsis?, CLine*, TechnicalVideoDetails*, Character*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.LabelName> LabelName {
            get {
                if ((this.LabelNameField == null)) {
                    this.LabelNameField = new XTypedList<ddex_net.xml._20120404.ddexC.LabelName>(this, LinqToXsdTypeManager.Instance, XName.Get("LabelName", ""));
                }
                return this.LabelNameField;
            }
            set {
                if ((value == null)) {
                    this.LabelNameField = null;
                }
                else {
                    if ((this.LabelNameField == null)) {
                        this.LabelNameField = XTypedList<ddex_net.xml._20120404.ddexC.LabelName>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("LabelName", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.LabelName>(this.LabelNameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:RightsController of Rights in the ddex:SoundRecording.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, AvRating*, FulfillmentDate?, Keywords*, Synopsis?, CLine*, TechnicalVideoDetails*, Character*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.RightsController> RightsController {
            get {
                if ((this.RightsControllerField == null)) {
                    this.RightsControllerField = new XTypedList<ddex_net.xml._20120404.ddexC.RightsController>(this, LinqToXsdTypeManager.Instance, XName.Get("RightsController", ""));
                }
                return this.RightsControllerField;
            }
            set {
                if ((value == null)) {
                    this.RightsControllerField = null;
                }
                else {
                    if ((this.RightsControllerField == null)) {
                        this.RightsControllerField = XTypedList<ddex_net.xml._20120404.ddexC.RightsController>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("RightsController", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.RightsController>(this.RightsControllerField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ddex:SoundRecording was re-mastered (usually digitally).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, AvRating*, FulfillmentDate?, Keywords*, Synopsis?, CLine*, TechnicalVideoDetails*, Character*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.EventDate RemasteredDate {
            get {
                XElement x = this.GetElement(XName.Get("RemasteredDate", ""));
                return ((ddex_net.xml._20120404.ddexC.EventDate)(x));
            }
            set {
                this.SetElement(XName.Get("RemasteredDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ddex:SoundRecording was originally published, whether for physical or electronic/online distribution.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, AvRating*, FulfillmentDate?, Keywords*, Synopsis?, CLine*, TechnicalVideoDetails*, Character*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.EventDate OriginalResourceReleaseDate {
            get {
                XElement x = this.GetElement(XName.Get("OriginalResourceReleaseDate", ""));
                return ((ddex_net.xml._20120404.ddexC.EventDate)(x));
            }
            set {
                this.SetElement(XName.Get("OriginalResourceReleaseDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:PLine for the ddex:SoundRecording.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, AvRating*, FulfillmentDate?, Keywords*, Synopsis?, CLine*, TechnicalVideoDetails*, Character*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.PLine> PLine {
            get {
                if ((this.PLineField == null)) {
                    this.PLineField = new XTypedList<ddex_net.xml._20120404.ddexC.PLine>(this, LinqToXsdTypeManager.Instance, XName.Get("PLine", ""));
                }
                return this.PLineField;
            }
            set {
                if ((value == null)) {
                    this.PLineField = null;
                }
                else {
                    if ((this.PLineField == null)) {
                        this.PLineField = XTypedList<ddex_net.xml._20120404.ddexC.PLine>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("PLine", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.PLine>(this.PLineField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing an ddex:Annotation ddex:Annotation which acknowledges record companies and/or other Parties giving permission for guests ddex:Artists or others featured on the ddex:Video.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, AvRating*, FulfillmentDate?, Keywords*, Synopsis?, CLine*, TechnicalVideoDetails*, Character*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.CourtesyLine CourtesyLine {
            get {
                XElement x = this.GetElement(XName.Get("CourtesyLine", ""));
                return ((ddex_net.xml._20120404.ddexC.CourtesyLine)(x));
            }
            set {
                this.SetElement(XName.Get("CourtesyLine", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The number indicating the order of the ddex:Video in a group of ddex:Videos in a ddex:Release.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, AvRating*, FulfillmentDate?, Keywords*, Synopsis?, CLine*, TechnicalVideoDetails*, Character*)
        /// </para>
        /// </summary>
        public string SequenceNumber {
            get {
                XElement x = this.GetElement(XName.Get("SequenceNumber", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("SequenceNumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:HostSoundCarrier on which the ddex:Video appears (e.g., the CD on which it was originally released). This ddex:Composite exists in the Release Notification Message Suite Standard, to support the identification and matching of ddex:Video information.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, AvRating*, FulfillmentDate?, Keywords*, Synopsis?, CLine*, TechnicalVideoDetails*, Character*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.HostSoundCarrier> HostSoundCarrier {
            get {
                if ((this.HostSoundCarrierField == null)) {
                    this.HostSoundCarrierField = new XTypedList<ddex_net.xml._20120404.ddexC.HostSoundCarrier>(this, LinqToXsdTypeManager.Instance, XName.Get("HostSoundCarrier", ""));
                }
                return this.HostSoundCarrierField;
            }
            set {
                if ((value == null)) {
                    this.HostSoundCarrierField = null;
                }
                else {
                    if ((this.HostSoundCarrierField == null)) {
                        this.HostSoundCarrierField = XTypedList<ddex_net.xml._20120404.ddexC.HostSoundCarrier>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("HostSoundCarrier", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.HostSoundCarrier>(this.HostSoundCarrierField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a ddex:Comment about the promotion and marketing of the ddex:Video.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, AvRating*, FulfillmentDate?, Keywords*, Synopsis?, CLine*, TechnicalVideoDetails*, Character*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.Comment MarketingComment {
            get {
                XElement x = this.GetElement(XName.Get("MarketingComment", ""));
                return ((ddex_net.xml._20120404.ddexC.Comment)(x));
            }
            set {
                this.SetElement(XName.Get("MarketingComment", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Genre to which the ddex:Video belongs.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, AvRating*, FulfillmentDate?, Keywords*, Synopsis?, CLine*, TechnicalVideoDetails*, Character*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Genre> Genre {
            get {
                if ((this.GenreField == null)) {
                    this.GenreField = new XTypedList<ddex_net.xml._20120404.ddexC.Genre>(this, LinqToXsdTypeManager.Instance, XName.Get("Genre", ""));
                }
                return this.GenreField;
            }
            set {
                if ((value == null)) {
                    this.GenreField = null;
                }
                else {
                    if ((this.GenreField == null)) {
                        this.GenreField = XTypedList<ddex_net.xml._20120404.ddexC.Genre>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Genre", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Genre>(this.GenreField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the classification of the ddex:Video according to advice which it carries about the level of explicitness or offensiveness of its content.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, AvRating*, FulfillmentDate?, Keywords*, Synopsis?, CLine*, TechnicalVideoDetails*, Character*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.ParentalWarningType> ParentalWarningType {
            get {
                if ((this.ParentalWarningTypeField == null)) {
                    this.ParentalWarningTypeField = new XTypedList<ddex_net.xml._20120404.ddexC.ParentalWarningType>(this, LinqToXsdTypeManager.Instance, XName.Get("ParentalWarningType", ""));
                }
                return this.ParentalWarningTypeField;
            }
            set {
                if ((value == null)) {
                    this.ParentalWarningTypeField = null;
                }
                else {
                    if ((this.ParentalWarningTypeField == null)) {
                        this.ParentalWarningTypeField = XTypedList<ddex_net.xml._20120404.ddexC.ParentalWarningType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ParentalWarningType", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.ParentalWarningType>(this.ParentalWarningTypeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a rating for the ddex:Video.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, AvRating*, FulfillmentDate?, Keywords*, Synopsis?, CLine*, TechnicalVideoDetails*, Character*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.AvRating> AvRating {
            get {
                if ((this.AvRatingField == null)) {
                    this.AvRatingField = new XTypedList<ddex_net.xml._20120404.ddexC.AvRating>(this, LinqToXsdTypeManager.Instance, XName.Get("AvRating", ""));
                }
                return this.AvRatingField;
            }
            set {
                if ((value == null)) {
                    this.AvRatingField = null;
                }
                else {
                    if ((this.AvRatingField == null)) {
                        this.AvRatingField = XTypedList<ddex_net.xml._20120404.ddexC.AvRating>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("AvRating", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.AvRating>(this.AvRatingField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:FulfillmentDate.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, AvRating*, FulfillmentDate?, Keywords*, Synopsis?, CLine*, TechnicalVideoDetails*, Character*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.FulfillmentDate FulfillmentDate {
            get {
                XElement x = this.GetElement(XName.Get("FulfillmentDate", ""));
                return ((ddex_net.xml._20120404.ddexC.FulfillmentDate)(x));
            }
            set {
                this.SetElement(XName.Get("FulfillmentDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Description of the ddex:Video containing ddex:Keywords.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, AvRating*, FulfillmentDate?, Keywords*, Synopsis?, CLine*, TechnicalVideoDetails*, Character*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Keywords> Keywords {
            get {
                if ((this.KeywordsField == null)) {
                    this.KeywordsField = new XTypedList<ddex_net.xml._20120404.ddexC.Keywords>(this, LinqToXsdTypeManager.Instance, XName.Get("Keywords", ""));
                }
                return this.KeywordsField;
            }
            set {
                if ((value == null)) {
                    this.KeywordsField = null;
                }
                else {
                    if ((this.KeywordsField == null)) {
                        this.KeywordsField = XTypedList<ddex_net.xml._20120404.ddexC.Keywords>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Keywords", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Keywords>(this.KeywordsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Synopsis of the ddex:Video.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, AvRating*, FulfillmentDate?, Keywords*, Synopsis?, CLine*, TechnicalVideoDetails*, Character*)
        /// </para>
        /// </summary>
        public ddex_net.xml._20120404.ddexC.Synopsis Synopsis {
            get {
                XElement x = this.GetElement(XName.Get("Synopsis", ""));
                return ((ddex_net.xml._20120404.ddexC.Synopsis)(x));
            }
            set {
                this.SetElement(XName.Get("Synopsis", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:CLine for the ddex:Video.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, AvRating*, FulfillmentDate?, Keywords*, Synopsis?, CLine*, TechnicalVideoDetails*, Character*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.CLine> CLine {
            get {
                if ((this.CLineField == null)) {
                    this.CLineField = new XTypedList<ddex_net.xml._20120404.ddexC.CLine>(this, LinqToXsdTypeManager.Instance, XName.Get("CLine", ""));
                }
                return this.CLineField;
            }
            set {
                if ((value == null)) {
                    this.CLineField = null;
                }
                else {
                    if ((this.CLineField == null)) {
                        this.CLineField = XTypedList<ddex_net.xml._20120404.ddexC.CLine>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CLine", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.CLine>(this.CLineField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing technical details of the ddex:Video.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, AvRating*, FulfillmentDate?, Keywords*, Synopsis?, CLine*, TechnicalVideoDetails*, Character*)
        /// </para>
        /// </summary>
        public IList<TechnicalVideoDetails> TechnicalVideoDetails {
            get {
                if ((this.TechnicalVideoDetailsField == null)) {
                    this.TechnicalVideoDetailsField = new XTypedList<TechnicalVideoDetails>(this, LinqToXsdTypeManager.Instance, XName.Get("TechnicalVideoDetails", ""));
                }
                return this.TechnicalVideoDetailsField;
            }
            set {
                if ((value == null)) {
                    this.TechnicalVideoDetailsField = null;
                }
                else {
                    if ((this.TechnicalVideoDetailsField == null)) {
                        this.TechnicalVideoDetailsField = XTypedList<TechnicalVideoDetails>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("TechnicalVideoDetails", ""));
                    }
                    else {
                        XTypedServices.SetList<TechnicalVideoDetails>(this.TechnicalVideoDetailsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Character in the ddex:Video. A ddex:Character may be described through ddex:Name, ddex:Identifier and Roles.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CourtesyLine?, SequenceNumber?, HostSoundCarrier*, MarketingComment?, Genre*, ParentalWarningType*, AvRating*, FulfillmentDate?, Keywords*, Synopsis?, CLine*, TechnicalVideoDetails*, Character*)
        /// </para>
        /// </summary>
        public IList<ddex_net.xml._20120404.ddexC.Character> Character {
            get {
                if ((this.CharacterField == null)) {
                    this.CharacterField = new XTypedList<ddex_net.xml._20120404.ddexC.Character>(this, LinqToXsdTypeManager.Instance, XName.Get("Character", ""));
                }
                return this.CharacterField;
            }
            set {
                if ((value == null)) {
                    this.CharacterField = null;
                }
                else {
                    if ((this.CharacterField == null)) {
                        this.CharacterField = XTypedList<ddex_net.xml._20120404.ddexC.Character>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Character", ""));
                    }
                    else {
                        XTypedServices.SetList<ddex_net.xml._20120404.ddexC.Character>(this.CharacterField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the ddexC:SoundRecordingDetailsByTerritory as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("VideoDetailsByTerritory", "http://ddex.net/xml/ern/341");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<VideoDetailsByTerritory>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("TerritoryCode", ""), typeof(object));
            localElementDictionary.Add(XName.Get("ExcludedTerritoryCode", ""), typeof(object));
            localElementDictionary.Add(XName.Get("Title", ""), typeof(ddex_net.xml._20120404.ddexC.Title));
            localElementDictionary.Add(XName.Get("DisplayArtist", ""), typeof(ddex_net.xml._20120404.ddexC.Artist));
            localElementDictionary.Add(XName.Get("ResourceContributor", ""), typeof(ddex_net.xml._20120404.ddexC.ResourceContributor));
            localElementDictionary.Add(XName.Get("IndirectResourceContributor", ""), typeof(ddex_net.xml._20120404.ddexC.IndirectResourceContributor));
            localElementDictionary.Add(XName.Get("RightsAgreementId", ""), typeof(ddex_net.xml._20120404.ddexC.RightsAgreementId));
            localElementDictionary.Add(XName.Get("LabelName", ""), typeof(ddex_net.xml._20120404.ddexC.LabelName));
            localElementDictionary.Add(XName.Get("RightsController", ""), typeof(ddex_net.xml._20120404.ddexC.RightsController));
            localElementDictionary.Add(XName.Get("RemasteredDate", ""), typeof(ddex_net.xml._20120404.ddexC.EventDate));
            localElementDictionary.Add(XName.Get("OriginalResourceReleaseDate", ""), typeof(ddex_net.xml._20120404.ddexC.EventDate));
            localElementDictionary.Add(XName.Get("PLine", ""), typeof(ddex_net.xml._20120404.ddexC.PLine));
            localElementDictionary.Add(XName.Get("CourtesyLine", ""), typeof(ddex_net.xml._20120404.ddexC.CourtesyLine));
            localElementDictionary.Add(XName.Get("SequenceNumber", ""), typeof(string));
            localElementDictionary.Add(XName.Get("HostSoundCarrier", ""), typeof(ddex_net.xml._20120404.ddexC.HostSoundCarrier));
            localElementDictionary.Add(XName.Get("MarketingComment", ""), typeof(ddex_net.xml._20120404.ddexC.Comment));
            localElementDictionary.Add(XName.Get("Genre", ""), typeof(ddex_net.xml._20120404.ddexC.Genre));
            localElementDictionary.Add(XName.Get("ParentalWarningType", ""), typeof(ddex_net.xml._20120404.ddexC.ParentalWarningType));
            localElementDictionary.Add(XName.Get("AvRating", ""), typeof(ddex_net.xml._20120404.ddexC.AvRating));
            localElementDictionary.Add(XName.Get("FulfillmentDate", ""), typeof(ddex_net.xml._20120404.ddexC.FulfillmentDate));
            localElementDictionary.Add(XName.Get("Keywords", ""), typeof(ddex_net.xml._20120404.ddexC.Keywords));
            localElementDictionary.Add(XName.Get("Synopsis", ""), typeof(ddex_net.xml._20120404.ddexC.Synopsis));
            localElementDictionary.Add(XName.Get("CLine", ""), typeof(ddex_net.xml._20120404.ddexC.CLine));
            localElementDictionary.Add(XName.Get("TechnicalVideoDetails", ""), typeof(TechnicalVideoDetails));
            localElementDictionary.Add(XName.Get("Character", ""), typeof(ddex_net.xml._20120404.ddexC.Character));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a Web policy.
    /// </para>
    /// <para>
    /// Regular expression: (Condition | AccessBlockingRequested? | (AccessLimitation?, EmbeddingAllowed?, UserRatingAllowed?, UserCommentAllowed?, UserResponsesAllowed?, SyndicationAllowed?))
    /// </para>
    /// </summary>
    public partial class WebPolicy : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator WebPolicy(XElement xe) { return XTypedServices.ToXTypedElement<WebPolicy>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static WebPolicy() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a Web policy.
        /// </para>
        /// <para>
        /// Regular expression: (Condition | AccessBlockingRequested? | (AccessLimitation?, EmbeddingAllowed?, UserRatingAllowed?, UserCommentAllowed?, UserResponsesAllowed?, SyndicationAllowed?))
        /// </para>
        /// </summary>
        public WebPolicy() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of conditions.
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Condition | AccessBlockingRequested? | (AccessLimitation?, EmbeddingAllowed?, UserRatingAllowed?, UserCommentAllowed?, UserResponsesAllowed?, SyndicationAllowed?))
        /// </para>
        /// </summary>
        public Condition Condition {
            get {
                XElement x = this.GetElement(XName.Get("Condition", ""));
                return ((Condition)(x));
            }
            set {
                this.SetElement(XName.Get("Condition", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Flag indicating whether a ddex:MessageRecipient shall block all access to the ddex:Release (=True) or not (=False).
        /// </para>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Regular expression: (Condition | AccessBlockingRequested? | (AccessLimitation?, EmbeddingAllowed?, UserRatingAllowed?, UserCommentAllowed?, UserResponsesAllowed?, SyndicationAllowed?))
        /// </para>
        /// </summary>
        public System.Nullable<bool> AccessBlockingRequested {
            get {
                XElement x = this.GetElement(XName.Get("AccessBlockingRequested", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("AccessBlockingRequested", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Type of limitation on the access of the ddex:UgcSite. This governs whether the content of ddex:UgcSites is only accessible to members/friends of the site or not.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Condition | AccessBlockingRequested? | (AccessLimitation?, EmbeddingAllowed?, UserRatingAllowed?, UserCommentAllowed?, UserResponsesAllowed?, SyndicationAllowed?))
        /// </para>
        /// </summary>
        public string AccessLimitation {
            get {
                XElement x = this.GetElement(XName.Get("AccessLimitation", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("AccessLimitation", ""), value, "AccessLimitation", global::ddex_net.xml._20120404.ddex.AccessLimitation.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Flag indicating whether a user is allowed to embed a ddex:Release on his website outside the ddex:UgcSite (=True) or not (=False).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Condition | AccessBlockingRequested? | (AccessLimitation?, EmbeddingAllowed?, UserRatingAllowed?, UserCommentAllowed?, UserResponsesAllowed?, SyndicationAllowed?))
        /// </para>
        /// </summary>
        public System.Nullable<bool> EmbeddingAllowed {
            get {
                XElement x = this.GetElement(XName.Get("EmbeddingAllowed", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("EmbeddingAllowed", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Flag indicating whether a user is allowed to provide a rating for the ddex:Release on the ddex:UgcSite (=True) or not (=False).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Condition | AccessBlockingRequested? | (AccessLimitation?, EmbeddingAllowed?, UserRatingAllowed?, UserCommentAllowed?, UserResponsesAllowed?, SyndicationAllowed?))
        /// </para>
        /// </summary>
        public System.Nullable<bool> UserRatingAllowed {
            get {
                XElement x = this.GetElement(XName.Get("UserRatingAllowed", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("UserRatingAllowed", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Flag indicating whether a user is allowed to provide a ddex:Comment for the ddex:Release on the ddex:UgcSite (=True) or not (=False).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Condition | AccessBlockingRequested? | (AccessLimitation?, EmbeddingAllowed?, UserRatingAllowed?, UserCommentAllowed?, UserResponsesAllowed?, SyndicationAllowed?))
        /// </para>
        /// </summary>
        public System.Nullable<bool> UserCommentAllowed {
            get {
                XElement x = this.GetElement(XName.Get("UserCommentAllowed", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("UserCommentAllowed", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Flag indicating whether a user is allowed to provide a response to a ddex:Comment for the ddex:Release on the ddex:UgcSite (=True) or not (=False).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Condition | AccessBlockingRequested? | (AccessLimitation?, EmbeddingAllowed?, UserRatingAllowed?, UserCommentAllowed?, UserResponsesAllowed?, SyndicationAllowed?))
        /// </para>
        /// </summary>
        public System.Nullable<bool> UserResponsesAllowed {
            get {
                XElement x = this.GetElement(XName.Get("UserResponsesAllowed", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("UserResponsesAllowed", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Flag indicating whether syndication is allowed (=True) or not (=False).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Condition | AccessBlockingRequested? | (AccessLimitation?, EmbeddingAllowed?, UserRatingAllowed?, UserCommentAllowed?, UserResponsesAllowed?, SyndicationAllowed?))
        /// </para>
        /// </summary>
        public System.Nullable<bool> SyndicationAllowed {
            get {
                XElement x = this.GetElement(XName.Get("SyndicationAllowed", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("SyndicationAllowed", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("WebPolicy", "http://ddex.net/xml/ern/341");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<WebPolicy>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Condition", ""), typeof(Condition));
            localElementDictionary.Add(XName.Get("AccessBlockingRequested", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("AccessLimitation", ""), typeof(string));
            localElementDictionary.Add(XName.Get("EmbeddingAllowed", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("UserRatingAllowed", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("UserCommentAllowed", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("UserResponsesAllowed", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("SyndicationAllowed", ""), typeof(bool));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public class LinqToXsdTypeManager : ILinqToXsdTypeManager {
        
        static Dictionary<XName, System.Type> typeDictionary = new Dictionary<XName, System.Type>();
        
        static Dictionary<XName, System.Type> elementDictionary = new Dictionary<XName, System.Type>();
        
        private static XmlSchemaSet schemaSet;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();
        
        static LinqToXsdTypeManager() {
            BuildTypeDictionary();
            BuildElementDictionary();
        }
        
        XmlSchemaSet ILinqToXsdTypeManager.Schemas {
            get {
                if ((schemaSet == null)) {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set {
                schemaSet = value;
            }
        }
        
        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary {
            get {
                return typeDictionary;
            }
        }
        
        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary {
            get {
                return elementDictionary;
            }
        }
        
        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping {
            get {
                return XTypedServices.EmptyTypeMappingDictionary;
            }
        }
        
        public static LinqToXsdTypeManager Instance {
            get {
                return typeManagerSingleton;
            }
        }
        
        private static void BuildTypeDictionary() {
            typeDictionary.Add(XName.Get("CatalogItem", "http://ddex.net/xml/ern/341"), typeof(global::ddex_net.xml.ern._341.CatalogItem));
            typeDictionary.Add(XName.Get("CatalogReleaseReferenceList", "http://ddex.net/xml/ern/341"), typeof(global::ddex_net.xml.ern._341.CatalogReleaseReferenceList));
            typeDictionary.Add(XName.Get("CatalogTransfer", "http://ddex.net/xml/ern/341"), typeof(global::ddex_net.xml.ern._341.CatalogTransfer));
            typeDictionary.Add(XName.Get("Collection", "http://ddex.net/xml/ern/341"), typeof(global::ddex_net.xml.ern._341.Collection));
            typeDictionary.Add(XName.Get("CollectionDetailsByTerritory", "http://ddex.net/xml/ern/341"), typeof(global::ddex_net.xml.ern._341.CollectionDetailsByTerritory));
            typeDictionary.Add(XName.Get("CollectionList", "http://ddex.net/xml/ern/341"), typeof(global::ddex_net.xml.ern._341.CollectionList));
            typeDictionary.Add(XName.Get("CollectionResourceReference", "http://ddex.net/xml/ern/341"), typeof(global::ddex_net.xml.ern._341.CollectionResourceReference));
            typeDictionary.Add(XName.Get("CollectionResourceReferenceList", "http://ddex.net/xml/ern/341"), typeof(global::ddex_net.xml.ern._341.CollectionResourceReferenceList));
            typeDictionary.Add(XName.Get("CollectionWorkReference", "http://ddex.net/xml/ern/341"), typeof(global::ddex_net.xml.ern._341.CollectionWorkReference));
            typeDictionary.Add(XName.Get("CollectionWorkReferenceList", "http://ddex.net/xml/ern/341"), typeof(global::ddex_net.xml.ern._341.CollectionWorkReferenceList));
            typeDictionary.Add(XName.Get("Condition", "http://ddex.net/xml/ern/341"), typeof(global::ddex_net.xml.ern._341.Condition));
            typeDictionary.Add(XName.Get("Cue", "http://ddex.net/xml/ern/341"), typeof(global::ddex_net.xml.ern._341.Cue));
            typeDictionary.Add(XName.Get("CueSheet", "http://ddex.net/xml/ern/341"), typeof(global::ddex_net.xml.ern._341.CueSheet));
            typeDictionary.Add(XName.Get("CueSheetList", "http://ddex.net/xml/ern/341"), typeof(global::ddex_net.xml.ern._341.CueSheetList));
            typeDictionary.Add(XName.Get("Deal", "http://ddex.net/xml/ern/341"), typeof(global::ddex_net.xml.ern._341.Deal));
            typeDictionary.Add(XName.Get("DealList", "http://ddex.net/xml/ern/341"), typeof(global::ddex_net.xml.ern._341.DealList));
            typeDictionary.Add(XName.Get("DealTechnicalResourceDetailsReferenceList", "http://ddex.net/xml/ern/341"), typeof(global::ddex_net.xml.ern._341.DealTechnicalResourceDetailsReferenceList));
            typeDictionary.Add(XName.Get("DealTerms", "http://ddex.net/xml/ern/341"), typeof(global::ddex_net.xml.ern._341.DealTerms));
            typeDictionary.Add(XName.Get("Image", "http://ddex.net/xml/ern/341"), typeof(global::ddex_net.xml.ern._341.Image));
            typeDictionary.Add(XName.Get("ImageDetailsByTerritory", "http://ddex.net/xml/ern/341"), typeof(global::ddex_net.xml.ern._341.ImageDetailsByTerritory));
            typeDictionary.Add(XName.Get("MIDI", "http://ddex.net/xml/ern/341"), typeof(global::ddex_net.xml.ern._341.MIDI));
            typeDictionary.Add(XName.Get("MidiDetailsByTerritory", "http://ddex.net/xml/ern/341"), typeof(global::ddex_net.xml.ern._341.MidiDetailsByTerritory));
            typeDictionary.Add(XName.Get("PhysicalReturns", "http://ddex.net/xml/ern/341"), typeof(global::ddex_net.xml.ern._341.PhysicalReturns));
            typeDictionary.Add(XName.Get("PreviewDetails", "http://ddex.net/xml/ern/341"), typeof(global::ddex_net.xml.ern._341.PreviewDetails));
            typeDictionary.Add(XName.Get("RelatedReleaseOfferSet", "http://ddex.net/xml/ern/341"), typeof(global::ddex_net.xml.ern._341.RelatedReleaseOfferSet));
            typeDictionary.Add(XName.Get("Release", "http://ddex.net/xml/ern/341"), typeof(global::ddex_net.xml.ern._341.Release));
            typeDictionary.Add(XName.Get("ReleaseDeal", "http://ddex.net/xml/ern/341"), typeof(global::ddex_net.xml.ern._341.ReleaseDeal));
            typeDictionary.Add(XName.Get("ReleaseDetailsByTerritory", "http://ddex.net/xml/ern/341"), typeof(global::ddex_net.xml.ern._341.ReleaseDetailsByTerritory));
            typeDictionary.Add(XName.Get("ReleaseList", "http://ddex.net/xml/ern/341"), typeof(global::ddex_net.xml.ern._341.ReleaseList));
            typeDictionary.Add(XName.Get("ResourceGroup", "http://ddex.net/xml/ern/341"), typeof(global::ddex_net.xml.ern._341.ResourceGroup));
            typeDictionary.Add(XName.Get("ResourceGroupContentItem", "http://ddex.net/xml/ern/341"), typeof(global::ddex_net.xml.ern._341.ResourceGroupContentItem));
            typeDictionary.Add(XName.Get("ResourceList", "http://ddex.net/xml/ern/341"), typeof(global::ddex_net.xml.ern._341.ResourceList));
            typeDictionary.Add(XName.Get("ResourceUsage", "http://ddex.net/xml/ern/341"), typeof(global::ddex_net.xml.ern._341.ResourceUsage));
            typeDictionary.Add(XName.Get("RightsClaimPolicy", "http://ddex.net/xml/ern/341"), typeof(global::ddex_net.xml.ern._341.RightsClaimPolicy));
            typeDictionary.Add(XName.Get("SheetMusic", "http://ddex.net/xml/ern/341"), typeof(global::ddex_net.xml.ern._341.SheetMusic));
            typeDictionary.Add(XName.Get("SheetMusicDetailsByTerritory", "http://ddex.net/xml/ern/341"), typeof(global::ddex_net.xml.ern._341.SheetMusicDetailsByTerritory));
            typeDictionary.Add(XName.Get("Software", "http://ddex.net/xml/ern/341"), typeof(global::ddex_net.xml.ern._341.Software));
            typeDictionary.Add(XName.Get("SoftwareDetailsByTerritory", "http://ddex.net/xml/ern/341"), typeof(global::ddex_net.xml.ern._341.SoftwareDetailsByTerritory));
            typeDictionary.Add(XName.Get("SoundRecording", "http://ddex.net/xml/ern/341"), typeof(global::ddex_net.xml.ern._341.SoundRecording));
            typeDictionary.Add(XName.Get("SoundRecordingDetailsByTerritory", "http://ddex.net/xml/ern/341"), typeof(global::ddex_net.xml.ern._341.SoundRecordingDetailsByTerritory));
            typeDictionary.Add(XName.Get("SoundRecordingPreviewDetails", "http://ddex.net/xml/ern/341"), typeof(global::ddex_net.xml.ern._341.SoundRecordingPreviewDetails));
            typeDictionary.Add(XName.Get("TechnicalImageDetails", "http://ddex.net/xml/ern/341"), typeof(global::ddex_net.xml.ern._341.TechnicalImageDetails));
            typeDictionary.Add(XName.Get("TechnicalMidiDetails", "http://ddex.net/xml/ern/341"), typeof(global::ddex_net.xml.ern._341.TechnicalMidiDetails));
            typeDictionary.Add(XName.Get("TechnicalSheetMusicDetails", "http://ddex.net/xml/ern/341"), typeof(global::ddex_net.xml.ern._341.TechnicalSheetMusicDetails));
            typeDictionary.Add(XName.Get("TechnicalSoftwareDetails", "http://ddex.net/xml/ern/341"), typeof(global::ddex_net.xml.ern._341.TechnicalSoftwareDetails));
            typeDictionary.Add(XName.Get("TechnicalSoundRecordingDetails", "http://ddex.net/xml/ern/341"), typeof(global::ddex_net.xml.ern._341.TechnicalSoundRecordingDetails));
            typeDictionary.Add(XName.Get("TechnicalTextDetails", "http://ddex.net/xml/ern/341"), typeof(global::ddex_net.xml.ern._341.TechnicalTextDetails));
            typeDictionary.Add(XName.Get("TechnicalUserDefinedResourceDetails", "http://ddex.net/xml/ern/341"), typeof(global::ddex_net.xml.ern._341.TechnicalUserDefinedResourceDetails));
            typeDictionary.Add(XName.Get("TechnicalVideoDetails", "http://ddex.net/xml/ern/341"), typeof(global::ddex_net.xml.ern._341.TechnicalVideoDetails));
            typeDictionary.Add(XName.Get("Text", "http://ddex.net/xml/ern/341"), typeof(global::ddex_net.xml.ern._341.Text));
            typeDictionary.Add(XName.Get("TextDetailsByTerritory", "http://ddex.net/xml/ern/341"), typeof(global::ddex_net.xml.ern._341.TextDetailsByTerritory));
            typeDictionary.Add(XName.Get("UserDefinedResource", "http://ddex.net/xml/ern/341"), typeof(global::ddex_net.xml.ern._341.UserDefinedResource));
            typeDictionary.Add(XName.Get("UserDefinedResourceDetailsByTerritory", "http://ddex.net/xml/ern/341"), typeof(global::ddex_net.xml.ern._341.UserDefinedResourceDetailsByTerritory));
            typeDictionary.Add(XName.Get("Video", "http://ddex.net/xml/ern/341"), typeof(global::ddex_net.xml.ern._341.Video));
            typeDictionary.Add(XName.Get("VideoDetailsByTerritory", "http://ddex.net/xml/ern/341"), typeof(global::ddex_net.xml.ern._341.VideoDetailsByTerritory));
            typeDictionary.Add(XName.Get("WebPolicy", "http://ddex.net/xml/ern/341"), typeof(global::ddex_net.xml.ern._341.WebPolicy));
            typeDictionary.Add(XName.Get("AdditionalInformation", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.AdditionalInformation));
            typeDictionary.Add(XName.Get("AdministratingRecordCompany", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.AdministratingRecordCompany));
            typeDictionary.Add(XName.Get("AmountByUseAndDistributionChannelType", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.AmountByUseAndDistributionChannelType));
            typeDictionary.Add(XName.Get("AmountPerCollection", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.AmountPerCollection));
            typeDictionary.Add(XName.Get("Annotation", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.Annotation));
            typeDictionary.Add(XName.Get("AppliedRoyaltyRate", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.AppliedRoyaltyRate));
            typeDictionary.Add(XName.Get("Artist", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.Artist));
            typeDictionary.Add(XName.Get("ArtistRole", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.ArtistRole));
            typeDictionary.Add(XName.Get("AudioCodecType", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.AudioCodecType));
            typeDictionary.Add(XName.Get("AvRating", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.AvRating));
            typeDictionary.Add(XName.Get("BitRate", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.BitRate));
            typeDictionary.Add(XName.Get("CLine", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.CLine));
            typeDictionary.Add(XName.Get("CalculationType", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.CalculationType));
            typeDictionary.Add(XName.Get("CarrierType", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.CarrierType));
            typeDictionary.Add(XName.Get("CatalogNumber", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.CatalogNumber));
            typeDictionary.Add(XName.Get("CdProtectionType", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.CdProtectionType));
            typeDictionary.Add(XName.Get("Character", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.Character));
            typeDictionary.Add(XName.Get("Collection", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.Collection));
            typeDictionary.Add(XName.Get("CollectionCollectionReference", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.CollectionCollectionReference));
            typeDictionary.Add(XName.Get("CollectionCollectionReferenceList", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.CollectionCollectionReferenceList));
            typeDictionary.Add(XName.Get("CollectionDetailsByTerritory", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.CollectionDetailsByTerritory));
            typeDictionary.Add(XName.Get("CollectionId", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.CollectionId));
            typeDictionary.Add(XName.Get("CollectionList", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.CollectionList));
            typeDictionary.Add(XName.Get("CollectionResourceReferenceList", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.CollectionResourceReferenceList));
            typeDictionary.Add(XName.Get("CollectionType", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.CollectionType));
            typeDictionary.Add(XName.Get("Comment", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.Comment));
            typeDictionary.Add(XName.Get("CommercialModelType", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.CommercialModelType));
            typeDictionary.Add(XName.Get("ConsumerRentalPeriod", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.ConsumerRentalPeriod));
            typeDictionary.Add(XName.Get("ContainerFormat", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.ContainerFormat));
            typeDictionary.Add(XName.Get("CourtesyLine", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.CourtesyLine));
            typeDictionary.Add(XName.Get("CreationId", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.CreationId));
            typeDictionary.Add(XName.Get("Cue", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.Cue));
            typeDictionary.Add(XName.Get("CueCreationReference", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.CueCreationReference));
            typeDictionary.Add(XName.Get("CueOrigin", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.CueOrigin));
            typeDictionary.Add(XName.Get("CueSheet", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.CueSheet));
            typeDictionary.Add(XName.Get("CueSheetList", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.CueSheetList));
            typeDictionary.Add(XName.Get("CueSheetType", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.CueSheetType));
            typeDictionary.Add(XName.Get("CueThemeType", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.CueThemeType));
            typeDictionary.Add(XName.Get("CueUseType", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.CueUseType));
            typeDictionary.Add(XName.Get("CueVisualPerceptionType", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.CueVisualPerceptionType));
            typeDictionary.Add(XName.Get("CueVocalType", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.CueVocalType));
            typeDictionary.Add(XName.Get("DSP", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.DSP));
            typeDictionary.Add(XName.Get("DealReference", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.DealReference));
            typeDictionary.Add(XName.Get("DeductionRate", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.DeductionRate));
            typeDictionary.Add(XName.Get("Description", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.Description));
            typeDictionary.Add(XName.Get("DistributionChannelDescriptor", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.DistributionChannelDescriptor));
            typeDictionary.Add(XName.Get("DistributionChannelType", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.DistributionChannelType));
            typeDictionary.Add(XName.Get("DrmPlatformType", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.DrmPlatformType));
            typeDictionary.Add(XName.Get("DurationByUseType", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.DurationByUseType));
            typeDictionary.Add(XName.Get("ErnMessageInBatch", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.ErnMessageInBatch));
            typeDictionary.Add(XName.Get("EventDate", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.EventDate));
            typeDictionary.Add(XName.Get("EventDateTime", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.EventDateTime));
            typeDictionary.Add(XName.Get("Extent", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.Extent));
            typeDictionary.Add(XName.Get("ExternalLocationDescriptor", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.ExternalLocationDescriptor));
            typeDictionary.Add(XName.Get("ExternalResourceLink", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.ExternalResourceLink));
            typeDictionary.Add(XName.Get("ExternallyLinkedResourceType", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.ExternallyLinkedResourceType));
            typeDictionary.Add(XName.Get("File", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.File));
            typeDictionary.Add(XName.Get("Fingerprint", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.Fingerprint));
            typeDictionary.Add(XName.Get("FingerprintAlgorithmType", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.FingerprintAlgorithmType));
            typeDictionary.Add(XName.Get("FrameRate", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.FrameRate));
            typeDictionary.Add(XName.Get("FulfillmentDate", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.FulfillmentDate));
            typeDictionary.Add(XName.Get("Genre", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.Genre));
            typeDictionary.Add(XName.Get("GoverningAgreementType", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.GoverningAgreementType));
            typeDictionary.Add(XName.Get("GuaranteedAmount", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.GuaranteedAmount));
            typeDictionary.Add(XName.Get("HashSum", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.HashSum));
            typeDictionary.Add(XName.Get("HashSumAlgorithmType", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.HashSumAlgorithmType));
            typeDictionary.Add(XName.Get("HostSoundCarrier", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.HostSoundCarrier));
            typeDictionary.Add(XName.Get("ICPN", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.ICPN));
            typeDictionary.Add(XName.Get("ImageCodecType", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.ImageCodecType));
            typeDictionary.Add(XName.Get("ImageDetailsByTerritory", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.ImageDetailsByTerritory));
            typeDictionary.Add(XName.Get("ImageId", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.ImageId));
            typeDictionary.Add(XName.Get("ImageType", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.ImageType));
            typeDictionary.Add(XName.Get("IndirectResourceContributor", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.IndirectResourceContributor));
            typeDictionary.Add(XName.Get("Keywords", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.Keywords));
            typeDictionary.Add(XName.Get("LabelName", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.LabelName));
            typeDictionary.Add(XName.Get("LicenseOrClaimRefusalReason", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.LicenseOrClaimRefusalReason));
            typeDictionary.Add(XName.Get("LicenseOrClaimRequestUpdateReason", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.LicenseOrClaimRequestUpdateReason));
            typeDictionary.Add(XName.Get("LicenseOrClaimUpdateReason", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.LicenseOrClaimUpdateReason));
            typeDictionary.Add(XName.Get("LinkedReleaseResourceReference", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.LinkedReleaseResourceReference));
            typeDictionary.Add(XName.Get("MessageActionType", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.MessageActionType));
            typeDictionary.Add(XName.Get("MessageAuditTrail", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.MessageAuditTrail));
            typeDictionary.Add(XName.Get("MessageAuditTrailEvent", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.MessageAuditTrailEvent));
            typeDictionary.Add(XName.Get("MessageHeader", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.MessageHeader));
            typeDictionary.Add(XName.Get("MessageNotificationPeriod", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.MessageNotificationPeriod));
            typeDictionary.Add(XName.Get("MessagingParty", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.MessagingParty));
            typeDictionary.Add(XName.Get("MidiDetailsByTerritory", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.MidiDetailsByTerritory));
            typeDictionary.Add(XName.Get("MidiId", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.MidiId));
            typeDictionary.Add(XName.Get("MidiType", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.MidiType));
            typeDictionary.Add(XName.Get("MusicalWork", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.MusicalWork));
            typeDictionary.Add(XName.Get("MusicalWorkContributor", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.MusicalWorkContributor));
            typeDictionary.Add(XName.Get("MusicalWorkContributorRole", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.MusicalWorkContributorRole));
            typeDictionary.Add(XName.Get("MusicalWorkDetailsByTerritory", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.MusicalWorkDetailsByTerritory));
            typeDictionary.Add(XName.Get("MusicalWorkId", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.MusicalWorkId));
            typeDictionary.Add(XName.Get("MusicalWorkType", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.MusicalWorkType));
            typeDictionary.Add(XName.Get("Name", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.Name));
            typeDictionary.Add(XName.Get("NumberOfDataMismatchItems", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.NumberOfDataMismatchItems));
            typeDictionary.Add(XName.Get("NumberOfSubscribers", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.NumberOfSubscribers));
            typeDictionary.Add(XName.Get("OperatingSystemType", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.OperatingSystemType));
            typeDictionary.Add(XName.Get("OrderType", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.OrderType));
            typeDictionary.Add(XName.Get("PLine", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.PLine));
            typeDictionary.Add(XName.Get("ParentalWarningType", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.ParentalWarningType));
            typeDictionary.Add(XName.Get("PartyDescriptor", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.PartyDescriptor));
            typeDictionary.Add(XName.Get("PartyId", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.PartyId));
            typeDictionary.Add(XName.Get("PartyName", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.PartyName));
            typeDictionary.Add(XName.Get("Period", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.Period));
            typeDictionary.Add(XName.Get("Price", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.Price));
            typeDictionary.Add(XName.Get("PriceConsumerPaidExcSalesTax", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.PriceConsumerPaidExcSalesTax));
            typeDictionary.Add(XName.Get("PriceInformation", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.PriceInformation));
            typeDictionary.Add(XName.Get("PriceRangeType", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.PriceRangeType));
            typeDictionary.Add(XName.Get("PriceType", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.PriceType));
            typeDictionary.Add(XName.Get("ProductType", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.ProductType));
            typeDictionary.Add(XName.Get("PromotionalCode", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.PromotionalCode));
            typeDictionary.Add(XName.Get("ProprietaryId", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.ProprietaryId));
            typeDictionary.Add(XName.Get("Purpose", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.Purpose));
            typeDictionary.Add(XName.Get("RatingAgency", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.RatingAgency));
            typeDictionary.Add(XName.Get("Reason", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.Reason));
            typeDictionary.Add(XName.Get("ReasonType", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.ReasonType));
            typeDictionary.Add(XName.Get("RecordCompanyMarketShareData", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.RecordCompanyMarketShareData));
            typeDictionary.Add(XName.Get("RedeliveryReasonType", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.RedeliveryReasonType));
            typeDictionary.Add(XName.Get("ReferenceTitle", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.ReferenceTitle));
            typeDictionary.Add(XName.Get("RelatedLicenseOrClaimId", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.RelatedLicenseOrClaimId));
            typeDictionary.Add(XName.Get("RelatedLicenseOrClaimRequestId", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.RelatedLicenseOrClaimRequestId));
            typeDictionary.Add(XName.Get("RelatedRelease", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.RelatedRelease));
            typeDictionary.Add(XName.Get("ReleaseAvailabilityStatus", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.ReleaseAvailabilityStatus));
            typeDictionary.Add(XName.Get("ReleaseCollectionReference", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.ReleaseCollectionReference));
            typeDictionary.Add(XName.Get("ReleaseCollectionReferenceList", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.ReleaseCollectionReferenceList));
            typeDictionary.Add(XName.Get("ReleaseDetailsByTerritory", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.ReleaseDetailsByTerritory));
            typeDictionary.Add(XName.Get("ReleaseId", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.ReleaseId));
            typeDictionary.Add(XName.Get("ReleaseRelationshipType", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.ReleaseRelationshipType));
            typeDictionary.Add(XName.Get("ReleaseResourceReference", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.ReleaseResourceReference));
            typeDictionary.Add(XName.Get("ReleaseResourceReferenceList", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.ReleaseResourceReferenceList));
            typeDictionary.Add(XName.Get("ReleaseSummary", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.ReleaseSummary));
            typeDictionary.Add(XName.Get("ReleaseSummaryDetailsByTerritory", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.ReleaseSummaryDetailsByTerritory));
            typeDictionary.Add(XName.Get("ReleaseType", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.ReleaseType));
            typeDictionary.Add(XName.Get("RemittanceAdvice", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.RemittanceAdvice));
            typeDictionary.Add(XName.Get("ReportFormat", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.ReportFormat));
            typeDictionary.Add(XName.Get("ReportType", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.ReportType));
            typeDictionary.Add(XName.Get("ResourceContainedResourceReference", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.ResourceContainedResourceReference));
            typeDictionary.Add(XName.Get("ResourceContainedResourceReferenceList", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.ResourceContainedResourceReferenceList));
            typeDictionary.Add(XName.Get("ResourceContributor", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.ResourceContributor));
            typeDictionary.Add(XName.Get("ResourceContributorRole", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.ResourceContributorRole));
            typeDictionary.Add(XName.Get("ResourceGroupResourceReferenceList", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.ResourceGroupResourceReferenceList));
            typeDictionary.Add(XName.Get("ResourceId", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.ResourceId));
            typeDictionary.Add(XName.Get("ResourceMusicalWorkReference", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.ResourceMusicalWorkReference));
            typeDictionary.Add(XName.Get("ResourceMusicalWorkReferenceList", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.ResourceMusicalWorkReferenceList));
            typeDictionary.Add(XName.Get("ResourceOmissionReason", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.ResourceOmissionReason));
            typeDictionary.Add(XName.Get("ResourceType", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.ResourceType));
            typeDictionary.Add(XName.Get("RightShare", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.RightShare));
            typeDictionary.Add(XName.Get("RightShareCreationReferenceList", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.RightShareCreationReferenceList));
            typeDictionary.Add(XName.Get("RightsAgreementId", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.RightsAgreementId));
            typeDictionary.Add(XName.Get("RightsController", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.RightsController));
            typeDictionary.Add(XName.Get("RightsType", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.RightsType));
            typeDictionary.Add(XName.Get("RoyaltyAmount", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.RoyaltyAmount));
            typeDictionary.Add(XName.Get("RoyaltyCode", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.RoyaltyCode));
            typeDictionary.Add(XName.Get("SalesReportingProxyReleaseId", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.SalesReportingProxyReleaseId));
            typeDictionary.Add(XName.Get("SamplingRate", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.SamplingRate));
            typeDictionary.Add(XName.Get("SheetMusicCodecType", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.SheetMusicCodecType));
            typeDictionary.Add(XName.Get("SheetMusicDetailsByTerritory", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.SheetMusicDetailsByTerritory));
            typeDictionary.Add(XName.Get("SheetMusicId", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.SheetMusicId));
            typeDictionary.Add(XName.Get("SheetMusicType", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.SheetMusicType));
            typeDictionary.Add(XName.Get("SocietyAffiliation", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.SocietyAffiliation));
            typeDictionary.Add(XName.Get("SoftwareDetailsByTerritory", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.SoftwareDetailsByTerritory));
            typeDictionary.Add(XName.Get("SoftwareId", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.SoftwareId));
            typeDictionary.Add(XName.Get("SoftwareType", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.SoftwareType));
            typeDictionary.Add(XName.Get("SoundProcessorType", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.SoundProcessorType));
            typeDictionary.Add(XName.Get("SoundRecordingCollectionReference", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.SoundRecordingCollectionReference));
            typeDictionary.Add(XName.Get("SoundRecordingCollectionReferenceList", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.SoundRecordingCollectionReferenceList));
            typeDictionary.Add(XName.Get("SoundRecordingDetailsByTerritory", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.SoundRecordingDetailsByTerritory));
            typeDictionary.Add(XName.Get("SoundRecordingId", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.SoundRecordingId));
            typeDictionary.Add(XName.Get("SoundRecordingType", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.SoundRecordingType));
            typeDictionary.Add(XName.Get("StoreLocationDescriptor", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.StoreLocationDescriptor));
            typeDictionary.Add(XName.Get("SubTitle", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.SubTitle));
            typeDictionary.Add(XName.Get("SupplyChainStatus", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.SupplyChainStatus));
            typeDictionary.Add(XName.Get("Synopsis", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.Synopsis));
            typeDictionary.Add(XName.Get("TariffReference", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.TariffReference));
            typeDictionary.Add(XName.Get("Tax", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.Tax));
            typeDictionary.Add(XName.Get("TaxRate", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.TaxRate));
            typeDictionary.Add(XName.Get("TaxScope", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.TaxScope));
            typeDictionary.Add(XName.Get("TaxType", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.TaxType));
            typeDictionary.Add(XName.Get("TechnicalInstantiation", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.TechnicalInstantiation));
            typeDictionary.Add(XName.Get("TextCodecType", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.TextCodecType));
            typeDictionary.Add(XName.Get("TextDetailsByTerritory", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.TextDetailsByTerritory));
            typeDictionary.Add(XName.Get("TextId", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.TextId));
            typeDictionary.Add(XName.Get("TextType", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.TextType));
            typeDictionary.Add(XName.Get("Title", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.Title));
            typeDictionary.Add(XName.Get("TitleText", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.TitleText));
            typeDictionary.Add(XName.Get("TotalRoyaltyAmount", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.TotalRoyaltyAmount));
            typeDictionary.Add(XName.Get("TypedSubTitle", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.TypedSubTitle));
            typeDictionary.Add(XName.Get("Usage", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.Usage));
            typeDictionary.Add(XName.Get("UseType", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.UseType));
            typeDictionary.Add(XName.Get("UserDefinedResourceDetailsByTerritory", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.UserDefinedResourceDetailsByTerritory));
            typeDictionary.Add(XName.Get("UserDefinedResourceId", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.UserDefinedResourceId));
            typeDictionary.Add(XName.Get("UserDefinedResourceType", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.UserDefinedResourceType));
            typeDictionary.Add(XName.Get("UserDefinedValue", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.UserDefinedValue));
            typeDictionary.Add(XName.Get("UserInterfaceType", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.UserInterfaceType));
            typeDictionary.Add(XName.Get("VideoCodecType", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.VideoCodecType));
            typeDictionary.Add(XName.Get("VideoCueSheetReference", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.VideoCueSheetReference));
            typeDictionary.Add(XName.Get("VideoCueSheetReferenceList", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.VideoCueSheetReferenceList));
            typeDictionary.Add(XName.Get("VideoDetailsByTerritory", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.VideoDetailsByTerritory));
            typeDictionary.Add(XName.Get("VideoId", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.VideoId));
            typeDictionary.Add(XName.Get("VideoType", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.VideoType));
            typeDictionary.Add(XName.Get("WebPage", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.WebPage));
            typeDictionary.Add(XName.Get("WorkList", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.WorkList));
            typeDictionary.Add(XName.Get("WsMessageStatus", "http://ddex.net/xml/20120404/ddexC"), typeof(global::ddex_net.xml._20120404.ddexC.WsMessageStatus));
        }
        
        private static void BuildElementDictionary() {
            elementDictionary.Add(XName.Get("NewReleaseMessage", "http://ddex.net/xml/ern/341"), typeof(global::ddex_net.xml.ern._341.NewReleaseMessage));
            elementDictionary.Add(XName.Get("CatalogListMessage", "http://ddex.net/xml/ern/341"), typeof(global::ddex_net.xml.ern._341.CatalogListMessage));
        }
        
        protected internal static void AddSchemas(XmlSchemaSet schemas) {
            schemas.Add(schemaSet);
        }
        
        public static System.Type GetRootType() {
            return elementDictionary[XName.Get("NewReleaseMessage", "http://ddex.net/xml/ern/341")];
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

    public NewReleaseMessage NewReleaseMessage {  get {return rootObject as NewReleaseMessage; } }

    public CatalogListMessage CatalogListMessage {  get {return rootObject as CatalogListMessage; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(NewReleaseMessage root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(CatalogListMessage root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
    
    public partial class XRoot {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

    public global::ddex_net.xml.ern._341.NewReleaseMessage NewReleaseMessage {  get {return rootObject as global::ddex_net.xml.ern._341.NewReleaseMessage; } }

    public global::ddex_net.xml.ern._341.CatalogListMessage CatalogListMessage {  get {return rootObject as global::ddex_net.xml.ern._341.CatalogListMessage; } }
        
        private XRoot() {
        }
        
        public XRoot(global::ddex_net.xml.ern._341.NewReleaseMessage root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::ddex_net.xml.ern._341.CatalogListMessage root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public static XRoot Load(string xmlFile) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(string xmlFile, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(XmlReader xmlReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
namespace ddex_net.xml._20120404.ddexC {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    using ddex_net.xml.ern._341;
    
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of an ddex:AdditionalInformation.
    /// </para>
    /// </summary>
    public partial class AdditionalInformation : XTypedElement, IXMetaData {
        
         public static explicit operator AdditionalInformation(XElement xe) { return XTypedServices.ToXTypedElement<AdditionalInformation>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of an ddex:AdditionalInformation.
        /// </para>
        /// </summary>
        public AdditionalInformation() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script of the ddexC:AdditionalInformation as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("AdditionalInformation", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AdditionalInformation>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of an ddex:AdministratingRecordCompany.
    /// </para>
    /// <para>
    /// Regular expression: (PartyId | (PartyName+, PartyId?))
    /// </para>
    /// </summary>
    public partial class AdministratingRecordCompany : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PartyId> PartyIdField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PartyName> PartyNameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator AdministratingRecordCompany(XElement xe) { return XTypedServices.ToXTypedElement<AdministratingRecordCompany>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AdministratingRecordCompany() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of an ddex:AdministratingRecordCompany.
        /// </para>
        /// <para>
        /// Regular expression: (PartyId | (PartyName+, PartyId?))
        /// </para>
        /// </summary>
        public AdministratingRecordCompany() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:PartyId for the ddex:Party. If no ddex:Namespace is given, the ddex:Identifier is a ddex:DdexPartyId (DPID). Note that DPIDs are not normally used to identify ddex:Artists, ddex:Producers or other ddex:Creators.
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (PartyId | (PartyName+, PartyId?))
        /// </para>
        /// </summary>
        public IList<PartyId> PartyId {
            get {
                if ((this.PartyIdField == null)) {
                    this.PartyIdField = new XTypedList<PartyId>(this, LinqToXsdTypeManager.Instance, XName.Get("PartyId", ""));
                }
                return this.PartyIdField;
            }
            set {
                if ((value == null)) {
                    this.PartyIdField = null;
                }
                else {
                    if ((this.PartyIdField == null)) {
                        this.PartyIdField = XTypedList<PartyId>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("PartyId", ""));
                    }
                    else {
                        XTypedServices.SetList<PartyId>(this.PartyIdField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the PartyName(s).
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (PartyId | (PartyName+, PartyId?))
        /// </para>
        /// </summary>
        public IList<PartyName> PartyName {
            get {
                if ((this.PartyNameField == null)) {
                    this.PartyNameField = new XTypedList<PartyName>(this, LinqToXsdTypeManager.Instance, XName.Get("PartyName", ""));
                }
                return this.PartyNameField;
            }
            set {
                if ((value == null)) {
                    this.PartyNameField = null;
                }
                else {
                    if ((this.PartyNameField == null)) {
                        this.PartyNameField = XTypedList<PartyName>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("PartyName", ""));
                    }
                    else {
                        XTypedServices.SetList<PartyName>(this.PartyNameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the Role if it belongs to a proprietary scheme. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UserDefined value of the ddexC:Role. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserDefinedValue {
            get {
                XAttribute x = this.Attribute(XName.Get("UserDefinedValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserDefinedValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The role played by the ddex:Party responsible for administering Rights in a ddex:Resource or a ddex:Release.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Role {
            get {
                XAttribute x = this.Attribute(XName.Get("Role", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Role", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("AdministratingRecordCompany", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AdministratingRecordCompany>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("PartyId", ""), typeof(PartyId));
            localElementDictionary.Add(XName.Get("PartyName", ""), typeof(PartyName));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of an ddex:Amount specified for a ddex:UseType and a ddex:DistributionChannelType.
    /// </para>
    /// <para>
    /// Regular expression: (Amount, UseType+, UserInterfaceType*, DistributionChannelType*, CarrierType*)
    /// </para>
    /// </summary>
    public partial class AmountByUseAndDistributionChannelType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UseType> UseTypeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UserInterfaceType> UserInterfaceTypeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DistributionChannelType> DistributionChannelTypeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CarrierType> CarrierTypeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator AmountByUseAndDistributionChannelType(XElement xe) { return XTypedServices.ToXTypedElement<AmountByUseAndDistributionChannelType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AmountByUseAndDistributionChannelType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Amount", "")), new NamedContentModelEntity(XName.Get("UseType", "")), new NamedContentModelEntity(XName.Get("UserInterfaceType", "")), new NamedContentModelEntity(XName.Get("DistributionChannelType", "")), new NamedContentModelEntity(XName.Get("CarrierType", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of an ddex:Amount specified for a ddex:UseType and a ddex:DistributionChannelType.
        /// </para>
        /// <para>
        /// Regular expression: (Amount, UseType+, UserInterfaceType*, DistributionChannelType*, CarrierType*)
        /// </para>
        /// </summary>
        public AmountByUseAndDistributionChannelType() {
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Amount specified for the ddex:UseType and the ddex:DistributionChannelType.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Amount, UseType+, UserInterfaceType*, DistributionChannelType*, CarrierType*)
        /// </para>
        /// </summary>
        public decimal Amount {
            get {
                XElement x = this.GetElement(XName.Get("Amount", ""));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElement(XName.Get("Amount", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a nature of a ddex:Service, or a ddex:Release, as used by a ddex:Consumer.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Amount, UseType+, UserInterfaceType*, DistributionChannelType*, CarrierType*)
        /// </para>
        /// </summary>
        public IList<UseType> UseType {
            get {
                if ((this.UseTypeField == null)) {
                    this.UseTypeField = new XTypedList<UseType>(this, LinqToXsdTypeManager.Instance, XName.Get("UseType", ""));
                }
                return this.UseTypeField;
            }
            set {
                if ((value == null)) {
                    this.UseTypeField = null;
                }
                else {
                    if ((this.UseTypeField == null)) {
                        this.UseTypeField = XTypedList<UseType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("UseType", ""));
                    }
                    else {
                        XTypedServices.SetList<UseType>(this.UseTypeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a physical interface by which a ddex:Consumer uses a ddex:Service or ddex:Release.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Amount, UseType+, UserInterfaceType*, DistributionChannelType*, CarrierType*)
        /// </para>
        /// </summary>
        public IList<UserInterfaceType> UserInterfaceType {
            get {
                if ((this.UserInterfaceTypeField == null)) {
                    this.UserInterfaceTypeField = new XTypedList<UserInterfaceType>(this, LinqToXsdTypeManager.Instance, XName.Get("UserInterfaceType", ""));
                }
                return this.UserInterfaceTypeField;
            }
            set {
                if ((value == null)) {
                    this.UserInterfaceTypeField = null;
                }
                else {
                    if ((this.UserInterfaceTypeField == null)) {
                        this.UserInterfaceTypeField = XTypedList<UserInterfaceType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("UserInterfaceType", ""));
                    }
                    else {
                        XTypedServices.SetList<UserInterfaceType>(this.UserInterfaceTypeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a distribution channel used to disseminate a ddex:Service or ddex:Release to a ddex:Consumer.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Amount, UseType+, UserInterfaceType*, DistributionChannelType*, CarrierType*)
        /// </para>
        /// </summary>
        public IList<DistributionChannelType> DistributionChannelType {
            get {
                if ((this.DistributionChannelTypeField == null)) {
                    this.DistributionChannelTypeField = new XTypedList<DistributionChannelType>(this, LinqToXsdTypeManager.Instance, XName.Get("DistributionChannelType", ""));
                }
                return this.DistributionChannelTypeField;
            }
            set {
                if ((value == null)) {
                    this.DistributionChannelTypeField = null;
                }
                else {
                    if ((this.DistributionChannelTypeField == null)) {
                        this.DistributionChannelTypeField = XTypedList<DistributionChannelType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("DistributionChannelType", ""));
                    }
                    else {
                        XTypedServices.SetList<DistributionChannelType>(this.DistributionChannelTypeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Carrier.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Amount, UseType+, UserInterfaceType*, DistributionChannelType*, CarrierType*)
        /// </para>
        /// </summary>
        public IList<CarrierType> CarrierType {
            get {
                if ((this.CarrierTypeField == null)) {
                    this.CarrierTypeField = new XTypedList<CarrierType>(this, LinqToXsdTypeManager.Instance, XName.Get("CarrierType", ""));
                }
                return this.CarrierTypeField;
            }
            set {
                if ((value == null)) {
                    this.CarrierTypeField = null;
                }
                else {
                    if ((this.CarrierTypeField == null)) {
                        this.CarrierTypeField = XTypedList<CarrierType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CarrierType", ""));
                    }
                    else {
                        XTypedServices.SetList<CarrierType>(this.CarrierTypeField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("AmountByUseAndDistributionChannelType", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AmountByUseAndDistributionChannelType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Amount", ""), typeof(decimal));
            localElementDictionary.Add(XName.Get("UseType", ""), typeof(UseType));
            localElementDictionary.Add(XName.Get("UserInterfaceType", ""), typeof(UserInterfaceType));
            localElementDictionary.Add(XName.Get("DistributionChannelType", ""), typeof(DistributionChannelType));
            localElementDictionary.Add(XName.Get("CarrierType", ""), typeof(CarrierType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of an ddex:Amount that has to be paid per ddex:Collection.
    /// </para>
    /// <para>
    /// Regular expression: (Amount, CollectionType)
    /// </para>
    /// </summary>
    public partial class AmountPerCollection : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator AmountPerCollection(XElement xe) { return XTypedServices.ToXTypedElement<AmountPerCollection>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AmountPerCollection() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Amount", "")), new NamedContentModelEntity(XName.Get("CollectionType", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of an ddex:Amount that has to be paid per ddex:Collection.
        /// </para>
        /// <para>
        /// Regular expression: (Amount, CollectionType)
        /// </para>
        /// </summary>
        public AmountPerCollection() {
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Amount specified for the ddex:CollectionType.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Amount, CollectionType)
        /// </para>
        /// </summary>
        public decimal Amount {
            get {
                XElement x = this.GetElement(XName.Get("Amount", ""));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElement(XName.Get("Amount", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:Type of the ddex:Collection.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Amount, CollectionType)
        /// </para>
        /// </summary>
        public CollectionType CollectionType {
            get {
                XElement x = this.GetElement(XName.Get("CollectionType", ""));
                return ((CollectionType)(x));
            }
            set {
                this.SetElement(XName.Get("CollectionType", ""), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("AmountPerCollection", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AmountPerCollection>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Amount", ""), typeof(decimal));
            localElementDictionary.Add(XName.Get("CollectionType", ""), typeof(CollectionType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of an ddex:Annotation.
    /// </para>
    /// </summary>
    public partial class Annotation : XTypedElement, IXMetaData {
        
         public static explicit operator Annotation(XElement xe) { return XTypedServices.ToXTypedElement<Annotation>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of an ddex:Annotation.
        /// </para>
        /// </summary>
        public Annotation() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script of the ddexC:Annotation as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Annotation", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Annotation>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of an applied ddex:RoyaltyRate.
    /// </para>
    /// </summary>
    public partial class AppliedRoyaltyRate : XTypedElement, IXMetaData {
        
         public static explicit operator AppliedRoyaltyRate(XElement xe) { return XTypedServices.ToXTypedElement<AppliedRoyaltyRate>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of an applied ddex:RoyaltyRate.
        /// </para>
        /// </summary>
        public AppliedRoyaltyRate() {
        }
        
        public decimal TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Type of the numeric value specified for the ddex:RoyaltyRate. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string ValueType {
            get {
                XAttribute x = this.Attribute(XName.Get("ValueType", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ValueType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Type of ddex:RoyaltyRate upon which the per unit royalty is calculated. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string RoyaltyRateType {
            get {
                XAttribute x = this.Attribute(XName.Get("RoyaltyRateType", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("RoyaltyRateType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddex:RoyaltyRateType if it is ddex:UserDefined. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UserDefined value of the ddex:RoyaltyRateType if it is ddex:UserDefined. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserDefinedValue {
            get {
                XAttribute x = this.Attribute(XName.Get("UserDefinedValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserDefinedValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("AppliedRoyaltyRate", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AppliedRoyaltyRate>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of an ddex:Artist. An ddex:Artist may be described through ddex:Name, ddex:Identifier and Roles.
    /// </para>
    /// <para>
    /// Regular expression: ((PartyId | (PartyName+, PartyId?)), ArtistRole*)
    /// </para>
    /// </summary>
    public partial class Artist : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PartyId> PartyIdField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PartyName> PartyNameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ArtistRole> ArtistRoleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator Artist(XElement xe) { return XTypedServices.ToXTypedElement<Artist>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Artist() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of an ddex:Artist. An ddex:Artist may be described through ddex:Name, ddex:Identifier and Roles.
        /// </para>
        /// <para>
        /// Regular expression: ((PartyId | (PartyName+, PartyId?)), ArtistRole*)
        /// </para>
        /// </summary>
        public Artist() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:PartyId for the ddex:Party. If no ddex:Namespace is given, the ddex:Identifier is a ddex:DdexPartyId (DPID). Note that DPIDs are not normally used to identify ddex:Artists, ddex:Producers or other ddex:Creators.
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((PartyId | (PartyName+, PartyId?)), ArtistRole*)
        /// </para>
        /// </summary>
        public IList<PartyId> PartyId {
            get {
                if ((this.PartyIdField == null)) {
                    this.PartyIdField = new XTypedList<PartyId>(this, LinqToXsdTypeManager.Instance, XName.Get("PartyId", ""));
                }
                return this.PartyIdField;
            }
            set {
                if ((value == null)) {
                    this.PartyIdField = null;
                }
                else {
                    if ((this.PartyIdField == null)) {
                        this.PartyIdField = XTypedList<PartyId>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("PartyId", ""));
                    }
                    else {
                        XTypedServices.SetList<PartyId>(this.PartyIdField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the PartyName(s).
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((PartyId | (PartyName+, PartyId?)), ArtistRole*)
        /// </para>
        /// </summary>
        public IList<PartyName> PartyName {
            get {
                if ((this.PartyNameField == null)) {
                    this.PartyNameField = new XTypedList<PartyName>(this, LinqToXsdTypeManager.Instance, XName.Get("PartyName", ""));
                }
                return this.PartyNameField;
            }
            set {
                if ((value == null)) {
                    this.PartyNameField = null;
                }
                else {
                    if ((this.PartyNameField == null)) {
                        this.PartyNameField = XTypedList<PartyName>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("PartyName", ""));
                    }
                    else {
                        XTypedServices.SetList<PartyName>(this.PartyNameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a role played by the ddexC:Artist in relation to other ddex:Artists.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((PartyId | (PartyName+, PartyId?)), ArtistRole*)
        /// </para>
        /// </summary>
        public IList<ArtistRole> ArtistRole {
            get {
                if ((this.ArtistRoleField == null)) {
                    this.ArtistRoleField = new XTypedList<ArtistRole>(this, LinqToXsdTypeManager.Instance, XName.Get("ArtistRole", ""));
                }
                return this.ArtistRoleField;
            }
            set {
                if ((value == null)) {
                    this.ArtistRoleField = null;
                }
                else {
                    if ((this.ArtistRoleField == null)) {
                        this.ArtistRoleField = XTypedList<ArtistRole>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ArtistRole", ""));
                    }
                    else {
                        XTypedServices.SetList<ArtistRole>(this.ArtistRoleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The number indicating the order of the ddexC:Artist in a group of ddex:Artists. This is represented in an XML schema as an XML ddex:Attribute. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> SequenceNumber {
            get {
                XAttribute x = this.Attribute(XName.Get("SequenceNumber", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("SequenceNumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Artist", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Artist>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("PartyId", ""), typeof(PartyId));
            localElementDictionary.Add(XName.Get("PartyName", ""), typeof(PartyName));
            localElementDictionary.Add(XName.Get("ArtistRole", ""), typeof(ArtistRole));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of an ddex:ArtistRole. Note: This can be used in a ddex:DdexMessage in relation to any ddex:Performance or ddex:Fixation either of which may form the whole or part of the ddex:Resource itself. Example: if an 'AssociatedPerformer' is shown as a ddex:Contributor to a ddex:MusicalWork it refers to a ddex:Performer of a ddex:Resource (e.g. a ddex:SoundRecording) expressing the ddex:MusicalWork.
    /// </para>
    /// </summary>
    public partial class ArtistRole : XTypedElement, IXMetaData {
        
         public static explicit operator ArtistRole(XElement xe) { return XTypedServices.ToXTypedElement<ArtistRole>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of an ddex:ArtistRole. Note: This can be used in a ddex:DdexMessage in relation to any ddex:Performance or ddex:Fixation either of which may form the whole or part of the ddex:Resource itself. Example: if an 'AssociatedPerformer' is shown as a ddex:Contributor to a ddex:MusicalWork it refers to a ddex:Performer of a ddex:Resource (e.g. a ddex:SoundRecording) expressing the ddex:MusicalWork.
        /// </para>
        /// </summary>
        public ArtistRole() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.ArtistRole.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddexC:ArtistRole. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UserDefined value of the ddexC:ArtistRole. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserDefinedValue {
            get {
                XAttribute x = this.Attribute(XName.Get("UserDefinedValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserDefinedValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ArtistRole", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ArtistRole>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of an ddex:AudioCodecType.
    /// </para>
    /// </summary>
    public partial class AudioCodecType : XTypedElement, IXMetaData {
        
         public static explicit operator AudioCodecType(XElement xe) { return XTypedServices.ToXTypedElement<AudioCodecType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of an ddex:AudioCodecType.
        /// </para>
        /// </summary>
        public AudioCodecType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.AudioCodecType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Identifier of the ddex:Version of the ddexC:AudioCodecType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Version {
            get {
                XAttribute x = this.Attribute(XName.Get("Version", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Version", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddexC:AudioCodecType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UserDefined value of the ddexC:AudioCodecType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserDefinedValue {
            get {
                XAttribute x = this.Attribute(XName.Get("UserDefinedValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserDefinedValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("AudioCodecType", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AudioCodecType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a rating for an audio-visual ddex:Creation.
    /// </para>
    /// <para>
    /// Regular expression: (RatingText, RatingAgency)
    /// </para>
    /// </summary>
    public partial class AvRating : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator AvRating(XElement xe) { return XTypedServices.ToXTypedElement<AvRating>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AvRating() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("RatingText", "")), new NamedContentModelEntity(XName.Get("RatingAgency", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a rating for an audio-visual ddex:Creation.
        /// </para>
        /// <para>
        /// Regular expression: (RatingText, RatingAgency)
        /// </para>
        /// </summary>
        public AvRating() {
        }
        
        /// <summary>
        /// <para>
        /// The text of the ddexC:AvRating.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RatingText, RatingAgency)
        /// </para>
        /// </summary>
        public string RatingText {
            get {
                XElement x = this.GetElement(XName.Get("RatingText", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("RatingText", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A Composite containing details of an Organization that issues the ddexC:AvRating.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RatingText, RatingAgency)
        /// </para>
        /// </summary>
        public RatingAgency RatingAgency {
            get {
                XElement x = this.GetElement(XName.Get("RatingAgency", ""));
                return ((RatingAgency)(x));
            }
            set {
                this.SetElement(XName.Get("RatingAgency", ""), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("AvRating", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AvRating>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("RatingText", ""), typeof(string));
            localElementDictionary.Add(XName.Get("RatingAgency", ""), typeof(RatingAgency));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing a ddex:BitRate and a ddex:UnitOfMeasure.
    /// </para>
    /// </summary>
    public partial class BitRate : XTypedElement, IXMetaData {
        
         public static explicit operator BitRate(XElement xe) { return XTypedServices.ToXTypedElement<BitRate>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a ddex:BitRate and a ddex:UnitOfMeasure.
        /// </para>
        /// </summary>
        public BitRate() {
        }
        
        public decimal TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:UnitOfMeasure of the ddexC:BitRate. This is represented in an XML schema as an XML ddex:Attribute. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UnitOfMeasure {
            get {
                XAttribute x = this.Attribute(XName.Get("UnitOfMeasure", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UnitOfMeasure", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("BitRate", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<BitRate>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:CLine.
    /// </para>
    /// <para>
    /// Regular expression: (Year?, CLineCompany?, CLineText)
    /// </para>
    /// </summary>
    public partial class CLine : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CLine(XElement xe) { return XTypedServices.ToXTypedElement<CLine>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CLine() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Year", "")), new NamedContentModelEntity(XName.Get("CLineCompany", "")), new NamedContentModelEntity(XName.Get("CLineText", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:CLine.
        /// </para>
        /// <para>
        /// Regular expression: (Year?, CLineCompany?, CLineText)
        /// </para>
        /// </summary>
        public CLine() {
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Year of the ddexC:CLine.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Year?, CLineCompany?, CLineText)
        /// </para>
        /// </summary>
        public System.Nullable<System.DateTime> Year {
            get {
                XElement x = this.GetElement(XName.Get("Year", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.GYear).Datatype);
            }
            set {
                this.SetElement(XName.Get("Year", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.GYear).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Name of the company releasing the ddex:Creation. This may be an owner or a licensee of the ddex:Creation.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Year?, CLineCompany?, CLineText)
        /// </para>
        /// </summary>
        public string CLineCompany {
            get {
                XElement x = this.GetElement(XName.Get("CLineCompany", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("CLineCompany", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The text of the ddexC:CLine. (Note: DDEX expects to deprecate the use of the CLineText element in a subsequent version of this standard. It will be deprecated once users of the standard are able to provide CLine information in a structured form.)
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Year?, CLineCompany?, CLineText)
        /// </para>
        /// </summary>
        public string CLineText {
            get {
                XElement x = this.GetElement(XName.Get("CLineText", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("CLineText", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script of the ddex:CLineText as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CLine", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CLine>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Year", ""), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("CLineCompany", ""), typeof(string));
            localElementDictionary.Add(XName.Get("CLineText", ""), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:CalculationType.
    /// </para>
    /// </summary>
    public partial class CalculationType : XTypedElement, IXMetaData {
        
         public static explicit operator CalculationType(XElement xe) { return XTypedServices.ToXTypedElement<CalculationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:CalculationType.
        /// </para>
        /// </summary>
        public CalculationType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.CalculationType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The number indicating the order of the ddexC:CalculationType in a group of ddex:CalculationTypes. This is represented in an XML schema as an XML ddex:Attribute. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> SequenceNumber {
            get {
                XAttribute x = this.Attribute(XName.Get("SequenceNumber", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("SequenceNumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CalculationType", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CalculationType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:CarrierType.
    /// </para>
    /// </summary>
    public partial class CarrierType : XTypedElement, IXMetaData {
        
         public static explicit operator CarrierType(XElement xe) { return XTypedServices.ToXTypedElement<CarrierType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:CarrierType.
        /// </para>
        /// </summary>
        public CarrierType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.CarrierType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddexC:CarrierType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UserDefined value of the ddexC:CarrierType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserDefinedValue {
            get {
                XAttribute x = this.Attribute(XName.Get("UserDefinedValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserDefinedValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CarrierType", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CarrierType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:CatalogNumber.
    /// </para>
    /// </summary>
    public partial class CatalogNumber : XTypedElement, IXMetaData {
        
         public static explicit operator CatalogNumber(XElement xe) { return XTypedServices.ToXTypedElement<CatalogNumber>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:CatalogNumber.
        /// </para>
        /// </summary>
        public CatalogNumber() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddexC:CatalogNumber. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CatalogNumber", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CatalogNumber>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:CdProtectionType.
    /// </para>
    /// </summary>
    public partial class CdProtectionType : XTypedElement, IXMetaData {
        
         public static explicit operator CdProtectionType(XElement xe) { return XTypedServices.ToXTypedElement<CdProtectionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:CdProtectionType.
        /// </para>
        /// </summary>
        public CdProtectionType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.CdProtectionType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddex:CdProtectionType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UserDefined value of the ddex:CdProtectionType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserDefinedValue {
            get {
                XAttribute x = this.Attribute(XName.Get("UserDefinedValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserDefinedValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CdProtectionType", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CdProtectionType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:Character. A ddex:Character may be described through ddex:Name, ddex:Identifier and Roles.
    /// </para>
    /// <para>
    /// Regular expression: ((PartyId | (PartyName+, PartyId?)), ResourceContributor?)
    /// </para>
    /// </summary>
    public partial class Character : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PartyId> PartyIdField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PartyName> PartyNameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator Character(XElement xe) { return XTypedServices.ToXTypedElement<Character>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Character() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Character. A ddex:Character may be described through ddex:Name, ddex:Identifier and Roles.
        /// </para>
        /// <para>
        /// Regular expression: ((PartyId | (PartyName+, PartyId?)), ResourceContributor?)
        /// </para>
        /// </summary>
        public Character() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:PartyId for the ddex:Party. If no ddex:Namespace is given, the ddex:Identifier is a ddex:DdexPartyId (DPID). Note that DPIDs are not normally used to identify ddex:Artists, ddex:Producers or other ddex:Creators.
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((PartyId | (PartyName+, PartyId?)), ResourceContributor?)
        /// </para>
        /// </summary>
        public IList<PartyId> PartyId {
            get {
                if ((this.PartyIdField == null)) {
                    this.PartyIdField = new XTypedList<PartyId>(this, LinqToXsdTypeManager.Instance, XName.Get("PartyId", ""));
                }
                return this.PartyIdField;
            }
            set {
                if ((value == null)) {
                    this.PartyIdField = null;
                }
                else {
                    if ((this.PartyIdField == null)) {
                        this.PartyIdField = XTypedList<PartyId>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("PartyId", ""));
                    }
                    else {
                        XTypedServices.SetList<PartyId>(this.PartyIdField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the PartyName(s).
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((PartyId | (PartyName+, PartyId?)), ResourceContributor?)
        /// </para>
        /// </summary>
        public IList<PartyName> PartyName {
            get {
                if ((this.PartyNameField == null)) {
                    this.PartyNameField = new XTypedList<PartyName>(this, LinqToXsdTypeManager.Instance, XName.Get("PartyName", ""));
                }
                return this.PartyNameField;
            }
            set {
                if ((value == null)) {
                    this.PartyNameField = null;
                }
                else {
                    if ((this.PartyNameField == null)) {
                        this.PartyNameField = XTypedList<PartyName>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("PartyName", ""));
                    }
                    else {
                        XTypedServices.SetList<PartyName>(this.PartyNameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:Name, ddex:Identifier and role(s) of a ddex:Contributor.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((PartyId | (PartyName+, PartyId?)), ResourceContributor?)
        /// </para>
        /// </summary>
        public ResourceContributor ResourceContributor {
            get {
                XElement x = this.GetElement(XName.Get("ResourceContributor", ""));
                return ((ResourceContributor)(x));
            }
            set {
                this.SetElement(XName.Get("ResourceContributor", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The number indicating the order of the ddexC:Character in a group of ddex:Characters. This is represented in an XML schema as an XML ddex:Attribute. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> SequenceNumber {
            get {
                XAttribute x = this.Attribute(XName.Get("SequenceNumber", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("SequenceNumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Character", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Character>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("PartyId", ""), typeof(PartyId));
            localElementDictionary.Add(XName.Get("PartyName", ""), typeof(PartyName));
            localElementDictionary.Add(XName.Get("ResourceContributor", ""), typeof(ResourceContributor));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:Collection.
    /// </para>
    /// <para>
    /// Regular expression: (CollectionId+, CollectionType*, CollectionReference, Title*, Contributor*, CollectionCollectionReferenceList?, IsComplete, DurationOfMusicalContent?, CreationDate?, OriginalReleaseDate?, OriginalLanguage?, CollectionDetailsByTerritory*, CollectionResourceReferenceList?)
    /// </para>
    /// </summary>
    public partial class Collection : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CollectionId> CollectionIdField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CollectionType> CollectionTypeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Title> TitleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ResourceContributor> ContributorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CollectionDetailsByTerritory> CollectionDetailsByTerritoryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Collection(XElement xe) { return XTypedServices.ToXTypedElement<Collection>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Collection() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("CollectionId", "")), new NamedContentModelEntity(XName.Get("CollectionType", "")), new NamedContentModelEntity(XName.Get("CollectionReference", "")), new NamedContentModelEntity(XName.Get("Title", "")), new NamedContentModelEntity(XName.Get("Contributor", "")), new NamedContentModelEntity(XName.Get("CollectionCollectionReferenceList", "")), new NamedContentModelEntity(XName.Get("IsComplete", "")), new NamedContentModelEntity(XName.Get("DurationOfMusicalContent", "")), new NamedContentModelEntity(XName.Get("CreationDate", "")), new NamedContentModelEntity(XName.Get("OriginalReleaseDate", "")), new NamedContentModelEntity(XName.Get("OriginalLanguage", "")), new NamedContentModelEntity(XName.Get("CollectionDetailsByTerritory", "")), new NamedContentModelEntity(XName.Get("CollectionResourceReferenceList", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Collection.
        /// </para>
        /// <para>
        /// Regular expression: (CollectionId+, CollectionType*, CollectionReference, Title*, Contributor*, CollectionCollectionReferenceList?, IsComplete, DurationOfMusicalContent?, CreationDate?, OriginalReleaseDate?, OriginalLanguage?, CollectionDetailsByTerritory*, CollectionResourceReferenceList?)
        /// </para>
        /// </summary>
        public Collection() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of an ddex:Identifier of the ddex:Collection.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (CollectionId+, CollectionType*, CollectionReference, Title*, Contributor*, CollectionCollectionReferenceList?, IsComplete, DurationOfMusicalContent?, CreationDate?, OriginalReleaseDate?, OriginalLanguage?, CollectionDetailsByTerritory*, CollectionResourceReferenceList?)
        /// </para>
        /// </summary>
        public IList<CollectionId> CollectionId {
            get {
                if ((this.CollectionIdField == null)) {
                    this.CollectionIdField = new XTypedList<CollectionId>(this, LinqToXsdTypeManager.Instance, XName.Get("CollectionId", ""));
                }
                return this.CollectionIdField;
            }
            set {
                if ((value == null)) {
                    this.CollectionIdField = null;
                }
                else {
                    if ((this.CollectionIdField == null)) {
                        this.CollectionIdField = XTypedList<CollectionId>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CollectionId", ""));
                    }
                    else {
                        XTypedServices.SetList<CollectionId>(this.CollectionIdField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:Type of the ddex:Collection.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (CollectionId+, CollectionType*, CollectionReference, Title*, Contributor*, CollectionCollectionReferenceList?, IsComplete, DurationOfMusicalContent?, CreationDate?, OriginalReleaseDate?, OriginalLanguage?, CollectionDetailsByTerritory*, CollectionResourceReferenceList?)
        /// </para>
        /// </summary>
        public IList<CollectionType> CollectionType {
            get {
                if ((this.CollectionTypeField == null)) {
                    this.CollectionTypeField = new XTypedList<CollectionType>(this, LinqToXsdTypeManager.Instance, XName.Get("CollectionType", ""));
                }
                return this.CollectionTypeField;
            }
            set {
                if ((value == null)) {
                    this.CollectionTypeField = null;
                }
                else {
                    if ((this.CollectionTypeField == null)) {
                        this.CollectionTypeField = XTypedList<CollectionType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CollectionType", ""));
                    }
                    else {
                        XTypedServices.SetList<CollectionType>(this.CollectionTypeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Identifier (specific to the ddex:Message) of the ddex:Collection within the ddex:Release which contains it. This is a ddex:LocalCollectionAnchor starting with the letter X.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CollectionId+, CollectionType*, CollectionReference, Title*, Contributor*, CollectionCollectionReferenceList?, IsComplete, DurationOfMusicalContent?, CreationDate?, OriginalReleaseDate?, OriginalLanguage?, CollectionDetailsByTerritory*, CollectionResourceReferenceList?)
        /// </para>
        /// </summary>
        public string CollectionReference {
            get {
                XElement x = this.GetElement(XName.Get("CollectionReference", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("CollectionReference", ""), value, "CollectionReference", CollectionReferenceLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Title of the ddex:Collection.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (CollectionId+, CollectionType*, CollectionReference, Title*, Contributor*, CollectionCollectionReferenceList?, IsComplete, DurationOfMusicalContent?, CreationDate?, OriginalReleaseDate?, OriginalLanguage?, CollectionDetailsByTerritory*, CollectionResourceReferenceList?)
        /// </para>
        /// </summary>
        public IList<Title> Title {
            get {
                if ((this.TitleField == null)) {
                    this.TitleField = new XTypedList<Title>(this, LinqToXsdTypeManager.Instance, XName.Get("Title", ""));
                }
                return this.TitleField;
            }
            set {
                if ((value == null)) {
                    this.TitleField = null;
                }
                else {
                    if ((this.TitleField == null)) {
                        this.TitleField = XTypedList<Title>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Title", ""));
                    }
                    else {
                        XTypedServices.SetList<Title>(this.TitleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details a ddex:Contributor to the ddex:Collection.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (CollectionId+, CollectionType*, CollectionReference, Title*, Contributor*, CollectionCollectionReferenceList?, IsComplete, DurationOfMusicalContent?, CreationDate?, OriginalReleaseDate?, OriginalLanguage?, CollectionDetailsByTerritory*, CollectionResourceReferenceList?)
        /// </para>
        /// </summary>
        public IList<ResourceContributor> Contributor {
            get {
                if ((this.ContributorField == null)) {
                    this.ContributorField = new XTypedList<ResourceContributor>(this, LinqToXsdTypeManager.Instance, XName.Get("Contributor", ""));
                }
                return this.ContributorField;
            }
            set {
                if ((value == null)) {
                    this.ContributorField = null;
                }
                else {
                    if ((this.ContributorField == null)) {
                        this.ContributorField = XTypedList<ResourceContributor>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Contributor", ""));
                    }
                    else {
                        XTypedServices.SetList<ResourceContributor>(this.ContributorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a list of ddex:CollectionCollectionReferences for a ddex:Collection (specific to this ddex:Message).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CollectionId+, CollectionType*, CollectionReference, Title*, Contributor*, CollectionCollectionReferenceList?, IsComplete, DurationOfMusicalContent?, CreationDate?, OriginalReleaseDate?, OriginalLanguage?, CollectionDetailsByTerritory*, CollectionResourceReferenceList?)
        /// </para>
        /// </summary>
        public CollectionCollectionReferenceList CollectionCollectionReferenceList {
            get {
                XElement x = this.GetElement(XName.Get("CollectionCollectionReferenceList", ""));
                return ((CollectionCollectionReferenceList)(x));
            }
            set {
                this.SetElement(XName.Get("CollectionCollectionReferenceList", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ddex:Collection is complete (=True) or not (=False). Only one of the Elements ddex:IsComplete here and in the ddexC:CollectionDetailsByTerritory is valid for a given ddexC:Collection.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CollectionId+, CollectionType*, CollectionReference, Title*, Contributor*, CollectionCollectionReferenceList?, IsComplete, DurationOfMusicalContent?, CreationDate?, OriginalReleaseDate?, OriginalLanguage?, CollectionDetailsByTerritory*, CollectionResourceReferenceList?)
        /// </para>
        /// </summary>
        public bool IsComplete {
            get {
                XElement x = this.GetElement(XName.Get("IsComplete", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("IsComplete", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Duration of the musical content (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CollectionId+, CollectionType*, CollectionReference, Title*, Contributor*, CollectionCollectionReferenceList?, IsComplete, DurationOfMusicalContent?, CreationDate?, OriginalReleaseDate?, OriginalLanguage?, CollectionDetailsByTerritory*, CollectionResourceReferenceList?)
        /// </para>
        /// </summary>
        public System.Nullable<System.TimeSpan> DurationOfMusicalContent {
            get {
                XElement x = this.GetElement(XName.Get("DurationOfMusicalContent", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
            set {
                this.SetElement(XName.Get("DurationOfMusicalContent", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ddex:Collection was created.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CollectionId+, CollectionType*, CollectionReference, Title*, Contributor*, CollectionCollectionReferenceList?, IsComplete, DurationOfMusicalContent?, CreationDate?, OriginalReleaseDate?, OriginalLanguage?, CollectionDetailsByTerritory*, CollectionResourceReferenceList?)
        /// </para>
        /// </summary>
        public EventDate CreationDate {
            get {
                XElement x = this.GetElement(XName.Get("CreationDate", ""));
                return ((EventDate)(x));
            }
            set {
                this.SetElement(XName.Get("CreationDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ddex:Collection was or will be first made available for Usage, whether for physical or electronic/online distribution (in ISO 8601:2004 format: YYYY-MM-DD).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CollectionId+, CollectionType*, CollectionReference, Title*, Contributor*, CollectionCollectionReferenceList?, IsComplete, DurationOfMusicalContent?, CreationDate?, OriginalReleaseDate?, OriginalLanguage?, CollectionDetailsByTerritory*, CollectionResourceReferenceList?)
        /// </para>
        /// </summary>
        public EventDate OriginalReleaseDate {
            get {
                XElement x = this.GetElement(XName.Get("OriginalReleaseDate", ""));
                return ((EventDate)(x));
            }
            set {
                this.SetElement(XName.Get("OriginalReleaseDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The orignal ddex:Language of the ddex:Collection (represented by an ISO 639-2 iso639a2:LanguageCode).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CollectionId+, CollectionType*, CollectionReference, Title*, Contributor*, CollectionCollectionReferenceList?, IsComplete, DurationOfMusicalContent?, CreationDate?, OriginalReleaseDate?, OriginalLanguage?, CollectionDetailsByTerritory*, CollectionResourceReferenceList?)
        /// </para>
        /// </summary>
        public string OriginalLanguage {
            get {
                XElement x = this.GetElement(XName.Get("OriginalLanguage", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("OriginalLanguage", ""), value, "OriginalLanguage", global::ddex_net.xml._20120404.iso639a2.LanguageCode.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:Descriptors and other attributes of the ddex:Collection which may vary according to ddex:Territory of release.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (CollectionId+, CollectionType*, CollectionReference, Title*, Contributor*, CollectionCollectionReferenceList?, IsComplete, DurationOfMusicalContent?, CreationDate?, OriginalReleaseDate?, OriginalLanguage?, CollectionDetailsByTerritory*, CollectionResourceReferenceList?)
        /// </para>
        /// </summary>
        public IList<CollectionDetailsByTerritory> CollectionDetailsByTerritory {
            get {
                if ((this.CollectionDetailsByTerritoryField == null)) {
                    this.CollectionDetailsByTerritoryField = new XTypedList<CollectionDetailsByTerritory>(this, LinqToXsdTypeManager.Instance, XName.Get("CollectionDetailsByTerritory", ""));
                }
                return this.CollectionDetailsByTerritoryField;
            }
            set {
                if ((value == null)) {
                    this.CollectionDetailsByTerritoryField = null;
                }
                else {
                    if ((this.CollectionDetailsByTerritoryField == null)) {
                        this.CollectionDetailsByTerritoryField = XTypedList<CollectionDetailsByTerritory>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CollectionDetailsByTerritory", ""));
                    }
                    else {
                        XTypedServices.SetList<CollectionDetailsByTerritory>(this.CollectionDetailsByTerritoryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a list of ddex:CollectionResourceReferences for a ddex:Resource (specific to this ddex:Message).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CollectionId+, CollectionType*, CollectionReference, Title*, Contributor*, CollectionCollectionReferenceList?, IsComplete, DurationOfMusicalContent?, CreationDate?, OriginalReleaseDate?, OriginalLanguage?, CollectionDetailsByTerritory*, CollectionResourceReferenceList?)
        /// </para>
        /// </summary>
        public CollectionResourceReferenceList CollectionResourceReferenceList {
            get {
                XElement x = this.GetElement(XName.Get("CollectionResourceReferenceList", ""));
                return ((CollectionResourceReferenceList)(x));
            }
            set {
                this.SetElement(XName.Get("CollectionResourceReferenceList", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the ddex:Collection as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Collection", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Collection>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("CollectionId", ""), typeof(CollectionId));
            localElementDictionary.Add(XName.Get("CollectionType", ""), typeof(CollectionType));
            localElementDictionary.Add(XName.Get("CollectionReference", ""), typeof(string));
            localElementDictionary.Add(XName.Get("Title", ""), typeof(Title));
            localElementDictionary.Add(XName.Get("Contributor", ""), typeof(ResourceContributor));
            localElementDictionary.Add(XName.Get("CollectionCollectionReferenceList", ""), typeof(CollectionCollectionReferenceList));
            localElementDictionary.Add(XName.Get("IsComplete", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("DurationOfMusicalContent", ""), typeof(System.TimeSpan));
            localElementDictionary.Add(XName.Get("CreationDate", ""), typeof(EventDate));
            localElementDictionary.Add(XName.Get("OriginalReleaseDate", ""), typeof(EventDate));
            localElementDictionary.Add(XName.Get("OriginalLanguage", ""), typeof(string));
            localElementDictionary.Add(XName.Get("CollectionDetailsByTerritory", ""), typeof(CollectionDetailsByTerritory));
            localElementDictionary.Add(XName.Get("CollectionResourceReferenceList", ""), typeof(CollectionResourceReferenceList));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class CollectionReferenceLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "X[\\d\\-_a-zA-Z]+"}, 0, XmlSchemaWhiteSpace.Collapse));
            
            private CollectionReferenceLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing a ddex:CollectionCollectionReference.
    /// </para>
    /// <para>
    /// Regular expression: (SequenceNumber?, CollectionCollectionReference1, StartTime?, Duration?, EndTime?, InclusionDate?)
    /// </para>
    /// </summary>
    public partial class CollectionCollectionReference : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CollectionCollectionReference(XElement xe) { return XTypedServices.ToXTypedElement<CollectionCollectionReference>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CollectionCollectionReference() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("SequenceNumber", "")), new NamedContentModelEntity(XName.Get("CollectionCollectionReference", "")), new NamedContentModelEntity(XName.Get("StartTime", "")), new NamedContentModelEntity(XName.Get("Duration", "")), new NamedContentModelEntity(XName.Get("EndTime", "")), new NamedContentModelEntity(XName.Get("InclusionDate", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a ddex:CollectionCollectionReference.
        /// </para>
        /// <para>
        /// Regular expression: (SequenceNumber?, CollectionCollectionReference1, StartTime?, Duration?, EndTime?, InclusionDate?)
        /// </para>
        /// </summary>
        public CollectionCollectionReference() {
        }
        
        /// <summary>
        /// <para>
        /// The number indicating the order of the ddex:Collection in a group of ddex:Collections within a ddex:Medley, ddex:SoundRecording or other ddex:Collection.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SequenceNumber?, CollectionCollectionReference1, StartTime?, Duration?, EndTime?, InclusionDate?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> SequenceNumber {
            get {
                XElement x = this.GetElement(XName.Get("SequenceNumber", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElement(XName.Get("SequenceNumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Reference for a ddex:Collection (specific to this ddex:Message). This is a ddex:LocalCollectionAnchorReference starting with the letter X. The referenced ddex:Collection has to be of ddex:CollectionType ddex:Series, ddex:Season or ddex:Episode.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SequenceNumber?, CollectionCollectionReference1, StartTime?, Duration?, EndTime?, InclusionDate?)
        /// </para>
        /// </summary>
        public string CollectionCollectionReference1 {
            get {
                XElement x = this.GetElement(XName.Get("CollectionCollectionReference", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("CollectionCollectionReference", ""), value, "CollectionCollectionReference1", CollectionCollectionReference1LocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The start time of the ddex:Creation, measured from the start of the ddex:Resource from which the ddex:CueSheet is referenced (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SequenceNumber?, CollectionCollectionReference1, StartTime?, Duration?, EndTime?, InclusionDate?)
        /// </para>
        /// </summary>
        public System.Nullable<System.TimeSpan> StartTime {
            get {
                XElement x = this.GetElement(XName.Get("StartTime", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
            set {
                this.SetElement(XName.Get("StartTime", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Duration of the use of the ddex:Creation that is referenced in the ddex:CueCreationReference (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SequenceNumber?, CollectionCollectionReference1, StartTime?, Duration?, EndTime?, InclusionDate?)
        /// </para>
        /// </summary>
        public System.Nullable<System.TimeSpan> Duration {
            get {
                XElement x = this.GetElement(XName.Get("Duration", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
            set {
                this.SetElement(XName.Get("Duration", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The end time of the ddex:Creation, measured from the start of the ddex:Resource from which the ddex:CueSheet is referenced (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SequenceNumber?, CollectionCollectionReference1, StartTime?, Duration?, EndTime?, InclusionDate?)
        /// </para>
        /// </summary>
        public System.Nullable<System.TimeSpan> EndTime {
            get {
                XElement x = this.GetElement(XName.Get("EndTime", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
            set {
                this.SetElement(XName.Get("EndTime", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A Date on which the ddex:Collection or ddex:Resource was included in the parent ddex:Collection.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SequenceNumber?, CollectionCollectionReference1, StartTime?, Duration?, EndTime?, InclusionDate?)
        /// </para>
        /// </summary>
        public System.Nullable<System.DateTime> InclusionDate {
            get {
                XElement x = this.GetElement(XName.Get("InclusionDate", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetElement(XName.Get("InclusionDate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CollectionCollectionReference", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CollectionCollectionReference>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("SequenceNumber", ""), typeof(decimal));
            localElementDictionary.Add(XName.Get("CollectionCollectionReference", ""), typeof(string));
            localElementDictionary.Add(XName.Get("StartTime", ""), typeof(System.TimeSpan));
            localElementDictionary.Add(XName.Get("Duration", ""), typeof(System.TimeSpan));
            localElementDictionary.Add(XName.Get("EndTime", ""), typeof(System.TimeSpan));
            localElementDictionary.Add(XName.Get("InclusionDate", ""), typeof(System.DateTime));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class CollectionCollectionReference1LocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "X[\\d\\-_a-zA-Z]+"}, 0, XmlSchemaWhiteSpace.Collapse));
            
            private CollectionCollectionReference1LocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing a list of ddex:CollectionCollectionReferences.
    /// </para>
    /// <para>
    /// Regular expression: (NumberOfCollections?, CollectionCollectionReference+)
    /// </para>
    /// </summary>
    public partial class CollectionCollectionReferenceList : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CollectionCollectionReference> CollectionCollectionReferenceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CollectionCollectionReferenceList(XElement xe) { return XTypedServices.ToXTypedElement<CollectionCollectionReferenceList>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CollectionCollectionReferenceList() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("NumberOfCollections", "")), new NamedContentModelEntity(XName.Get("CollectionCollectionReference", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a list of ddex:CollectionCollectionReferences.
        /// </para>
        /// <para>
        /// Regular expression: (NumberOfCollections?, CollectionCollectionReference+)
        /// </para>
        /// </summary>
        public CollectionCollectionReferenceList() {
        }
        
        /// <summary>
        /// <para>
        /// The number of referenced ddexC:Collections (typically Chapters).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (NumberOfCollections?, CollectionCollectionReference+)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> NumberOfCollections {
            get {
                XElement x = this.GetElement(XName.Get("NumberOfCollections", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElement(XName.Get("NumberOfCollections", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a ddex:CollectionCollectionReference for a ddex:Collection (specific to this ddex:Message).
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (NumberOfCollections?, CollectionCollectionReference+)
        /// </para>
        /// </summary>
        public IList<CollectionCollectionReference> CollectionCollectionReference {
            get {
                if ((this.CollectionCollectionReferenceField == null)) {
                    this.CollectionCollectionReferenceField = new XTypedList<CollectionCollectionReference>(this, LinqToXsdTypeManager.Instance, XName.Get("CollectionCollectionReference", ""));
                }
                return this.CollectionCollectionReferenceField;
            }
            set {
                if ((value == null)) {
                    this.CollectionCollectionReferenceField = null;
                }
                else {
                    if ((this.CollectionCollectionReferenceField == null)) {
                        this.CollectionCollectionReferenceField = XTypedList<CollectionCollectionReference>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CollectionCollectionReference", ""));
                    }
                    else {
                        XTypedServices.SetList<CollectionCollectionReference>(this.CollectionCollectionReferenceField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CollectionCollectionReferenceList", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CollectionCollectionReferenceList>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("NumberOfCollections", ""), typeof(decimal));
            localElementDictionary.Add(XName.Get("CollectionCollectionReference", ""), typeof(CollectionCollectionReference));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of ddex:Descriptors and other attributes of a ddex:Collection which may vary according to ddex:Territory of release. 
    /// </para>
    /// <para>
    /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, Contributor*, IsComplete?)
    /// </para>
    /// </summary>
    public partial class CollectionDetailsByTerritory : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<object> TerritoryCodeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<object> ExcludedTerritoryCodeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Title> TitleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ResourceContributor> ContributorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator CollectionDetailsByTerritory(XElement xe) { return XTypedServices.ToXTypedElement<CollectionDetailsByTerritory>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CollectionDetailsByTerritory() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:Descriptors and other attributes of a ddex:Collection which may vary according to ddex:Territory of release. 
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, Contributor*, IsComplete?)
        /// </para>
        /// </summary>
        public CollectionDetailsByTerritory() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Territory to which the ddex:Collection details apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:ExcludedTerritory shall be present, but not both. 
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, Contributor*, IsComplete?)
        /// </para>
        /// </summary>
        public IList<object> TerritoryCode {
            get {
                if ((this.TerritoryCodeField == null)) {
                    this.TerritoryCodeField = new XSimpleList<object>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, XName.Get("TerritoryCode", ""));
                }
                return this.TerritoryCodeField;
            }
            set {
                if ((value == null)) {
                    this.TerritoryCodeField = null;
                }
                else {
                    if ((this.TerritoryCodeField == null)) {
                        this.TerritoryCodeField = XSimpleList<object>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, value, XName.Get("TerritoryCode", ""));
                    }
                    else {
                        XTypedServices.SetList<System.Object>(this.TerritoryCodeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Territory to which the ddex:Collection details do not apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:Territory shall be present, but not both.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, Contributor*, IsComplete?)
        /// </para>
        /// </summary>
        public IList<object> ExcludedTerritoryCode {
            get {
                if ((this.ExcludedTerritoryCodeField == null)) {
                    this.ExcludedTerritoryCodeField = new XSimpleList<object>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, XName.Get("ExcludedTerritoryCode", ""));
                }
                return this.ExcludedTerritoryCodeField;
            }
            set {
                if ((value == null)) {
                    this.ExcludedTerritoryCodeField = null;
                }
                else {
                    if ((this.ExcludedTerritoryCodeField == null)) {
                        this.ExcludedTerritoryCodeField = XSimpleList<object>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, value, XName.Get("ExcludedTerritoryCode", ""));
                    }
                    else {
                        XTypedServices.SetList<System.Object>(this.ExcludedTerritoryCodeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Title of the ddex:Collection.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, Contributor*, IsComplete?)
        /// </para>
        /// </summary>
        public IList<Title> Title {
            get {
                if ((this.TitleField == null)) {
                    this.TitleField = new XTypedList<Title>(this, LinqToXsdTypeManager.Instance, XName.Get("Title", ""));
                }
                return this.TitleField;
            }
            set {
                if ((value == null)) {
                    this.TitleField = null;
                }
                else {
                    if ((this.TitleField == null)) {
                        this.TitleField = XTypedList<Title>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Title", ""));
                    }
                    else {
                        XTypedServices.SetList<Title>(this.TitleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Contributor to the ddex:Collection.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, Contributor*, IsComplete?)
        /// </para>
        /// </summary>
        public IList<ResourceContributor> Contributor {
            get {
                if ((this.ContributorField == null)) {
                    this.ContributorField = new XTypedList<ResourceContributor>(this, LinqToXsdTypeManager.Instance, XName.Get("Contributor", ""));
                }
                return this.ContributorField;
            }
            set {
                if ((value == null)) {
                    this.ContributorField = null;
                }
                else {
                    if ((this.ContributorField == null)) {
                        this.ContributorField = XTypedList<ResourceContributor>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Contributor", ""));
                    }
                    else {
                        XTypedServices.SetList<ResourceContributor>(this.ContributorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ddex:Collection is complete (=True) or not (=False). Only one of the Elements ddex:IsComplete here and in the Collection is valid for a given Collection.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, Contributor*, IsComplete?)
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsComplete {
            get {
                XElement x = this.GetElement(XName.Get("IsComplete", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("IsComplete", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CollectionDetailsByTerritory", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CollectionDetailsByTerritory>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("TerritoryCode", ""), typeof(object));
            localElementDictionary.Add(XName.Get("ExcludedTerritoryCode", ""), typeof(object));
            localElementDictionary.Add(XName.Get("Title", ""), typeof(Title));
            localElementDictionary.Add(XName.Get("Contributor", ""), typeof(ResourceContributor));
            localElementDictionary.Add(XName.Get("IsComplete", ""), typeof(bool));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a CollectionId.
    /// </para>
    /// <para>
    /// Regular expression: (GRid?, ISRC?, ISAN?, VISAN?, ICPN?, CatalogNumber?, ProprietaryId*)
    /// </para>
    /// </summary>
    public partial class CollectionId : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ProprietaryId> ProprietaryIdField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CollectionId(XElement xe) { return XTypedServices.ToXTypedElement<CollectionId>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CollectionId() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("GRid", "")), new NamedContentModelEntity(XName.Get("ISRC", "")), new NamedContentModelEntity(XName.Get("ISAN", "")), new NamedContentModelEntity(XName.Get("VISAN", "")), new NamedContentModelEntity(XName.Get("ICPN", "")), new NamedContentModelEntity(XName.Get("CatalogNumber", "")), new NamedContentModelEntity(XName.Get("ProprietaryId", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a CollectionId.
        /// </para>
        /// <para>
        /// Regular expression: (GRid?, ISRC?, ISAN?, VISAN?, ICPN?, CatalogNumber?, ProprietaryId*)
        /// </para>
        /// </summary>
        public CollectionId() {
        }
        
        /// <summary>
        /// <para>
        /// The ddex:GRid identifying the ddex:Collection. This is the preferred ddex:Element and is mandatory if a ddex:GRid is available. A ddex:GRid comprises four parts: the xs:string 'A1', followed by five alphanumeric characters, ten alphanumeric characters and and one alphanumeric character.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (GRid?, ISRC?, ISAN?, VISAN?, ICPN?, CatalogNumber?, ProprietaryId*)
        /// </para>
        /// </summary>
        public string GRid {
            get {
                XElement x = this.GetElement(XName.Get("GRid", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("GRid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:ISRC (International Standard ddex:Recording Code as defined in  ISO 3901) for the ddex:Collection. An ddex:ISRC comprises four parts: two characters, followed by three alphanumeric characters, then two digits and five digits. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (GRid?, ISRC?, ISAN?, VISAN?, ICPN?, CatalogNumber?, ProprietaryId*)
        /// </para>
        /// </summary>
        public string ISRC {
            get {
                XElement x = this.GetElement(XName.Get("ISRC", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("ISRC", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:ISAN (International Standard Audiovisual Number as defined in ISO 15706) for the ddex:Collection. An ddex:ISAN comprises four blocks of four hexadecimal charaters followed by a check character.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (GRid?, ISRC?, ISAN?, VISAN?, ICPN?, CatalogNumber?, ProprietaryId*)
        /// </para>
        /// </summary>
        public string ISAN {
            get {
                XElement x = this.GetElement(XName.Get("ISAN", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("ISAN", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The V-ISAN (Version ddex:Identifier of a International Standard Audiovisual Number as defined in ISO 15706-2) for the ddex:Collection. A V-ISAN comprises four blocks of four hexadecimal charaters followed by a check character, followed by two further blocks of four hexadecimal characters, followed by a further check character.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (GRid?, ISRC?, ISAN?, VISAN?, ICPN?, CatalogNumber?, ProprietaryId*)
        /// </para>
        /// </summary>
        public string VISAN {
            get {
                XElement x = this.GetElement(XName.Get("VISAN", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("VISAN", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:ICPN used as proxy for identification of the ddex:Collection. Only applicable when the ddex:Collection is an abstraction of a complete ddex:PhysicalProduct. An ddex:ICPN comprises 12 or 13 digits, depending whether it is an ddex:EAN (13) or a ddex:UPC (12).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (GRid?, ISRC?, ISAN?, VISAN?, ICPN?, CatalogNumber?, ProprietaryId*)
        /// </para>
        /// </summary>
        public ICPN ICPN {
            get {
                XElement x = this.GetElement(XName.Get("ICPN", ""));
                return ((ICPN)(x));
            }
            set {
                this.SetElement(XName.Get("ICPN", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:CatalogNumber of the ddex:Collection.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (GRid?, ISRC?, ISAN?, VISAN?, ICPN?, CatalogNumber?, ProprietaryId*)
        /// </para>
        /// </summary>
        public CatalogNumber CatalogNumber {
            get {
                XElement x = this.GetElement(XName.Get("CatalogNumber", ""));
                return ((CatalogNumber)(x));
            }
            set {
                this.SetElement(XName.Get("CatalogNumber", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:ProprietaryIdentifier of the ddex:Collection (usually one per society involved in the messaging).
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (GRid?, ISRC?, ISAN?, VISAN?, ICPN?, CatalogNumber?, ProprietaryId*)
        /// </para>
        /// </summary>
        public IList<ProprietaryId> ProprietaryId {
            get {
                if ((this.ProprietaryIdField == null)) {
                    this.ProprietaryIdField = new XTypedList<ProprietaryId>(this, LinqToXsdTypeManager.Instance, XName.Get("ProprietaryId", ""));
                }
                return this.ProprietaryIdField;
            }
            set {
                if ((value == null)) {
                    this.ProprietaryIdField = null;
                }
                else {
                    if ((this.ProprietaryIdField == null)) {
                        this.ProprietaryIdField = XTypedList<ProprietaryId>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ProprietaryId", ""));
                    }
                    else {
                        XTypedServices.SetList<ProprietaryId>(this.ProprietaryIdField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether this ddex:Identifier is old and has been replaced by a new one (=True) or not (=False). The ddex:Flag may only be set to True when the new ddex:Identifier is also provided. If the ddex:Flag is not set, this ddex:Identifier is deemed to be the current one.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsReplaced {
            get {
                XAttribute x = this.Attribute(XName.Get("IsReplaced", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("IsReplaced", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CollectionId", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CollectionId>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("GRid", ""), typeof(string));
            localElementDictionary.Add(XName.Get("ISRC", ""), typeof(string));
            localElementDictionary.Add(XName.Get("ISAN", ""), typeof(string));
            localElementDictionary.Add(XName.Get("VISAN", ""), typeof(string));
            localElementDictionary.Add(XName.Get("ICPN", ""), typeof(ICPN));
            localElementDictionary.Add(XName.Get("CatalogNumber", ""), typeof(CatalogNumber));
            localElementDictionary.Add(XName.Get("ProprietaryId", ""), typeof(ProprietaryId));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of one or more ddex:Collections.
    /// </para>
    /// <para>
    /// Regular expression: (Collection+)
    /// </para>
    /// </summary>
    public partial class CollectionList : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Collection> CollectionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CollectionList(XElement xe) { return XTypedServices.ToXTypedElement<CollectionList>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CollectionList() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Collection", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of one or more ddex:Collections.
        /// </para>
        /// <para>
        /// Regular expression: (Collection+)
        /// </para>
        /// </summary>
        public CollectionList() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Collection contained in a ddex:Resource.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Collection+)
        /// </para>
        /// </summary>
        public IList<Collection> Collection {
            get {
                if ((this.CollectionField == null)) {
                    this.CollectionField = new XTypedList<Collection>(this, LinqToXsdTypeManager.Instance, XName.Get("Collection", ""));
                }
                return this.CollectionField;
            }
            set {
                if ((value == null)) {
                    this.CollectionField = null;
                }
                else {
                    if ((this.CollectionField == null)) {
                        this.CollectionField = XTypedList<Collection>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Collection", ""));
                    }
                    else {
                        XTypedServices.SetList<Collection>(this.CollectionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the CollectionList as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CollectionList", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CollectionList>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Collection", ""), typeof(Collection));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing a list of ddex:CollectionResourceReferences.
    /// </para>
    /// <para>
    /// Regular expression: (CollectionResourceReference+)
    /// </para>
    /// </summary>
    public partial class CollectionResourceReferenceList : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> CollectionResourceReferenceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CollectionResourceReferenceList(XElement xe) { return XTypedServices.ToXTypedElement<CollectionResourceReferenceList>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CollectionResourceReferenceList() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("CollectionResourceReference", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a list of ddex:CollectionResourceReferences.
        /// </para>
        /// <para>
        /// Regular expression: (CollectionResourceReference+)
        /// </para>
        /// </summary>
        public CollectionResourceReferenceList() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Reference for a ddex:Resource (specific to this ddex:Message). This is a ddex:LocalResourceAnchorReference starting with the letter A.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (CollectionResourceReference+)
        /// </para>
        /// </summary>
        public IList<string> CollectionResourceReference {
            get {
                if ((this.CollectionResourceReferenceField == null)) {
                    this.CollectionResourceReferenceField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype, XName.Get("CollectionResourceReference", ""));
                }
                return this.CollectionResourceReferenceField;
            }
            set {
                if ((value == null)) {
                    this.CollectionResourceReferenceField = null;
                }
                else {
                    if ((this.CollectionResourceReferenceField == null)) {
                        this.CollectionResourceReferenceField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype, value, XName.Get("CollectionResourceReference", ""));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.CollectionResourceReferenceField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CollectionResourceReferenceList", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CollectionResourceReferenceList>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("CollectionResourceReference", ""), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class CollectionResourceReferenceLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "A[\\d\\-_a-zA-Z]+"}, 0, XmlSchemaWhiteSpace.Collapse));
            
            private CollectionResourceReferenceLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:CollectionType. ddex:Collections referenced from ddex:Video ddex:Resources are of ddex:CollectionType ddex:VideoChapter . ddex:Collections referenced from a ddex:Release composite are of ddex:CollectionType ddex:Series, ddex:Season or ddex:Episode.
    /// </para>
    /// </summary>
    public partial class CollectionType : XTypedElement, IXMetaData {
        
         public static explicit operator CollectionType(XElement xe) { return XTypedServices.ToXTypedElement<CollectionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:CollectionType. ddex:Collections referenced from ddex:Video ddex:Resources are of ddex:CollectionType ddex:VideoChapter . ddex:Collections referenced from a ddex:Release composite are of ddex:CollectionType ddex:Series, ddex:Season or ddex:Episode.
        /// </para>
        /// </summary>
        public CollectionType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.CollectionType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddexC:CollectionType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UserDefined value of the ddexC:CollectionType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserDefinedValue {
            get {
                XAttribute x = this.Attribute(XName.Get("UserDefinedValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserDefinedValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CollectionType", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CollectionType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of an ddex:Comment.
    /// </para>
    /// </summary>
    public partial class Comment : XTypedElement, IXMetaData {
        
         public static explicit operator Comment(XElement xe) { return XTypedServices.ToXTypedElement<Comment>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of an ddex:Comment.
        /// </para>
        /// </summary>
        public Comment() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script of the ddexC:Comment as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Comment", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Comment>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:CommercialModelType.
    /// </para>
    /// </summary>
    public partial class CommercialModelType : XTypedElement, IXMetaData {
        
         public static explicit operator CommercialModelType(XElement xe) { return XTypedServices.ToXTypedElement<CommercialModelType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:CommercialModelType.
        /// </para>
        /// </summary>
        public CommercialModelType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.CommercialModelType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddexC:CommercialModelType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UserDefined value of the ddexC:CommercialModelType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserDefinedValue {
            get {
                XAttribute x = this.Attribute(XName.Get("UserDefinedValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserDefinedValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CommercialModelType", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CommercialModelType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:Period a ddex:DSP may rent something to a ddex:Customer.
    /// </para>
    /// </summary>
    public partial class ConsumerRentalPeriod : XTypedElement, IXMetaData {
        
         public static explicit operator ConsumerRentalPeriod(XElement xe) { return XTypedServices.ToXTypedElement<ConsumerRentalPeriod>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Period a ddex:DSP may rent something to a ddex:Customer.
        /// </para>
        /// </summary>
        public ConsumerRentalPeriod() {
        }
        
        public System.TimeSpan TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Flag indicating whether a ddex:Period can be extended after the end of a ddex:Deal (=True) or not (=False). This is represented in an XML schema as an XML Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsExtensible {
            get {
                XAttribute x = this.Attribute(XName.Get("IsExtensible", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("IsExtensible", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ConsumerRentalPeriod", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ConsumerRentalPeriod>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:ContainerFormat.
    /// </para>
    /// </summary>
    public partial class ContainerFormat : XTypedElement, IXMetaData {
        
         public static explicit operator ContainerFormat(XElement xe) { return XTypedServices.ToXTypedElement<ContainerFormat>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:ContainerFormat.
        /// </para>
        /// </summary>
        public ContainerFormat() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.ContainerFormat.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddex:ContainerFormat. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UserDefined value of the ddex:ContainerFormat. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserDefinedValue {
            get {
                XAttribute x = this.Attribute(XName.Get("UserDefinedValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserDefinedValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ContainerFormat", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ContainerFormat>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of an ddex:CourtesyLine.
    /// </para>
    /// </summary>
    public partial class CourtesyLine : XTypedElement, IXMetaData {
        
         public static explicit operator CourtesyLine(XElement xe) { return XTypedServices.ToXTypedElement<CourtesyLine>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of an ddex:CourtesyLine.
        /// </para>
        /// </summary>
        public CourtesyLine() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script of the ddexC:CourtesyLine as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CourtesyLine", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CourtesyLine>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:CreationIds.
    /// </para>
    /// <para>
    /// Regular expression: (ISWC?, OpusNumber?, ComposerCatalogNumber*, ISRC?, ISMN?, ISAN?, VISAN?, ISBN?, ISSN?, SICI?, CatalogNumber?, ProprietaryId*)
    /// </para>
    /// </summary>
    public partial class CreationId : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> ComposerCatalogNumberField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ProprietaryId> ProprietaryIdField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CreationId(XElement xe) { return XTypedServices.ToXTypedElement<CreationId>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CreationId() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ISWC", "")), new NamedContentModelEntity(XName.Get("OpusNumber", "")), new NamedContentModelEntity(XName.Get("ComposerCatalogNumber", "")), new NamedContentModelEntity(XName.Get("ISRC", "")), new NamedContentModelEntity(XName.Get("ISMN", "")), new NamedContentModelEntity(XName.Get("ISAN", "")), new NamedContentModelEntity(XName.Get("VISAN", "")), new NamedContentModelEntity(XName.Get("ISBN", "")), new NamedContentModelEntity(XName.Get("ISSN", "")), new NamedContentModelEntity(XName.Get("SICI", "")), new NamedContentModelEntity(XName.Get("CatalogNumber", "")), new NamedContentModelEntity(XName.Get("ProprietaryId", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:CreationIds.
        /// </para>
        /// <para>
        /// Regular expression: (ISWC?, OpusNumber?, ComposerCatalogNumber*, ISRC?, ISMN?, ISAN?, VISAN?, ISBN?, ISSN?, SICI?, CatalogNumber?, ProprietaryId*)
        /// </para>
        /// </summary>
        public CreationId() {
        }
        
        /// <summary>
        /// <para>
        /// The ddex:ISWC (International Standard Musical ddex:Work Code defined in ISO 15707) identifying the ddex:MusicalWork. An ddex:ISWC comprises three parts: the letter 'T', followed by nine digits and then one check digit.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ISWC?, OpusNumber?, ComposerCatalogNumber*, ISRC?, ISMN?, ISAN?, VISAN?, ISBN?, ISSN?, SICI?, CatalogNumber?, ProprietaryId*)
        /// </para>
        /// </summary>
        public string ISWC {
            get {
                XElement x = this.GetElement(XName.Get("ISWC", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("ISWC", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddexC:MusicalWorkId identifying the ddex:MusicalWork within the catalog of its ddex:Composer (typically of classical music) as an opus number.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ISWC?, OpusNumber?, ComposerCatalogNumber*, ISRC?, ISMN?, ISAN?, VISAN?, ISBN?, ISSN?, SICI?, CatalogNumber?, ProprietaryId*)
        /// </para>
        /// </summary>
        public string OpusNumber {
            get {
                XElement x = this.GetElement(XName.Get("OpusNumber", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("OpusNumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddexC:MusicalWorkId identifying a ddex:MusicalWork within the catalog of its ddex:Composer (typically of classical music) according to a standardized numbering (e.g. 'K' numbers for Koechel's catalog of Mozart).
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ISWC?, OpusNumber?, ComposerCatalogNumber*, ISRC?, ISMN?, ISAN?, VISAN?, ISBN?, ISSN?, SICI?, CatalogNumber?, ProprietaryId*)
        /// </para>
        /// </summary>
        public IList<string> ComposerCatalogNumber {
            get {
                if ((this.ComposerCatalogNumberField == null)) {
                    this.ComposerCatalogNumberField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("ComposerCatalogNumber", ""));
                }
                return this.ComposerCatalogNumberField;
            }
            set {
                if ((value == null)) {
                    this.ComposerCatalogNumberField = null;
                }
                else {
                    if ((this.ComposerCatalogNumberField == null)) {
                        this.ComposerCatalogNumberField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("ComposerCatalogNumber", ""));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.ComposerCatalogNumberField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:ISRC (International Standard ddex:Recording Code as defined in  ISO 3901) for the ddex:Resource. An ddex:ISRC comprises four parts: two characters, followed by three alphanumeric characters, then two digits and five digits. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ISWC?, OpusNumber?, ComposerCatalogNumber*, ISRC?, ISMN?, ISAN?, VISAN?, ISBN?, ISSN?, SICI?, CatalogNumber?, ProprietaryId*)
        /// </para>
        /// </summary>
        public string ISRC {
            get {
                XElement x = this.GetElement(XName.Get("ISRC", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("ISRC", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:ISMN (International Standard Music Number defined in ISO 10957) for the ddex:Resource. An ddex:ISMN is a thirteen-digit number. Pre-2008 ddex:ISMNs, which had 10 characters and are now deprecated, are converted by replacing the initial letter ('M') with '979-0'.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ISWC?, OpusNumber?, ComposerCatalogNumber*, ISRC?, ISMN?, ISAN?, VISAN?, ISBN?, ISSN?, SICI?, CatalogNumber?, ProprietaryId*)
        /// </para>
        /// </summary>
        public string ISMN {
            get {
                XElement x = this.GetElement(XName.Get("ISMN", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("ISMN", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:ISAN (International Standard Audiovisual Number as defined in ISO 15706) for the ddex:Resource. An ddex:ISAN comprises four blocks of four hexadecimal charaters followed by a check character.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ISWC?, OpusNumber?, ComposerCatalogNumber*, ISRC?, ISMN?, ISAN?, VISAN?, ISBN?, ISSN?, SICI?, CatalogNumber?, ProprietaryId*)
        /// </para>
        /// </summary>
        public string ISAN {
            get {
                XElement x = this.GetElement(XName.Get("ISAN", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("ISAN", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The V-ISAN (Version ddex:Identifier of a International Standard Audiovisual Number as defined in ISO 15706-2) for the ddex:Resource. A V-ISAN comprises four blocks of four hexadecimal charaters followed by a check character, followed by two further blocks of four hexadecimal characters, followed by a further check character.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ISWC?, OpusNumber?, ComposerCatalogNumber*, ISRC?, ISMN?, ISAN?, VISAN?, ISBN?, ISSN?, SICI?, CatalogNumber?, ProprietaryId*)
        /// </para>
        /// </summary>
        public string VISAN {
            get {
                XElement x = this.GetElement(XName.Get("VISAN", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("VISAN", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:ISBN (International Standard Book Number defined in ISO 2108) for the ddex:Resource. An ddex:ISBN is a 13-digit number. Pre-2007, ddex:ISBNs, which had 10-digits and are now deprecated, are converted by adding the prefix '978' and re-calculating the check character.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ISWC?, OpusNumber?, ComposerCatalogNumber*, ISRC?, ISMN?, ISAN?, VISAN?, ISBN?, ISSN?, SICI?, CatalogNumber?, ProprietaryId*)
        /// </para>
        /// </summary>
        public string ISBN {
            get {
                XElement x = this.GetElement(XName.Get("ISBN", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("ISBN", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:ISSN (International Standard Serial Number defined in ISO 3297) for the ddex:Resource. An ddex:ISSN comprises two groups of four digits, separated by a hyphen and a control digit.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ISWC?, OpusNumber?, ComposerCatalogNumber*, ISRC?, ISMN?, ISAN?, VISAN?, ISBN?, ISSN?, SICI?, CatalogNumber?, ProprietaryId*)
        /// </para>
        /// </summary>
        public string ISSN {
            get {
                XElement x = this.GetElement(XName.Get("ISSN", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("ISSN", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:SICI (Serial Item and Contribution ddex:Identifier defined in ANSI/NISO Z39.56-199)  for the ddex:Resource.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ISWC?, OpusNumber?, ComposerCatalogNumber*, ISRC?, ISMN?, ISAN?, VISAN?, ISBN?, ISSN?, SICI?, CatalogNumber?, ProprietaryId*)
        /// </para>
        /// </summary>
        public string SICI {
            get {
                XElement x = this.GetElement(XName.Get("SICI", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("SICI", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:CatalogNumber of the ddex:Resource.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ISWC?, OpusNumber?, ComposerCatalogNumber*, ISRC?, ISMN?, ISAN?, VISAN?, ISBN?, ISSN?, SICI?, CatalogNumber?, ProprietaryId*)
        /// </para>
        /// </summary>
        public CatalogNumber CatalogNumber {
            get {
                XElement x = this.GetElement(XName.Get("CatalogNumber", ""));
                return ((CatalogNumber)(x));
            }
            set {
                this.SetElement(XName.Get("CatalogNumber", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:ProprietaryIdentifier of the ddex:Creation.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ISWC?, OpusNumber?, ComposerCatalogNumber*, ISRC?, ISMN?, ISAN?, VISAN?, ISBN?, ISSN?, SICI?, CatalogNumber?, ProprietaryId*)
        /// </para>
        /// </summary>
        public IList<ProprietaryId> ProprietaryId {
            get {
                if ((this.ProprietaryIdField == null)) {
                    this.ProprietaryIdField = new XTypedList<ProprietaryId>(this, LinqToXsdTypeManager.Instance, XName.Get("ProprietaryId", ""));
                }
                return this.ProprietaryIdField;
            }
            set {
                if ((value == null)) {
                    this.ProprietaryIdField = null;
                }
                else {
                    if ((this.ProprietaryIdField == null)) {
                        this.ProprietaryIdField = XTypedList<ProprietaryId>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ProprietaryId", ""));
                    }
                    else {
                        XTypedServices.SetList<ProprietaryId>(this.ProprietaryIdField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CreationId", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CreationId>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ISWC", ""), typeof(string));
            localElementDictionary.Add(XName.Get("OpusNumber", ""), typeof(string));
            localElementDictionary.Add(XName.Get("ComposerCatalogNumber", ""), typeof(string));
            localElementDictionary.Add(XName.Get("ISRC", ""), typeof(string));
            localElementDictionary.Add(XName.Get("ISMN", ""), typeof(string));
            localElementDictionary.Add(XName.Get("ISAN", ""), typeof(string));
            localElementDictionary.Add(XName.Get("VISAN", ""), typeof(string));
            localElementDictionary.Add(XName.Get("ISBN", ""), typeof(string));
            localElementDictionary.Add(XName.Get("ISSN", ""), typeof(string));
            localElementDictionary.Add(XName.Get("SICI", ""), typeof(string));
            localElementDictionary.Add(XName.Get("CatalogNumber", ""), typeof(CatalogNumber));
            localElementDictionary.Add(XName.Get("ProprietaryId", ""), typeof(ProprietaryId));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:Cue.
    /// </para>
    /// <para>
    /// Regular expression: (CueUseType?, CueThemeType?, CueVocalType?, IsDance?, CueVisualPerceptionType?, CueOrigin?, (CueCreationReference+ | (ReferencedCreationType?, ReferencedCreationId?, ReferencedCreationTitle*, ReferencedCreationContributor*)), HasMusicalContent?, StartTime?, Duration?, EndTime?)
    /// </para>
    /// </summary>
    public partial class Cue : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CueCreationReference> CueCreationReferenceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Title> ReferencedCreationTitleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ResourceContributor> ReferencedCreationContributorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator Cue(XElement xe) { return XTypedServices.ToXTypedElement<Cue>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Cue() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Cue.
        /// </para>
        /// <para>
        /// Regular expression: (CueUseType?, CueThemeType?, CueVocalType?, IsDance?, CueVisualPerceptionType?, CueOrigin?, (CueCreationReference+ | (ReferencedCreationType?, ReferencedCreationId?, ReferencedCreationTitle*, ReferencedCreationContributor*)), HasMusicalContent?, StartTime?, Duration?, EndTime?)
        /// </para>
        /// </summary>
        public Cue() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:UseType of the ddexC:Cue. It can be expected that this element will be contractually mandatory in many communications of cue sheets to music rights societies.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CueUseType?, CueThemeType?, CueVocalType?, IsDance?, CueVisualPerceptionType?, CueOrigin?, (CueCreationReference+ | (ReferencedCreationType?, ReferencedCreationId?, ReferencedCreationTitle*, ReferencedCreationContributor*)), HasMusicalContent?, StartTime?, Duration?, EndTime?)
        /// </para>
        /// </summary>
        public CueUseType CueUseType {
            get {
                XElement x = this.GetElement(XName.Get("CueUseType", ""));
                return ((CueUseType)(x));
            }
            set {
                this.SetElement(XName.Get("CueUseType", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:ThemeType for the ddex:Creation referenced in the ddexC:Cue.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CueUseType?, CueThemeType?, CueVocalType?, IsDance?, CueVisualPerceptionType?, CueOrigin?, (CueCreationReference+ | (ReferencedCreationType?, ReferencedCreationId?, ReferencedCreationTitle*, ReferencedCreationContributor*)), HasMusicalContent?, StartTime?, Duration?, EndTime?)
        /// </para>
        /// </summary>
        public CueThemeType CueThemeType {
            get {
                XElement x = this.GetElement(XName.Get("CueThemeType", ""));
                return ((CueThemeType)(x));
            }
            set {
                this.SetElement(XName.Get("CueThemeType", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:VocalType for the ddex:Creation referenced in the ddexC:Cue.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CueUseType?, CueThemeType?, CueVocalType?, IsDance?, CueVisualPerceptionType?, CueOrigin?, (CueCreationReference+ | (ReferencedCreationType?, ReferencedCreationId?, ReferencedCreationTitle*, ReferencedCreationContributor*)), HasMusicalContent?, StartTime?, Duration?, EndTime?)
        /// </para>
        /// </summary>
        public CueVocalType CueVocalType {
            get {
                XElement x = this.GetElement(XName.Get("CueVocalType", ""));
                return ((CueVocalType)(x));
            }
            set {
                this.SetElement(XName.Get("CueVocalType", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Flag indicating whether a ddex:Creation contains dancing (=True) or not (=False).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CueUseType?, CueThemeType?, CueVocalType?, IsDance?, CueVisualPerceptionType?, CueOrigin?, (CueCreationReference+ | (ReferencedCreationType?, ReferencedCreationId?, ReferencedCreationTitle*, ReferencedCreationContributor*)), HasMusicalContent?, StartTime?, Duration?, EndTime?)
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsDance {
            get {
                XElement x = this.GetElement(XName.Get("IsDance", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("IsDance", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:VisualPerceptionType for the ddex:Creation referenced in the ddexC:Cue.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CueUseType?, CueThemeType?, CueVocalType?, IsDance?, CueVisualPerceptionType?, CueOrigin?, (CueCreationReference+ | (ReferencedCreationType?, ReferencedCreationId?, ReferencedCreationTitle*, ReferencedCreationContributor*)), HasMusicalContent?, StartTime?, Duration?, EndTime?)
        /// </para>
        /// </summary>
        public CueVisualPerceptionType CueVisualPerceptionType {
            get {
                XElement x = this.GetElement(XName.Get("CueVisualPerceptionType", ""));
                return ((CueVisualPerceptionType)(x));
            }
            set {
                this.SetElement(XName.Get("CueVisualPerceptionType", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:CueOrigin for the ddexC:Cue. It can be expected that this element will be contractually mandatory in many communications of cue sheets to music rights societies.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CueUseType?, CueThemeType?, CueVocalType?, IsDance?, CueVisualPerceptionType?, CueOrigin?, (CueCreationReference+ | (ReferencedCreationType?, ReferencedCreationId?, ReferencedCreationTitle*, ReferencedCreationContributor*)), HasMusicalContent?, StartTime?, Duration?, EndTime?)
        /// </para>
        /// </summary>
        public CueOrigin CueOrigin {
            get {
                XElement x = this.GetElement(XName.Get("CueOrigin", ""));
                return ((CueOrigin)(x));
            }
            set {
                this.SetElement(XName.Get("CueOrigin", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a ddex:CueCreationReference for a ddex:Creation (specific to this ddex:Message).
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (CueUseType?, CueThemeType?, CueVocalType?, IsDance?, CueVisualPerceptionType?, CueOrigin?, (CueCreationReference+ | (ReferencedCreationType?, ReferencedCreationId?, ReferencedCreationTitle*, ReferencedCreationContributor*)), HasMusicalContent?, StartTime?, Duration?, EndTime?)
        /// </para>
        /// </summary>
        public IList<CueCreationReference> CueCreationReference {
            get {
                if ((this.CueCreationReferenceField == null)) {
                    this.CueCreationReferenceField = new XTypedList<CueCreationReference>(this, LinqToXsdTypeManager.Instance, XName.Get("CueCreationReference", ""));
                }
                return this.CueCreationReferenceField;
            }
            set {
                if ((value == null)) {
                    this.CueCreationReferenceField = null;
                }
                else {
                    if ((this.CueCreationReferenceField == null)) {
                        this.CueCreationReferenceField = XTypedList<CueCreationReference>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CueCreationReference", ""));
                    }
                    else {
                        XTypedServices.SetList<CueCreationReference>(this.CueCreationReferenceField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Type of the ddex:Creation referenced in the ddexC:Cue.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (CueUseType?, CueThemeType?, CueVocalType?, IsDance?, CueVisualPerceptionType?, CueOrigin?, (CueCreationReference+ | (ReferencedCreationType?, ReferencedCreationId?, ReferencedCreationTitle*, ReferencedCreationContributor*)), HasMusicalContent?, StartTime?, Duration?, EndTime?)
        /// </para>
        /// </summary>
        public string ReferencedCreationType {
            get {
                XElement x = this.GetElement(XName.Get("ReferencedCreationType", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("ReferencedCreationType", ""), value, "ReferencedCreationType", global::ddex_net.xml._20120404.ddex.CreationType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:CreationIds.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (CueUseType?, CueThemeType?, CueVocalType?, IsDance?, CueVisualPerceptionType?, CueOrigin?, (CueCreationReference+ | (ReferencedCreationType?, ReferencedCreationId?, ReferencedCreationTitle*, ReferencedCreationContributor*)), HasMusicalContent?, StartTime?, Duration?, EndTime?)
        /// </para>
        /// </summary>
        public CreationId ReferencedCreationId {
            get {
                XElement x = this.GetElement(XName.Get("ReferencedCreationId", ""));
                return ((CreationId)(x));
            }
            set {
                this.SetElement(XName.Get("ReferencedCreationId", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Title of the ddex:Creation referenced in the ddexC:Cue.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (CueUseType?, CueThemeType?, CueVocalType?, IsDance?, CueVisualPerceptionType?, CueOrigin?, (CueCreationReference+ | (ReferencedCreationType?, ReferencedCreationId?, ReferencedCreationTitle*, ReferencedCreationContributor*)), HasMusicalContent?, StartTime?, Duration?, EndTime?)
        /// </para>
        /// </summary>
        public IList<Title> ReferencedCreationTitle {
            get {
                if ((this.ReferencedCreationTitleField == null)) {
                    this.ReferencedCreationTitleField = new XTypedList<Title>(this, LinqToXsdTypeManager.Instance, XName.Get("ReferencedCreationTitle", ""));
                }
                return this.ReferencedCreationTitleField;
            }
            set {
                if ((value == null)) {
                    this.ReferencedCreationTitleField = null;
                }
                else {
                    if ((this.ReferencedCreationTitleField == null)) {
                        this.ReferencedCreationTitleField = XTypedList<Title>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ReferencedCreationTitle", ""));
                    }
                    else {
                        XTypedServices.SetList<Title>(this.ReferencedCreationTitleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details a ddex:Contributor of the ddex:Creation referenced in the ddexC:Cue.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (CueUseType?, CueThemeType?, CueVocalType?, IsDance?, CueVisualPerceptionType?, CueOrigin?, (CueCreationReference+ | (ReferencedCreationType?, ReferencedCreationId?, ReferencedCreationTitle*, ReferencedCreationContributor*)), HasMusicalContent?, StartTime?, Duration?, EndTime?)
        /// </para>
        /// </summary>
        public IList<ResourceContributor> ReferencedCreationContributor {
            get {
                if ((this.ReferencedCreationContributorField == null)) {
                    this.ReferencedCreationContributorField = new XTypedList<ResourceContributor>(this, LinqToXsdTypeManager.Instance, XName.Get("ReferencedCreationContributor", ""));
                }
                return this.ReferencedCreationContributorField;
            }
            set {
                if ((value == null)) {
                    this.ReferencedCreationContributorField = null;
                }
                else {
                    if ((this.ReferencedCreationContributorField == null)) {
                        this.ReferencedCreationContributorField = XTypedList<ResourceContributor>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ReferencedCreationContributor", ""));
                    }
                    else {
                        XTypedServices.SetList<ResourceContributor>(this.ReferencedCreationContributorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Flag indicating whether whether the ddex:Creation referenced in the ddexC:Cue contains musical content such as a ddex:SoundRecording or a ddex:MusicalWork (=True) or not (=False).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CueUseType?, CueThemeType?, CueVocalType?, IsDance?, CueVisualPerceptionType?, CueOrigin?, (CueCreationReference+ | (ReferencedCreationType?, ReferencedCreationId?, ReferencedCreationTitle*, ReferencedCreationContributor*)), HasMusicalContent?, StartTime?, Duration?, EndTime?)
        /// </para>
        /// </summary>
        public System.Nullable<bool> HasMusicalContent {
            get {
                XElement x = this.GetElement(XName.Get("HasMusicalContent", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("HasMusicalContent", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The start time of the ddex:Creation, measured from the start of the ddex:Resource from which the ddex:CueSheet is referenced (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CueUseType?, CueThemeType?, CueVocalType?, IsDance?, CueVisualPerceptionType?, CueOrigin?, (CueCreationReference+ | (ReferencedCreationType?, ReferencedCreationId?, ReferencedCreationTitle*, ReferencedCreationContributor*)), HasMusicalContent?, StartTime?, Duration?, EndTime?)
        /// </para>
        /// </summary>
        public System.Nullable<System.TimeSpan> StartTime {
            get {
                XElement x = this.GetElement(XName.Get("StartTime", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
            set {
                this.SetElement(XName.Get("StartTime", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Duration of the use of the ddex:Creation that is referenced in the ddex:CueCreationReference (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CueUseType?, CueThemeType?, CueVocalType?, IsDance?, CueVisualPerceptionType?, CueOrigin?, (CueCreationReference+ | (ReferencedCreationType?, ReferencedCreationId?, ReferencedCreationTitle*, ReferencedCreationContributor*)), HasMusicalContent?, StartTime?, Duration?, EndTime?)
        /// </para>
        /// </summary>
        public System.Nullable<System.TimeSpan> Duration {
            get {
                XElement x = this.GetElement(XName.Get("Duration", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
            set {
                this.SetElement(XName.Get("Duration", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The end time of the ddex:Creation, measured from the start of the ddex:Resource from which the ddex:CueSheet is referenced (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CueUseType?, CueThemeType?, CueVocalType?, IsDance?, CueVisualPerceptionType?, CueOrigin?, (CueCreationReference+ | (ReferencedCreationType?, ReferencedCreationId?, ReferencedCreationTitle*, ReferencedCreationContributor*)), HasMusicalContent?, StartTime?, Duration?, EndTime?)
        /// </para>
        /// </summary>
        public System.Nullable<System.TimeSpan> EndTime {
            get {
                XElement x = this.GetElement(XName.Get("EndTime", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
            set {
                this.SetElement(XName.Get("EndTime", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Cue", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Cue>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("CueUseType", ""), typeof(CueUseType));
            localElementDictionary.Add(XName.Get("CueThemeType", ""), typeof(CueThemeType));
            localElementDictionary.Add(XName.Get("CueVocalType", ""), typeof(CueVocalType));
            localElementDictionary.Add(XName.Get("IsDance", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("CueVisualPerceptionType", ""), typeof(CueVisualPerceptionType));
            localElementDictionary.Add(XName.Get("CueOrigin", ""), typeof(CueOrigin));
            localElementDictionary.Add(XName.Get("CueCreationReference", ""), typeof(CueCreationReference));
            localElementDictionary.Add(XName.Get("ReferencedCreationType", ""), typeof(string));
            localElementDictionary.Add(XName.Get("ReferencedCreationId", ""), typeof(CreationId));
            localElementDictionary.Add(XName.Get("ReferencedCreationTitle", ""), typeof(Title));
            localElementDictionary.Add(XName.Get("ReferencedCreationContributor", ""), typeof(ResourceContributor));
            localElementDictionary.Add(XName.Get("HasMusicalContent", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("StartTime", ""), typeof(System.TimeSpan));
            localElementDictionary.Add(XName.Get("Duration", ""), typeof(System.TimeSpan));
            localElementDictionary.Add(XName.Get("EndTime", ""), typeof(System.TimeSpan));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing a ddex:CueCreationReference.
    /// </para>
    /// <para>
    /// Regular expression: ((CueWorkReference | CueResourceReference))
    /// </para>
    /// </summary>
    public partial class CueCreationReference : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator CueCreationReference(XElement xe) { return XTypedServices.ToXTypedElement<CueCreationReference>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CueCreationReference() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a ddex:CueCreationReference.
        /// </para>
        /// <para>
        /// Regular expression: ((CueWorkReference | CueResourceReference))
        /// </para>
        /// </summary>
        public CueCreationReference() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Reference for a ddex:Work (specific to this ddex:Message). This is a ddex:LocalMusicalWorkAnchorReference starting with the letter W.
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((CueWorkReference | CueResourceReference))
        /// </para>
        /// </summary>
        public string CueWorkReference {
            get {
                XElement x = this.GetElement(XName.Get("CueWorkReference", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("CueWorkReference", ""), value, "CueWorkReference", CueWorkReferenceLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Reference for a ddex:Resource (specific to this ddex:Message). This is a ddex:LocalResourceAnchorReference starting with the letter A.
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((CueWorkReference | CueResourceReference))
        /// </para>
        /// </summary>
        public string CueResourceReference {
            get {
                XElement x = this.GetElement(XName.Get("CueResourceReference", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("CueResourceReference", ""), value, "CueResourceReference", CueResourceReferenceLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CueCreationReference", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CueCreationReference>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("CueWorkReference", ""), typeof(string));
            localElementDictionary.Add(XName.Get("CueResourceReference", ""), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        private class CueWorkReferenceLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "W[\\d\\-_a-zA-Z]+"}, 0, XmlSchemaWhiteSpace.Collapse));
            
            private CueWorkReferenceLocalType() {
            }
        }
        
        private class CueResourceReferenceLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "A[\\d\\-_a-zA-Z]+"}, 0, XmlSchemaWhiteSpace.Collapse));
            
            private CueResourceReferenceLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:CueOrigin.
    /// </para>
    /// </summary>
    public partial class CueOrigin : XTypedElement, IXMetaData {
        
         public static explicit operator CueOrigin(XElement xe) { return XTypedServices.ToXTypedElement<CueOrigin>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:CueOrigin.
        /// </para>
        /// </summary>
        public CueOrigin() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.CueOrigin.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddexC:CueOrigin. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UserDefined value of the ddexC:CueOrigin. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserDefinedValue {
            get {
                XAttribute x = this.Attribute(XName.Get("UserDefinedValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserDefinedValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CueOrigin", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CueOrigin>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:CueSheet.
    /// </para>
    /// <para>
    /// Regular expression: (CueSheetId*, CueSheetReference, CueSheetType, Cue+)
    /// </para>
    /// </summary>
    public partial class CueSheet : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ProprietaryId> CueSheetIdField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Cue> CueField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CueSheet(XElement xe) { return XTypedServices.ToXTypedElement<CueSheet>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CueSheet() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("CueSheetId", "")), new NamedContentModelEntity(XName.Get("CueSheetReference", "")), new NamedContentModelEntity(XName.Get("CueSheetType", "")), new NamedContentModelEntity(XName.Get("Cue", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:CueSheet.
        /// </para>
        /// <para>
        /// Regular expression: (CueSheetId*, CueSheetReference, CueSheetType, Cue+)
        /// </para>
        /// </summary>
        public CueSheet() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:CueSheetId of the ddexC:CueSheet.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (CueSheetId*, CueSheetReference, CueSheetType, Cue+)
        /// </para>
        /// </summary>
        public IList<ProprietaryId> CueSheetId {
            get {
                if ((this.CueSheetIdField == null)) {
                    this.CueSheetIdField = new XTypedList<ProprietaryId>(this, LinqToXsdTypeManager.Instance, XName.Get("CueSheetId", ""));
                }
                return this.CueSheetIdField;
            }
            set {
                if ((value == null)) {
                    this.CueSheetIdField = null;
                }
                else {
                    if ((this.CueSheetIdField == null)) {
                        this.CueSheetIdField = XTypedList<ProprietaryId>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CueSheetId", ""));
                    }
                    else {
                        XTypedServices.SetList<ProprietaryId>(this.CueSheetIdField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Identifier (specific to the ddex:Message) of the ddexC:CueSheet within the ddex:Release which contains it. This is a ddex:LocalCueSheetAnchor starting with the letter Q.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CueSheetId*, CueSheetReference, CueSheetType, Cue+)
        /// </para>
        /// </summary>
        public string CueSheetReference {
            get {
                XElement x = this.GetElement(XName.Get("CueSheetReference", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("CueSheetReference", ""), value, "CueSheetReference", CueSheetReferenceLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Type of the ddexC:CueSheet.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CueSheetId*, CueSheetReference, CueSheetType, Cue+)
        /// </para>
        /// </summary>
        public CueSheetType CueSheetType {
            get {
                XElement x = this.GetElement(XName.Get("CueSheetType", ""));
                return ((CueSheetType)(x));
            }
            set {
                this.SetElement(XName.Get("CueSheetType", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Cue.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (CueSheetId*, CueSheetReference, CueSheetType, Cue+)
        /// </para>
        /// </summary>
        public IList<Cue> Cue {
            get {
                if ((this.CueField == null)) {
                    this.CueField = new XTypedList<Cue>(this, LinqToXsdTypeManager.Instance, XName.Get("Cue", ""));
                }
                return this.CueField;
            }
            set {
                if ((value == null)) {
                    this.CueField = null;
                }
                else {
                    if ((this.CueField == null)) {
                        this.CueField = XTypedList<Cue>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Cue", ""));
                    }
                    else {
                        XTypedServices.SetList<Cue>(this.CueField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CueSheet", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CueSheet>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("CueSheetId", ""), typeof(ProprietaryId));
            localElementDictionary.Add(XName.Get("CueSheetReference", ""), typeof(string));
            localElementDictionary.Add(XName.Get("CueSheetType", ""), typeof(CueSheetType));
            localElementDictionary.Add(XName.Get("Cue", ""), typeof(Cue));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class CueSheetReferenceLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "Q[\\d\\-_a-zA-Z]+"}, 0, XmlSchemaWhiteSpace.Collapse));
            
            private CueSheetReferenceLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of one or more ddex:CueSheets.
    /// </para>
    /// <para>
    /// Regular expression: (CueSheet+)
    /// </para>
    /// </summary>
    public partial class CueSheetList : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CueSheet> CueSheetField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CueSheetList(XElement xe) { return XTypedServices.ToXTypedElement<CueSheetList>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CueSheetList() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("CueSheet", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of one or more ddex:CueSheets.
        /// </para>
        /// <para>
        /// Regular expression: (CueSheet+)
        /// </para>
        /// </summary>
        public CueSheetList() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:CueSheet contained in a ddex:Resource.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (CueSheet+)
        /// </para>
        /// </summary>
        public IList<CueSheet> CueSheet {
            get {
                if ((this.CueSheetField == null)) {
                    this.CueSheetField = new XTypedList<CueSheet>(this, LinqToXsdTypeManager.Instance, XName.Get("CueSheet", ""));
                }
                return this.CueSheetField;
            }
            set {
                if ((value == null)) {
                    this.CueSheetField = null;
                }
                else {
                    if ((this.CueSheetField == null)) {
                        this.CueSheetField = XTypedList<CueSheet>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CueSheet", ""));
                    }
                    else {
                        XTypedServices.SetList<CueSheet>(this.CueSheetField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CueSheetList", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CueSheetList>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("CueSheet", ""), typeof(CueSheet));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:CueSheetType.
    /// </para>
    /// </summary>
    public partial class CueSheetType : XTypedElement, IXMetaData {
        
         public static explicit operator CueSheetType(XElement xe) { return XTypedServices.ToXTypedElement<CueSheetType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:CueSheetType.
        /// </para>
        /// </summary>
        public CueSheetType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.CueSheetType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddexC:CueSheetType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UserDefined value of the ddexC:CueSheetType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserDefinedValue {
            get {
                XAttribute x = this.Attribute(XName.Get("UserDefinedValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserDefinedValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CueSheetType", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CueSheetType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:ThemeType for a ddex:Creation referenced in a ddex:Cue.
    /// </para>
    /// </summary>
    public partial class CueThemeType : XTypedElement, IXMetaData {
        
         public static explicit operator CueThemeType(XElement xe) { return XTypedServices.ToXTypedElement<CueThemeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:ThemeType for a ddex:Creation referenced in a ddex:Cue.
        /// </para>
        /// </summary>
        public CueThemeType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.ThemeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddex:ThemeType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UserDefined value of the ddex:ThemeType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserDefinedValue {
            get {
                XAttribute x = this.Attribute(XName.Get("UserDefinedValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserDefinedValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CueThemeType", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CueThemeType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:CueUseType.
    /// </para>
    /// </summary>
    public partial class CueUseType : XTypedElement, IXMetaData {
        
         public static explicit operator CueUseType(XElement xe) { return XTypedServices.ToXTypedElement<CueUseType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:CueUseType.
        /// </para>
        /// </summary>
        public CueUseType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.CueUseType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddexC:CueUseType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UserDefined value of the ddexC:CueUseType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserDefinedValue {
            get {
                XAttribute x = this.Attribute(XName.Get("UserDefinedValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserDefinedValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CueUseType", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CueUseType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:VisualPerceptionType for a ddex:Creation referenced in a ddex:Cue.
    /// </para>
    /// </summary>
    public partial class CueVisualPerceptionType : XTypedElement, IXMetaData {
        
         public static explicit operator CueVisualPerceptionType(XElement xe) { return XTypedServices.ToXTypedElement<CueVisualPerceptionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:VisualPerceptionType for a ddex:Creation referenced in a ddex:Cue.
        /// </para>
        /// </summary>
        public CueVisualPerceptionType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.VisualPerceptionType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddex:VisualPerceptionType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UserDefined value of the ddex:VisualPerceptionType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserDefinedValue {
            get {
                XAttribute x = this.Attribute(XName.Get("UserDefinedValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserDefinedValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CueVisualPerceptionType", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CueVisualPerceptionType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:VocalType for a ddex:Creation referenced in a ddex:Cue.
    /// </para>
    /// </summary>
    public partial class CueVocalType : XTypedElement, IXMetaData {
        
         public static explicit operator CueVocalType(XElement xe) { return XTypedServices.ToXTypedElement<CueVocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:VocalType for a ddex:Creation referenced in a ddex:Cue.
        /// </para>
        /// </summary>
        public CueVocalType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.VocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddex:VocalType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UserDefined value of the ddex:VocalType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserDefinedValue {
            get {
                XAttribute x = this.Attribute(XName.Get("UserDefinedValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserDefinedValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CueVocalType", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CueVocalType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:DSP acting as a ddex:Licensee in a commercial relationship.
    /// </para>
    /// <para>
    /// Regular expression: ((PartyId | (PartyName+, PartyId?)), TradingName?, URL*, TerritoryCode?)
    /// </para>
    /// </summary>
    public partial class DSP : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PartyId> PartyIdField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PartyName> PartyNameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> URLField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator DSP(XElement xe) { return XTypedServices.ToXTypedElement<DSP>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DSP() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:DSP acting as a ddex:Licensee in a commercial relationship.
        /// </para>
        /// <para>
        /// Regular expression: ((PartyId | (PartyName+, PartyId?)), TradingName?, URL*, TerritoryCode?)
        /// </para>
        /// </summary>
        public DSP() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:PartyId for the ddex:Party. If no ddex:Namespace is given, the ddex:Identifier is a ddex:DdexPartyId (DPID). Note that DPIDs are not normally used to identify ddex:Artists, ddex:Producers or other ddex:Creators.
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((PartyId | (PartyName+, PartyId?)), TradingName?, URL*, TerritoryCode?)
        /// </para>
        /// </summary>
        public IList<PartyId> PartyId {
            get {
                if ((this.PartyIdField == null)) {
                    this.PartyIdField = new XTypedList<PartyId>(this, LinqToXsdTypeManager.Instance, XName.Get("PartyId", ""));
                }
                return this.PartyIdField;
            }
            set {
                if ((value == null)) {
                    this.PartyIdField = null;
                }
                else {
                    if ((this.PartyIdField == null)) {
                        this.PartyIdField = XTypedList<PartyId>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("PartyId", ""));
                    }
                    else {
                        XTypedServices.SetList<PartyId>(this.PartyIdField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the PartyName(s).
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((PartyId | (PartyName+, PartyId?)), TradingName?, URL*, TerritoryCode?)
        /// </para>
        /// </summary>
        public IList<PartyName> PartyName {
            get {
                if ((this.PartyNameField == null)) {
                    this.PartyNameField = new XTypedList<PartyName>(this, LinqToXsdTypeManager.Instance, XName.Get("PartyName", ""));
                }
                return this.PartyNameField;
            }
            set {
                if ((value == null)) {
                    this.PartyNameField = null;
                }
                else {
                    if ((this.PartyNameField == null)) {
                        this.PartyNameField = XTypedList<PartyName>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("PartyName", ""));
                    }
                    else {
                        XTypedServices.SetList<PartyName>(this.PartyNameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a ddex:TradingName of the ddexC:DSP.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((PartyId | (PartyName+, PartyId?)), TradingName?, URL*, TerritoryCode?)
        /// </para>
        /// </summary>
        public Name TradingName {
            get {
                XElement x = this.GetElement(XName.Get("TradingName", ""));
                return ((Name)(x));
            }
            set {
                this.SetElement(XName.Get("TradingName", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:URL for the DSP's web site.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((PartyId | (PartyName+, PartyId?)), TradingName?, URL*, TerritoryCode?)
        /// </para>
        /// </summary>
        public IList<string> URL {
            get {
                if ((this.URLField == null)) {
                    this.URLField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("URL", ""));
                }
                return this.URLField;
            }
            set {
                if ((value == null)) {
                    this.URLField = null;
                }
                else {
                    if ((this.URLField == null)) {
                        this.URLField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("URL", ""));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.URLField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Territory from which the ddexC:DSP operates (represented by an ISO 3166-1 iso3166a2:TerritoryCode). This ddex:Territory may differ from the one in which ddex:SalesTransactions occur.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((PartyId | (PartyName+, PartyId?)), TradingName?, URL*, TerritoryCode?)
        /// </para>
        /// </summary>
        public object TerritoryCode {
            get {
                XElement x = this.GetElement(XName.Get("TerritoryCode", ""));
                return XTypedServices.ParseUnionValue(x, global::ddex_net.xml._20120404.ddexC.TerritoryCode.TypeDefinition);
            }
            set {
                this.SetElementWithValidation(XName.Get("TerritoryCode", ""), value, "TerritoryCode", global::ddex_net.xml._20120404.ddexC.TerritoryCode.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the ddexC:DSP as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("DSP", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DSP>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("PartyId", ""), typeof(PartyId));
            localElementDictionary.Add(XName.Get("PartyName", ""), typeof(PartyName));
            localElementDictionary.Add(XName.Get("TradingName", ""), typeof(Name));
            localElementDictionary.Add(XName.Get("URL", ""), typeof(string));
            localElementDictionary.Add(XName.Get("TerritoryCode", ""), typeof(object));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:DealReference.
    /// </para>
    /// </summary>
    public partial class DealReference : XTypedElement, IXMetaData {
        
         public static explicit operator DealReference(XElement xe) { return XTypedServices.ToXTypedElement<DealReference>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:DealReference.
        /// </para>
        /// </summary>
        public DealReference() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script of the ddexC:DealReference as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("DealReference", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DealReference>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:DeductionRate.
    /// </para>
    /// </summary>
    public partial class DeductionRate : XTypedElement, IXMetaData {
        
         public static explicit operator DeductionRate(XElement xe) { return XTypedServices.ToXTypedElement<DeductionRate>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:DeductionRate.
        /// </para>
        /// </summary>
        public DeductionRate() {
        }
        
        public decimal TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Type of ddexC:DeductionRate. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string DeductionRateType {
            get {
                XAttribute x = this.Attribute(XName.Get("DeductionRateType", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DeductionRateType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Description of the ddex:Deduction to be applied to an ddex:Amount to determine the actual ddex:Amount paid. This is a text string with no prescribed allowed values.This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DeductionDescription {
            get {
                XAttribute x = this.Attribute(XName.Get("DeductionDescription", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DeductionDescription", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script of the ddex:DeductionDescription as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("DeductionRate", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DeductionRate>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of an ddex:Description.
    /// </para>
    /// </summary>
    public partial class Description : XTypedElement, IXMetaData {
        
         public static explicit operator Description(XElement xe) { return XTypedServices.ToXTypedElement<Description>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of an ddex:Description.
        /// </para>
        /// </summary>
        public Description() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script of the ddexC:Description as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Description", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Description>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:DistributionChannelDescriptor.
    /// </para>
    /// </summary>
    public partial class DistributionChannelDescriptor : XTypedElement, IXMetaData {
        
         public static explicit operator DistributionChannelDescriptor(XElement xe) { return XTypedServices.ToXTypedElement<DistributionChannelDescriptor>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:DistributionChannelDescriptor.
        /// </para>
        /// </summary>
        public DistributionChannelDescriptor() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script of the ddexC:DistributionChannelDescriptor as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("DistributionChannelDescriptor", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DistributionChannelDescriptor>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:DistributionChannelType.
    /// </para>
    /// </summary>
    public partial class DistributionChannelType : XTypedElement, IXMetaData {
        
         public static explicit operator DistributionChannelType(XElement xe) { return XTypedServices.ToXTypedElement<DistributionChannelType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:DistributionChannelType.
        /// </para>
        /// </summary>
        public DistributionChannelType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.DistributionChannelType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddexC:DistributionChannelType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UserDefined value of the ddexC:DistributionChannelType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserDefinedValue {
            get {
                XAttribute x = this.Attribute(XName.Get("UserDefinedValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserDefinedValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("DistributionChannelType", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DistributionChannelType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:DrmPlatformType.
    /// </para>
    /// </summary>
    public partial class DrmPlatformType : XTypedElement, IXMetaData {
        
         public static explicit operator DrmPlatformType(XElement xe) { return XTypedServices.ToXTypedElement<DrmPlatformType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:DrmPlatformType.
        /// </para>
        /// </summary>
        public DrmPlatformType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.DrmPlatformType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Identifier of the ddex:Version of the ddexC:DrmPlatformType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Version {
            get {
                XAttribute x = this.Attribute(XName.Get("Version", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Version", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddexC:DrmPlatformType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UserDefined value of the ddexC:DrmPlatformType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserDefinedValue {
            get {
                XAttribute x = this.Attribute(XName.Get("UserDefinedValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserDefinedValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("DrmPlatformType", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DrmPlatformType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:Duration specified for a ddex:UseType.
    /// </para>
    /// <para>
    /// Regular expression: (Duration, UseType+, UserInterfaceType*, DistributionChannelType*, CarrierType*)
    /// </para>
    /// </summary>
    public partial class DurationByUseType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UseType> UseTypeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UserInterfaceType> UserInterfaceTypeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DistributionChannelType> DistributionChannelTypeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CarrierType> CarrierTypeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator DurationByUseType(XElement xe) { return XTypedServices.ToXTypedElement<DurationByUseType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DurationByUseType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Duration", "")), new NamedContentModelEntity(XName.Get("UseType", "")), new NamedContentModelEntity(XName.Get("UserInterfaceType", "")), new NamedContentModelEntity(XName.Get("DistributionChannelType", "")), new NamedContentModelEntity(XName.Get("CarrierType", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Duration specified for a ddex:UseType.
        /// </para>
        /// <para>
        /// Regular expression: (Duration, UseType+, UserInterfaceType*, DistributionChannelType*, CarrierType*)
        /// </para>
        /// </summary>
        public DurationByUseType() {
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Duration specified for the ddex:UseType.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Duration, UseType+, UserInterfaceType*, DistributionChannelType*, CarrierType*)
        /// </para>
        /// </summary>
        public System.TimeSpan Duration {
            get {
                XElement x = this.GetElement(XName.Get("Duration", ""));
                return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
            set {
                this.SetElement(XName.Get("Duration", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a nature of a ddex:Service, or a ddex:Release, as used by a ddex:Consumer.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Duration, UseType+, UserInterfaceType*, DistributionChannelType*, CarrierType*)
        /// </para>
        /// </summary>
        public IList<UseType> UseType {
            get {
                if ((this.UseTypeField == null)) {
                    this.UseTypeField = new XTypedList<UseType>(this, LinqToXsdTypeManager.Instance, XName.Get("UseType", ""));
                }
                return this.UseTypeField;
            }
            set {
                if ((value == null)) {
                    this.UseTypeField = null;
                }
                else {
                    if ((this.UseTypeField == null)) {
                        this.UseTypeField = XTypedList<UseType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("UseType", ""));
                    }
                    else {
                        XTypedServices.SetList<UseType>(this.UseTypeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a physical interface by which a ddex:Consumer uses a ddex:Service or ddex:Release.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Duration, UseType+, UserInterfaceType*, DistributionChannelType*, CarrierType*)
        /// </para>
        /// </summary>
        public IList<UserInterfaceType> UserInterfaceType {
            get {
                if ((this.UserInterfaceTypeField == null)) {
                    this.UserInterfaceTypeField = new XTypedList<UserInterfaceType>(this, LinqToXsdTypeManager.Instance, XName.Get("UserInterfaceType", ""));
                }
                return this.UserInterfaceTypeField;
            }
            set {
                if ((value == null)) {
                    this.UserInterfaceTypeField = null;
                }
                else {
                    if ((this.UserInterfaceTypeField == null)) {
                        this.UserInterfaceTypeField = XTypedList<UserInterfaceType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("UserInterfaceType", ""));
                    }
                    else {
                        XTypedServices.SetList<UserInterfaceType>(this.UserInterfaceTypeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a distribution channel used to disseminate a ddex:Service or ddex:Release to a ddex:Consumer.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Duration, UseType+, UserInterfaceType*, DistributionChannelType*, CarrierType*)
        /// </para>
        /// </summary>
        public IList<DistributionChannelType> DistributionChannelType {
            get {
                if ((this.DistributionChannelTypeField == null)) {
                    this.DistributionChannelTypeField = new XTypedList<DistributionChannelType>(this, LinqToXsdTypeManager.Instance, XName.Get("DistributionChannelType", ""));
                }
                return this.DistributionChannelTypeField;
            }
            set {
                if ((value == null)) {
                    this.DistributionChannelTypeField = null;
                }
                else {
                    if ((this.DistributionChannelTypeField == null)) {
                        this.DistributionChannelTypeField = XTypedList<DistributionChannelType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("DistributionChannelType", ""));
                    }
                    else {
                        XTypedServices.SetList<DistributionChannelType>(this.DistributionChannelTypeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Carrier.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Duration, UseType+, UserInterfaceType*, DistributionChannelType*, CarrierType*)
        /// </para>
        /// </summary>
        public IList<CarrierType> CarrierType {
            get {
                if ((this.CarrierTypeField == null)) {
                    this.CarrierTypeField = new XTypedList<CarrierType>(this, LinqToXsdTypeManager.Instance, XName.Get("CarrierType", ""));
                }
                return this.CarrierTypeField;
            }
            set {
                if ((value == null)) {
                    this.CarrierTypeField = null;
                }
                else {
                    if ((this.CarrierTypeField == null)) {
                        this.CarrierTypeField = XTypedList<CarrierType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CarrierType", ""));
                    }
                    else {
                        XTypedServices.SetList<CarrierType>(this.CarrierTypeField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("DurationByUseType", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DurationByUseType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Duration", ""), typeof(System.TimeSpan));
            localElementDictionary.Add(XName.Get("UseType", ""), typeof(UseType));
            localElementDictionary.Add(XName.Get("UserInterfaceType", ""), typeof(UserInterfaceType));
            localElementDictionary.Add(XName.Get("DistributionChannelType", ""), typeof(DistributionChannelType));
            localElementDictionary.Add(XName.Get("CarrierType", ""), typeof(CarrierType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of an Release Notification ddex:Message in a ddex:Batch.
    /// </para>
    /// <para>
    /// Regular expression: (MessageType, MessageId, URL, IncludedReleaseId+, DeliveryType, ProductType, (HashSum | Signature)?)
    /// </para>
    /// </summary>
    public partial class ErnMessageInBatch : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ReleaseId> IncludedReleaseIdField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator ErnMessageInBatch(XElement xe) { return XTypedServices.ToXTypedElement<ErnMessageInBatch>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ErnMessageInBatch() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of an Release Notification ddex:Message in a ddex:Batch.
        /// </para>
        /// <para>
        /// Regular expression: (MessageType, MessageId, URL, IncludedReleaseId+, DeliveryType, ProductType, (HashSum | Signature)?)
        /// </para>
        /// </summary>
        public ErnMessageInBatch() {
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Type of ddex:Message.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (MessageType, MessageId, URL, IncludedReleaseId+, DeliveryType, ProductType, (HashSum | Signature)?)
        /// </para>
        /// </summary>
        public string MessageType {
            get {
                XElement x = this.GetElement(XName.Get("MessageType", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("MessageType", ""), value, "MessageType", global::ddex_net.xml._20120404.ddex.ErnMessageType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// An ddex:Identifier of the ddex:Message.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (MessageType, MessageId, URL, IncludedReleaseId+, DeliveryType, ProductType, (HashSum | Signature)?)
        /// </para>
        /// </summary>
        public string MessageId {
            get {
                XElement x = this.GetElement(XName.Get("MessageId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("MessageId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:URL of the ddex:Message.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (MessageType, MessageId, URL, IncludedReleaseId+, DeliveryType, ProductType, (HashSum | Signature)?)
        /// </para>
        /// </summary>
        public string URL {
            get {
                XElement x = this.GetElement(XName.Get("URL", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("URL", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:ReleaseIds. If available, a ddex:GRid should always be used.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (MessageType, MessageId, URL, IncludedReleaseId+, DeliveryType, ProductType, (HashSum | Signature)?)
        /// </para>
        /// </summary>
        public IList<ReleaseId> IncludedReleaseId {
            get {
                if ((this.IncludedReleaseIdField == null)) {
                    this.IncludedReleaseIdField = new XTypedList<ReleaseId>(this, LinqToXsdTypeManager.Instance, XName.Get("IncludedReleaseId", ""));
                }
                return this.IncludedReleaseIdField;
            }
            set {
                if ((value == null)) {
                    this.IncludedReleaseIdField = null;
                }
                else {
                    if ((this.IncludedReleaseIdField == null)) {
                        this.IncludedReleaseIdField = XTypedList<ReleaseId>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("IncludedReleaseId", ""));
                    }
                    else {
                        XTypedServices.SetList<ReleaseId>(this.IncludedReleaseIdField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:Type of action that the ddex:MessageSender applies to the ddex:Message.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (MessageType, MessageId, URL, IncludedReleaseId+, DeliveryType, ProductType, (HashSum | Signature)?)
        /// </para>
        /// </summary>
        public MessageActionType DeliveryType {
            get {
                XElement x = this.GetElement(XName.Get("DeliveryType", ""));
                return ((MessageActionType)(x));
            }
            set {
                this.SetElement(XName.Get("DeliveryType", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:Type of a ddex:Product defining which kinds of ddex:Products are within the delivered batch. Each batch may only contain one type of ddex:Products.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (MessageType, MessageId, URL, IncludedReleaseId+, DeliveryType, ProductType, (HashSum | Signature)?)
        /// </para>
        /// </summary>
        public ProductType ProductType {
            get {
                XElement x = this.GetElement(XName.Get("ProductType", ""));
                return ((ProductType)(x));
            }
            set {
                this.SetElement(XName.Get("ProductType", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a ddex:HashSum of the ddexC:File and information about the algorithm with which it has been generated.
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (MessageType, MessageId, URL, IncludedReleaseId+, DeliveryType, ProductType, (HashSum | Signature)?)
        /// </para>
        /// </summary>
        public HashSum HashSum {
            get {
                XElement x = this.GetElement(XName.Get("HashSum", ""));
                return ((HashSum)(x));
            }
            set {
                this.SetElement(XName.Get("HashSum", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A digital signature in accordance with DDEX-DSIG.
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (MessageType, MessageId, URL, IncludedReleaseId+, DeliveryType, ProductType, (HashSum | Signature)?)
        /// </para>
        /// </summary>
        public string Signature {
            get {
                XElement x = this.GetElement(XName.Get("Signature", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Signature", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ErnMessageInBatch", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ErnMessageInBatch>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("MessageType", ""), typeof(string));
            localElementDictionary.Add(XName.Get("MessageId", ""), typeof(string));
            localElementDictionary.Add(XName.Get("URL", ""), typeof(string));
            localElementDictionary.Add(XName.Get("IncludedReleaseId", ""), typeof(ReleaseId));
            localElementDictionary.Add(XName.Get("DeliveryType", ""), typeof(MessageActionType));
            localElementDictionary.Add(XName.Get("ProductType", ""), typeof(ProductType));
            localElementDictionary.Add(XName.Get("HashSum", ""), typeof(HashSum));
            localElementDictionary.Add(XName.Get("Signature", ""), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of the Date and ddex:Place of an ddex:Event.
    /// </para>
    /// </summary>
    public partial class EventDate : XTypedElement, IXMetaData {
        
         public static explicit operator EventDate(XElement xe) { return XTypedServices.ToXTypedElement<EventDate>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the Date and ddex:Place of an ddex:Event.
        /// </para>
        /// </summary>
        public EventDate() {
        }
        
        public System.DateTime TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the reported Date is approximate (=True) or exact (=False). This is represented in an XML schema as an XML ddex:Attribute. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsApproximate {
            get {
                XAttribute x = this.Attribute(XName.Get("IsApproximate", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("IsApproximate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ddex:Event being described occurred sometime before the reported Date (=True) or not (=False). This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsBefore {
            get {
                XAttribute x = this.Attribute(XName.Get("IsBefore", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("IsBefore", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ddex:Event being described occurred sometime after the reported Date (=True) or not (=False). This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsAfter {
            get {
                XAttribute x = this.Attribute(XName.Get("IsAfter", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("IsAfter", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Territory in which the ddex:Event occurred (represented by an ISO 3166-1 iso3166a2:TerritoryCode). This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object TerritoryCode {
            get {
                XAttribute x = this.Attribute(XName.Get("TerritoryCode", ""));
                return XTypedServices.ParseUnionValue(x, global::ddex_net.xml._20120404.ddexC.TerritoryCode.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "TerritoryCode", this, XName.Get("TerritoryCode", ""), global::ddex_net.xml._20120404.ddexC.TerritoryCode.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Description of the location in which the ddex:Event occurred. It offers the opportunity to describe a place more precisely than using the iso3166a2:TerritoryCode. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LocationDescription {
            get {
                XAttribute x = this.Attribute(XName.Get("LocationDescription", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LocationDescription", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:LocationDescription as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("EventDate", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<EventDate>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of the ddex:DateTime and ddex:Place of an ddex:Event.
    /// </para>
    /// </summary>
    public partial class EventDateTime : XTypedElement, IXMetaData {
        
         public static explicit operator EventDateTime(XElement xe) { return XTypedServices.ToXTypedElement<EventDateTime>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:DateTime and ddex:Place of an ddex:Event.
        /// </para>
        /// </summary>
        public EventDateTime() {
        }
        
        public System.DateTime TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the reported ddex:DateTime is approximate (=True) or exact (=False). This is represented in an XML schema as an XML ddex:Attribute. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsApproximate {
            get {
                XAttribute x = this.Attribute(XName.Get("IsApproximate", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("IsApproximate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ddex:Event being described occurred sometime before the reported ddex:DateTime (=True) or not (=False). This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsBefore {
            get {
                XAttribute x = this.Attribute(XName.Get("IsBefore", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("IsBefore", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ddex:Event being described occurred sometime after the reported ddex:DateTime (=True) or not (=False). This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsAfter {
            get {
                XAttribute x = this.Attribute(XName.Get("IsAfter", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("IsAfter", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Territory in which the ddex:Event occurred (represented by an ISO 3166-1 iso3166a2:TerritoryCode). This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object TerritoryCode {
            get {
                XAttribute x = this.Attribute(XName.Get("TerritoryCode", ""));
                return XTypedServices.ParseUnionValue(x, global::ddex_net.xml._20120404.ddexC.TerritoryCode.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "TerritoryCode", this, XName.Get("TerritoryCode", ""), global::ddex_net.xml._20120404.ddexC.TerritoryCode.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Description of the location in which the ddex:Event occurred. It offers the opportunity to describe a place more precisely than using the iso3166a2:TerritoryCode. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LocationDescription {
            get {
                XAttribute x = this.Attribute(XName.Get("LocationDescription", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LocationDescription", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:LocationDescription as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("EventDateTime", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<EventDateTime>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing an ddex:Extent and a ddex:UnitOfMeasure.
    /// </para>
    /// </summary>
    public partial class Extent : XTypedElement, IXMetaData {
        
         public static explicit operator Extent(XElement xe) { return XTypedServices.ToXTypedElement<Extent>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing an ddex:Extent and a ddex:UnitOfMeasure.
        /// </para>
        /// </summary>
        public Extent() {
        }
        
        public decimal TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:UnitOfMeasure of the ddexC:Extent. This is represented in an XML schema as an XML ddex:Attribute. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UnitOfMeasure {
            get {
                XAttribute x = this.Attribute(XName.Get("UnitOfMeasure", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UnitOfMeasure", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Extent", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Extent>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of an ddex:ExternalLocationDescriptor.
    /// </para>
    /// </summary>
    public partial class ExternalLocationDescriptor : XTypedElement, IXMetaData {
        
         public static explicit operator ExternalLocationDescriptor(XElement xe) { return XTypedServices.ToXTypedElement<ExternalLocationDescriptor>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of an ddex:ExternalLocationDescriptor.
        /// </para>
        /// </summary>
        public ExternalLocationDescriptor() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Type of the ddex:Descriptor according to how it is defined syntactically. For example, using a namespace (typically using a DPID) for a proprietary syntax or 'URI' for a uniform resource identifier as defined in RFC 1630). This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DescriptorSyntax {
            get {
                XAttribute x = this.Attribute(XName.Get("DescriptorSyntax", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DescriptorSyntax", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ExternalLocationDescriptor", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ExternalLocationDescriptor>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of promotional or other material in digital form related to a ddex:Release.
    /// </para>
    /// <para>
    /// Regular expression: (URL+, ValidityPeriod?, ExternalLink?, ExternallyLinkedResourceType*, FileFormat?)
    /// </para>
    /// </summary>
    public partial class ExternalResourceLink : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> URLField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ExternallyLinkedResourceType> ExternallyLinkedResourceTypeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ExternalResourceLink(XElement xe) { return XTypedServices.ToXTypedElement<ExternalResourceLink>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ExternalResourceLink() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("URL", "")), new NamedContentModelEntity(XName.Get("ValidityPeriod", "")), new NamedContentModelEntity(XName.Get("ExternalLink", "")), new NamedContentModelEntity(XName.Get("ExternallyLinkedResourceType", "")), new NamedContentModelEntity(XName.Get("FileFormat", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of promotional or other material in digital form related to a ddex:Release.
        /// </para>
        /// <para>
        /// Regular expression: (URL+, ValidityPeriod?, ExternalLink?, ExternallyLinkedResourceType*, FileFormat?)
        /// </para>
        /// </summary>
        public ExternalResourceLink() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:URL of the linked external ddex:Resource.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (URL+, ValidityPeriod?, ExternalLink?, ExternallyLinkedResourceType*, FileFormat?)
        /// </para>
        /// </summary>
        public IList<string> URL {
            get {
                if ((this.URLField == null)) {
                    this.URLField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("URL", ""));
                }
                return this.URLField;
            }
            set {
                if ((value == null)) {
                    this.URLField = null;
                }
                else {
                    if ((this.URLField == null)) {
                        this.URLField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("URL", ""));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.URLField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details about the ddex:Period of ddex:Time during which the ddexC:ExternalResourceLink is active.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URL+, ValidityPeriod?, ExternalLink?, ExternallyLinkedResourceType*, FileFormat?)
        /// </para>
        /// </summary>
        public Period ValidityPeriod {
            get {
                XElement x = this.GetElement(XName.Get("ValidityPeriod", ""));
                return ((Period)(x));
            }
            set {
                this.SetElement(XName.Get("ValidityPeriod", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Identifier which provides a communication link to the related external ddex:Resource.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URL+, ValidityPeriod?, ExternalLink?, ExternallyLinkedResourceType*, FileFormat?)
        /// </para>
        /// </summary>
        public string ExternalLink {
            get {
                XElement x = this.GetElement(XName.Get("ExternalLink", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("ExternalLink", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:Type of a ddex:Resource pointed to by the ddexC:ExternalResourceLink.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (URL+, ValidityPeriod?, ExternalLink?, ExternallyLinkedResourceType*, FileFormat?)
        /// </para>
        /// </summary>
        public IList<ExternallyLinkedResourceType> ExternallyLinkedResourceType {
            get {
                if ((this.ExternallyLinkedResourceTypeField == null)) {
                    this.ExternallyLinkedResourceTypeField = new XTypedList<ExternallyLinkedResourceType>(this, LinqToXsdTypeManager.Instance, XName.Get("ExternallyLinkedResourceType", ""));
                }
                return this.ExternallyLinkedResourceTypeField;
            }
            set {
                if ((value == null)) {
                    this.ExternallyLinkedResourceTypeField = null;
                }
                else {
                    if ((this.ExternallyLinkedResourceTypeField == null)) {
                        this.ExternallyLinkedResourceTypeField = XTypedList<ExternallyLinkedResourceType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ExternallyLinkedResourceType", ""));
                    }
                    else {
                        XTypedServices.SetList<ExternallyLinkedResourceType>(this.ExternallyLinkedResourceTypeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:FileFormat of the external ddex:Resource.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URL+, ValidityPeriod?, ExternalLink?, ExternallyLinkedResourceType*, FileFormat?)
        /// </para>
        /// </summary>
        public string FileFormat {
            get {
                XElement x = this.GetElement(XName.Get("FileFormat", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("FileFormat", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ExternalResourceLink", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ExternalResourceLink>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("URL", ""), typeof(string));
            localElementDictionary.Add(XName.Get("ValidityPeriod", ""), typeof(Period));
            localElementDictionary.Add(XName.Get("ExternalLink", ""), typeof(string));
            localElementDictionary.Add(XName.Get("ExternallyLinkedResourceType", ""), typeof(ExternallyLinkedResourceType));
            localElementDictionary.Add(XName.Get("FileFormat", ""), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of an ddex:ExternallyLinkedResourceType.
    /// </para>
    /// </summary>
    public partial class ExternallyLinkedResourceType : XTypedElement, IXMetaData {
        
         public static explicit operator ExternallyLinkedResourceType(XElement xe) { return XTypedServices.ToXTypedElement<ExternallyLinkedResourceType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of an ddex:ExternallyLinkedResourceType.
        /// </para>
        /// </summary>
        public ExternallyLinkedResourceType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.ExternallyLinkedResourceType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddexC:ExternallyLinkedResourceType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UserDefined value of the ddexC:ExternallyLinkedResourceType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserDefinedValue {
            get {
                XAttribute x = this.Attribute(XName.Get("UserDefinedValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserDefinedValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ExternallyLinkedResourceType", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ExternallyLinkedResourceType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:File.
    /// </para>
    /// <para>
    /// Regular expression: (((FileName, FilePath?)|URL), HashSum?)
    /// </para>
    /// </summary>
    public partial class File : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator File(XElement xe) { return XTypedServices.ToXTypedElement<File>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static File() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:File.
        /// </para>
        /// <para>
        /// Regular expression: (((FileName, FilePath?)|URL), HashSum?)
        /// </para>
        /// </summary>
        public File() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Name of the ddexC:File.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (((FileName, FilePath?)|URL), HashSum?)
        /// </para>
        /// </summary>
        public string FileName {
            get {
                XElement x = this.GetElement(XName.Get("FileName", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("FileName", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A location of the ddexC:File.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (((FileName, FilePath?)|URL), HashSum?)
        /// </para>
        /// </summary>
        public string FilePath {
            get {
                XElement x = this.GetElement(XName.Get("FilePath", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("FilePath", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:URL of the ddex:File.
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (((FileName, FilePath?)|URL), HashSum?)
        /// </para>
        /// </summary>
        public string URL {
            get {
                XElement x = this.GetElement(XName.Get("URL", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("URL", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a ddex:HashSum of the ddexC:File and information about the algorithm with which it has been generated.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (((FileName, FilePath?)|URL), HashSum?)
        /// </para>
        /// </summary>
        public HashSum HashSum {
            get {
                XElement x = this.GetElement(XName.Get("HashSum", ""));
                return ((HashSum)(x));
            }
            set {
                this.SetElement(XName.Get("HashSum", ""), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("File", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<File>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("FileName", ""), typeof(string));
            localElementDictionary.Add(XName.Get("FilePath", ""), typeof(string));
            localElementDictionary.Add(XName.Get("URL", ""), typeof(string));
            localElementDictionary.Add(XName.Get("HashSum", ""), typeof(HashSum));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:Fingerprint and its governing algorithm.
    /// </para>
    /// <para>
    /// Regular expression: (Fingerprint1, FingerprintAlgorithmType, FingerprintAlgorithmVersion?, FingerprintAlgorithmParameter?)
    /// </para>
    /// </summary>
    public partial class Fingerprint : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Fingerprint(XElement xe) { return XTypedServices.ToXTypedElement<Fingerprint>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Fingerprint() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Fingerprint", "")), new NamedContentModelEntity(XName.Get("FingerprintAlgorithmType", "")), new NamedContentModelEntity(XName.Get("FingerprintAlgorithmVersion", "")), new NamedContentModelEntity(XName.Get("FingerprintAlgorithmParameter", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Fingerprint and its governing algorithm.
        /// </para>
        /// <para>
        /// Regular expression: (Fingerprint1, FingerprintAlgorithmType, FingerprintAlgorithmVersion?, FingerprintAlgorithmParameter?)
        /// </para>
        /// </summary>
        public Fingerprint() {
        }
        
        /// <summary>
        /// <para>
        /// The value of the ddexC:Fingerprint.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Fingerprint1, FingerprintAlgorithmType, FingerprintAlgorithmVersion?, FingerprintAlgorithmParameter?)
        /// </para>
        /// </summary>
        public string Fingerprint1 {
            get {
                XElement x = this.GetElement(XName.Get("Fingerprint", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Fingerprint", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:Type of FingerprintAlgorithm governing the ddexC:Fingerprint.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Fingerprint1, FingerprintAlgorithmType, FingerprintAlgorithmVersion?, FingerprintAlgorithmParameter?)
        /// </para>
        /// </summary>
        public FingerprintAlgorithmType FingerprintAlgorithmType {
            get {
                XElement x = this.GetElement(XName.Get("FingerprintAlgorithmType", ""));
                return ((FingerprintAlgorithmType)(x));
            }
            set {
                this.SetElement(XName.Get("FingerprintAlgorithmType", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Identifier of the ddex:Version of the FingerprintAlgorithm.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Fingerprint1, FingerprintAlgorithmType, FingerprintAlgorithmVersion?, FingerprintAlgorithmParameter?)
        /// </para>
        /// </summary>
        public string FingerprintAlgorithmVersion {
            get {
                XElement x = this.GetElement(XName.Get("FingerprintAlgorithmVersion", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("FingerprintAlgorithmVersion", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A parameter of the FingerprintAlgorithm.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Fingerprint1, FingerprintAlgorithmType, FingerprintAlgorithmVersion?, FingerprintAlgorithmParameter?)
        /// </para>
        /// </summary>
        public string FingerprintAlgorithmParameter {
            get {
                XElement x = this.GetElement(XName.Get("FingerprintAlgorithmParameter", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("FingerprintAlgorithmParameter", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Fingerprint", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Fingerprint>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Fingerprint", ""), typeof(string));
            localElementDictionary.Add(XName.Get("FingerprintAlgorithmType", ""), typeof(FingerprintAlgorithmType));
            localElementDictionary.Add(XName.Get("FingerprintAlgorithmVersion", ""), typeof(string));
            localElementDictionary.Add(XName.Get("FingerprintAlgorithmParameter", ""), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:FingerprintAlgorithmType.
    /// </para>
    /// </summary>
    public partial class FingerprintAlgorithmType : XTypedElement, IXMetaData {
        
         public static explicit operator FingerprintAlgorithmType(XElement xe) { return XTypedServices.ToXTypedElement<FingerprintAlgorithmType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:FingerprintAlgorithmType.
        /// </para>
        /// </summary>
        public FingerprintAlgorithmType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.FingerprintAlgorithmType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddexC:FingerprintAlgorithmType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UserDefined value of the ddexC:FingerprintAlgorithmType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserDefinedValue {
            get {
                XAttribute x = this.Attribute(XName.Get("UserDefinedValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserDefinedValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("FingerprintAlgorithmType", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FingerprintAlgorithmType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing a ddex:FrameRate and a ddex:UnitOfMeasure.
    /// </para>
    /// </summary>
    public partial class FrameRate : XTypedElement, IXMetaData {
        
         public static explicit operator FrameRate(XElement xe) { return XTypedServices.ToXTypedElement<FrameRate>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a ddex:FrameRate and a ddex:UnitOfMeasure.
        /// </para>
        /// </summary>
        public FrameRate() {
        }
        
        public decimal TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:UnitOfMeasure of the ddexC:FrameRate. This is represented in an XML schema as an XML ddex:Attribute. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UnitOfMeasure {
            get {
                XAttribute x = this.Attribute(XName.Get("UnitOfMeasure", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UnitOfMeasure", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("FrameRate", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FrameRate>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:FulfillmentDate.
    /// </para>
    /// <para>
    /// Regular expression: (FulfillmentDate1, ResourceReleaseReference*)
    /// </para>
    /// </summary>
    public partial class FulfillmentDate : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> ResourceReleaseReferenceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator FulfillmentDate(XElement xe) { return XTypedServices.ToXTypedElement<FulfillmentDate>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FulfillmentDate() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("FulfillmentDate", "")), new NamedContentModelEntity(XName.Get("ResourceReleaseReference", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:FulfillmentDate.
        /// </para>
        /// <para>
        /// Regular expression: (FulfillmentDate1, ResourceReleaseReference*)
        /// </para>
        /// </summary>
        public FulfillmentDate() {
        }
        
        /// <summary>
        /// <para>
        /// A Date after which an end user can receive the ddex:Resource (in ISO 8601:2004 format: YYYY-MM-DD). If no ddexC:FulfillmentDate is provided the ddexC:FulfillmentDate is the ddex:StartDate of the respective ddex:Deal. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (FulfillmentDate1, ResourceReleaseReference*)
        /// </para>
        /// </summary>
        public System.DateTime FulfillmentDate1 {
            get {
                XElement x = this.GetElement(XName.Get("FulfillmentDate", ""));
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElement(XName.Get("FulfillmentDate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Identifier (specific to the ddex:Message) of a ddex:Release for a ddex:Resource. This is a ddex:LocalReleaseAnchorReference starting with the letter R.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (FulfillmentDate1, ResourceReleaseReference*)
        /// </para>
        /// </summary>
        public IList<string> ResourceReleaseReference {
            get {
                if ((this.ResourceReleaseReferenceField == null)) {
                    this.ResourceReleaseReferenceField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype, XName.Get("ResourceReleaseReference", ""));
                }
                return this.ResourceReleaseReferenceField;
            }
            set {
                if ((value == null)) {
                    this.ResourceReleaseReferenceField = null;
                }
                else {
                    if ((this.ResourceReleaseReferenceField == null)) {
                        this.ResourceReleaseReferenceField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype, value, XName.Get("ResourceReleaseReference", ""));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.ResourceReleaseReferenceField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("FulfillmentDate", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FulfillmentDate>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("FulfillmentDate", ""), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("ResourceReleaseReference", ""), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class ResourceReleaseReferenceLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "R[\\d\\-_a-zA-Z]+"}, 0, XmlSchemaWhiteSpace.Collapse));
            
            private ResourceReleaseReferenceLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:Genre.
    /// </para>
    /// <para>
    /// Regular expression: (GenreText, SubGenre?)
    /// </para>
    /// </summary>
    public partial class Genre : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Genre(XElement xe) { return XTypedServices.ToXTypedElement<Genre>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Genre() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("GenreText", "")), new NamedContentModelEntity(XName.Get("SubGenre", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Genre.
        /// </para>
        /// <para>
        /// Regular expression: (GenreText, SubGenre?)
        /// </para>
        /// </summary>
        public Genre() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a ddex:Description of a genre or style (such as Musical, literary or audio-visual) with which a ddex:Creation is associated.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (GenreText, SubGenre?)
        /// </para>
        /// </summary>
        public Description GenreText {
            get {
                XElement x = this.GetElement(XName.Get("GenreText", ""));
                return ((Description)(x));
            }
            set {
                this.SetElement(XName.Get("GenreText", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a ddex:Description of a secondary genre or style with which a ddex:Creation is associated.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (GenreText, SubGenre?)
        /// </para>
        /// </summary>
        public Description SubGenre {
            get {
                XElement x = this.GetElement(XName.Get("SubGenre", ""));
                return ((Description)(x));
            }
            set {
                this.SetElement(XName.Get("SubGenre", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the ddexC:Genre as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Genre", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Genre>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("GenreText", ""), typeof(Description));
            localElementDictionary.Add(XName.Get("SubGenre", ""), typeof(Description));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:GoverningAgreementType.
    /// </para>
    /// </summary>
    public partial class GoverningAgreementType : XTypedElement, IXMetaData {
        
         public static explicit operator GoverningAgreementType(XElement xe) { return XTypedServices.ToXTypedElement<GoverningAgreementType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:GoverningAgreementType.
        /// </para>
        /// </summary>
        public GoverningAgreementType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.GoverningAgreementType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddexC:GoverningAgreementType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UserDefined value of the ddexC:GoverningAgreementType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserDefinedValue {
            get {
                XAttribute x = this.Attribute(XName.Get("UserDefinedValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserDefinedValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("GoverningAgreementType", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GoverningAgreementType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:GuaranteedAmount.
    /// </para>
    /// </summary>
    public partial class GuaranteedAmount : XTypedElement, IXMetaData {
        
         public static explicit operator GuaranteedAmount(XElement xe) { return XTypedServices.ToXTypedElement<GuaranteedAmount>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:GuaranteedAmount.
        /// </para>
        /// </summary>
        public GuaranteedAmount() {
        }
        
        public decimal TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Currency of the ddexC:GuaranteedAmount (represented by an ISO 4217 iso4217a:CurrencyCode). This is represented in an XML schema as an XML ddex:Attribute. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public object CurrencyCode {
            get {
                XAttribute x = this.Attribute(XName.Get("CurrencyCode", ""));
                return XTypedServices.ParseUnionValue(x, global::ddex_net.xml._20120404.ddexC.CurrencyCode.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "CurrencyCode", this, XName.Get("CurrencyCode", ""), global::ddex_net.xml._20120404.ddexC.CurrencyCode.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// A unit to which the ddexC:GuaranteedAmount refers (per ddex:Use or for the whole ddex:License).
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string ReferenceUnit {
            get {
                XAttribute x = this.Attribute(XName.Get("ReferenceUnit", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ReferenceUnit", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("GuaranteedAmount", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GuaranteedAmount>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:HashSum and its governing algorithm.
    /// </para>
    /// <para>
    /// Regular expression: (HashSum1, HashSumAlgorithmType)
    /// </para>
    /// </summary>
    public partial class HashSum : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator HashSum(XElement xe) { return XTypedServices.ToXTypedElement<HashSum>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static HashSum() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("HashSum", "")), new NamedContentModelEntity(XName.Get("HashSumAlgorithmType", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:HashSum and its governing algorithm.
        /// </para>
        /// <para>
        /// Regular expression: (HashSum1, HashSumAlgorithmType)
        /// </para>
        /// </summary>
        public HashSum() {
        }
        
        /// <summary>
        /// <para>
        /// The value of the ddexC:HashSum.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (HashSum1, HashSumAlgorithmType)
        /// </para>
        /// </summary>
        public string HashSum1 {
            get {
                XElement x = this.GetElement(XName.Get("HashSum", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("HashSum", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:Type of ddex:HashSumAlgorithm governing the ddexC:HashSum.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (HashSum1, HashSumAlgorithmType)
        /// </para>
        /// </summary>
        public HashSumAlgorithmType HashSumAlgorithmType {
            get {
                XElement x = this.GetElement(XName.Get("HashSumAlgorithmType", ""));
                return ((HashSumAlgorithmType)(x));
            }
            set {
                this.SetElement(XName.Get("HashSumAlgorithmType", ""), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("HashSum", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HashSum>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("HashSum", ""), typeof(string));
            localElementDictionary.Add(XName.Get("HashSumAlgorithmType", ""), typeof(HashSumAlgorithmType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:HashSumAlgorithmType.
    /// </para>
    /// </summary>
    public partial class HashSumAlgorithmType : XTypedElement, IXMetaData {
        
         public static explicit operator HashSumAlgorithmType(XElement xe) { return XTypedServices.ToXTypedElement<HashSumAlgorithmType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:HashSumAlgorithmType.
        /// </para>
        /// </summary>
        public HashSumAlgorithmType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.HashSumAlgorithmType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddexC:HashSumAlgorithmType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UserDefined value of the ddexC:HashSumAlgorithmType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserDefinedValue {
            get {
                XAttribute x = this.Attribute(XName.Get("UserDefinedValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserDefinedValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("HashSumAlgorithmType", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HashSumAlgorithmType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:HostSoundCarrier of a ddex:SoundRecording. This ddex:Composite exists in the Release Notification Message Suite Standard to support the identification and matching of ddex:SoundRecording information.
    /// </para>
    /// <para>
    /// Regular expression: (ReleaseId*, RightsAgreementId?, Title*, DisplayArtist*, AdministratingRecordCompany*, TrackNumber?, VolumeNumberInSet?)
    /// </para>
    /// </summary>
    public partial class HostSoundCarrier : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ReleaseId> ReleaseIdField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Title> TitleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Artist> DisplayArtistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AdministratingRecordCompany> AdministratingRecordCompanyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator HostSoundCarrier(XElement xe) { return XTypedServices.ToXTypedElement<HostSoundCarrier>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static HostSoundCarrier() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ReleaseId", "")), new NamedContentModelEntity(XName.Get("RightsAgreementId", "")), new NamedContentModelEntity(XName.Get("Title", "")), new NamedContentModelEntity(XName.Get("DisplayArtist", "")), new NamedContentModelEntity(XName.Get("AdministratingRecordCompany", "")), new NamedContentModelEntity(XName.Get("TrackNumber", "")), new NamedContentModelEntity(XName.Get("VolumeNumberInSet", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:HostSoundCarrier of a ddex:SoundRecording. This ddex:Composite exists in the Release Notification Message Suite Standard to support the identification and matching of ddex:SoundRecording information.
        /// </para>
        /// <para>
        /// Regular expression: (ReleaseId*, RightsAgreementId?, Title*, DisplayArtist*, AdministratingRecordCompany*, TrackNumber?, VolumeNumberInSet?)
        /// </para>
        /// </summary>
        public HostSoundCarrier() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:ReleaseIds of the ddexC:HostSoundCarrier. If available, a ddex:GRid has to be used. If the ddexC:HostSoundCarrier contains only one ddex:SoundRecording, the ddex:ISRC of the ddex:SoundRecording may be used instead.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ReleaseId*, RightsAgreementId?, Title*, DisplayArtist*, AdministratingRecordCompany*, TrackNumber?, VolumeNumberInSet?)
        /// </para>
        /// </summary>
        public IList<ReleaseId> ReleaseId {
            get {
                if ((this.ReleaseIdField == null)) {
                    this.ReleaseIdField = new XTypedList<ReleaseId>(this, LinqToXsdTypeManager.Instance, XName.Get("ReleaseId", ""));
                }
                return this.ReleaseIdField;
            }
            set {
                if ((value == null)) {
                    this.ReleaseIdField = null;
                }
                else {
                    if ((this.ReleaseIdField == null)) {
                        this.ReleaseIdField = XTypedList<ReleaseId>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ReleaseId", ""));
                    }
                    else {
                        XTypedServices.SetList<ReleaseId>(this.ReleaseIdField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:Identifiers of a ddex:License, ddex:Claim, ddex:RightShare or contract for the MusicalWork(s) used in the ddexC:HostSoundCarrier.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ReleaseId*, RightsAgreementId?, Title*, DisplayArtist*, AdministratingRecordCompany*, TrackNumber?, VolumeNumberInSet?)
        /// </para>
        /// </summary>
        public RightsAgreementId RightsAgreementId {
            get {
                XElement x = this.GetElement(XName.Get("RightsAgreementId", ""));
                return ((RightsAgreementId)(x));
            }
            set {
                this.SetElement(XName.Get("RightsAgreementId", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Title of the ddexC:HostSoundCarrier.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ReleaseId*, RightsAgreementId?, Title*, DisplayArtist*, AdministratingRecordCompany*, TrackNumber?, VolumeNumberInSet?)
        /// </para>
        /// </summary>
        public IList<Title> Title {
            get {
                if ((this.TitleField == null)) {
                    this.TitleField = new XTypedList<Title>(this, LinqToXsdTypeManager.Instance, XName.Get("Title", ""));
                }
                return this.TitleField;
            }
            set {
                if ((value == null)) {
                    this.TitleField = null;
                }
                else {
                    if ((this.TitleField == null)) {
                        this.TitleField = XTypedList<Title>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Title", ""));
                    }
                    else {
                        XTypedServices.SetList<Title>(this.TitleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:DisplayArtist for the ddexC:HostSoundCarrier. The ddex:DisplayArtist may be described through ddex:Name, ddex:Identifier and Roles.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ReleaseId*, RightsAgreementId?, Title*, DisplayArtist*, AdministratingRecordCompany*, TrackNumber?, VolumeNumberInSet?)
        /// </para>
        /// </summary>
        public IList<Artist> DisplayArtist {
            get {
                if ((this.DisplayArtistField == null)) {
                    this.DisplayArtistField = new XTypedList<Artist>(this, LinqToXsdTypeManager.Instance, XName.Get("DisplayArtist", ""));
                }
                return this.DisplayArtistField;
            }
            set {
                if ((value == null)) {
                    this.DisplayArtistField = null;
                }
                else {
                    if ((this.DisplayArtistField == null)) {
                        this.DisplayArtistField = XTypedList<Artist>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("DisplayArtist", ""));
                    }
                    else {
                        XTypedServices.SetList<Artist>(this.DisplayArtistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:AdministratingRecordCompany for the Rights in the ddexC:HostSoundCarrier.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ReleaseId*, RightsAgreementId?, Title*, DisplayArtist*, AdministratingRecordCompany*, TrackNumber?, VolumeNumberInSet?)
        /// </para>
        /// </summary>
        public IList<AdministratingRecordCompany> AdministratingRecordCompany {
            get {
                if ((this.AdministratingRecordCompanyField == null)) {
                    this.AdministratingRecordCompanyField = new XTypedList<AdministratingRecordCompany>(this, LinqToXsdTypeManager.Instance, XName.Get("AdministratingRecordCompany", ""));
                }
                return this.AdministratingRecordCompanyField;
            }
            set {
                if ((value == null)) {
                    this.AdministratingRecordCompanyField = null;
                }
                else {
                    if ((this.AdministratingRecordCompanyField == null)) {
                        this.AdministratingRecordCompanyField = XTypedList<AdministratingRecordCompany>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("AdministratingRecordCompany", ""));
                    }
                    else {
                        XTypedServices.SetList<AdministratingRecordCompany>(this.AdministratingRecordCompanyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:TrackNumber of the ddex:SoundRecording within the ddexC:HostSoundCarrier.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ReleaseId*, RightsAgreementId?, Title*, DisplayArtist*, AdministratingRecordCompany*, TrackNumber?, VolumeNumberInSet?)
        /// </para>
        /// </summary>
        public string TrackNumber {
            get {
                XElement x = this.GetElement(XName.Get("TrackNumber", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("TrackNumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:SequenceNumber within the ddex:Set of the volume containing the ddex:SoundRecording, where the ddexC:HostSoundCarrier is a ddex:Set (such as a 'box set' of CDs).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ReleaseId*, RightsAgreementId?, Title*, DisplayArtist*, AdministratingRecordCompany*, TrackNumber?, VolumeNumberInSet?)
        /// </para>
        /// </summary>
        public string VolumeNumberInSet {
            get {
                XElement x = this.GetElement(XName.Get("VolumeNumberInSet", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("VolumeNumberInSet", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("HostSoundCarrier", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HostSoundCarrier>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ReleaseId", ""), typeof(ReleaseId));
            localElementDictionary.Add(XName.Get("RightsAgreementId", ""), typeof(RightsAgreementId));
            localElementDictionary.Add(XName.Get("Title", ""), typeof(Title));
            localElementDictionary.Add(XName.Get("DisplayArtist", ""), typeof(Artist));
            localElementDictionary.Add(XName.Get("AdministratingRecordCompany", ""), typeof(AdministratingRecordCompany));
            localElementDictionary.Add(XName.Get("TrackNumber", ""), typeof(string));
            localElementDictionary.Add(XName.Get("VolumeNumberInSet", ""), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of an ddex:ICPN.
    /// </para>
    /// </summary>
    public partial class ICPN : XTypedElement, IXMetaData {
        
         public static explicit operator ICPN(XElement xe) { return XTypedServices.ToXTypedElement<ICPN>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of an ddex:ICPN.
        /// </para>
        /// </summary>
        public ICPN() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ddexC:ICPN is specifically an ddex:EAN (=True) or a ddex:UPC (=False). This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public bool IsEan {
            get {
                XAttribute x = this.Attribute(XName.Get("IsEan", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("IsEan", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ICPN", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ICPN>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of an ddex:ImageCodecType.
    /// </para>
    /// </summary>
    public partial class ImageCodecType : XTypedElement, IXMetaData {
        
         public static explicit operator ImageCodecType(XElement xe) { return XTypedServices.ToXTypedElement<ImageCodecType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of an ddex:ImageCodecType.
        /// </para>
        /// </summary>
        public ImageCodecType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.ImageCodecType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Identifier of the ddex:Version of the ddexC:ImageCodecType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Version {
            get {
                XAttribute x = this.Attribute(XName.Get("Version", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Version", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddexC:ImageCodecType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UserDefined value of the ddexC:ImageCodecType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserDefinedValue {
            get {
                XAttribute x = this.Attribute(XName.Get("UserDefinedValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserDefinedValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ImageCodecType", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ImageCodecType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of ddex:Descriptors, Dates and other attributes of an ddex:Image which may vary according to ddex:Territory of release.
    /// </para>
    /// <para>
    /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, CLine*, Description?, CourtesyLine?, OriginalResourceReleaseDate?)
    /// </para>
    /// </summary>
    public partial class ImageDetailsByTerritory : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<object> TerritoryCodeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<object> ExcludedTerritoryCodeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ResourceContributor> ResourceContributorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<IndirectResourceContributor> IndirectResourceContributorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CLine> CLineField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator ImageDetailsByTerritory(XElement xe) { return XTypedServices.ToXTypedElement<ImageDetailsByTerritory>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ImageDetailsByTerritory() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:Descriptors, Dates and other attributes of an ddex:Image which may vary according to ddex:Territory of release.
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, CLine*, Description?, CourtesyLine?, OriginalResourceReleaseDate?)
        /// </para>
        /// </summary>
        public ImageDetailsByTerritory() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Territory to which the ddex:Image details apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:ExcludedTerritory shall be present, but not both.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, CLine*, Description?, CourtesyLine?, OriginalResourceReleaseDate?)
        /// </para>
        /// </summary>
        public IList<object> TerritoryCode {
            get {
                if ((this.TerritoryCodeField == null)) {
                    this.TerritoryCodeField = new XSimpleList<object>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, XName.Get("TerritoryCode", ""));
                }
                return this.TerritoryCodeField;
            }
            set {
                if ((value == null)) {
                    this.TerritoryCodeField = null;
                }
                else {
                    if ((this.TerritoryCodeField == null)) {
                        this.TerritoryCodeField = XSimpleList<object>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, value, XName.Get("TerritoryCode", ""));
                    }
                    else {
                        XTypedServices.SetList<System.Object>(this.TerritoryCodeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Territory to which the ddex:Image details do not apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:Territory shall be present, but not both.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, CLine*, Description?, CourtesyLine?, OriginalResourceReleaseDate?)
        /// </para>
        /// </summary>
        public IList<object> ExcludedTerritoryCode {
            get {
                if ((this.ExcludedTerritoryCodeField == null)) {
                    this.ExcludedTerritoryCodeField = new XSimpleList<object>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, XName.Get("ExcludedTerritoryCode", ""));
                }
                return this.ExcludedTerritoryCodeField;
            }
            set {
                if ((value == null)) {
                    this.ExcludedTerritoryCodeField = null;
                }
                else {
                    if ((this.ExcludedTerritoryCodeField == null)) {
                        this.ExcludedTerritoryCodeField = XSimpleList<object>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, value, XName.Get("ExcludedTerritoryCode", ""));
                    }
                    else {
                        XTypedServices.SetList<System.Object>(this.ExcludedTerritoryCodeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Contributor to the ddex:Image.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, CLine*, Description?, CourtesyLine?, OriginalResourceReleaseDate?)
        /// </para>
        /// </summary>
        public IList<ResourceContributor> ResourceContributor {
            get {
                if ((this.ResourceContributorField == null)) {
                    this.ResourceContributorField = new XTypedList<ResourceContributor>(this, LinqToXsdTypeManager.Instance, XName.Get("ResourceContributor", ""));
                }
                return this.ResourceContributorField;
            }
            set {
                if ((value == null)) {
                    this.ResourceContributorField = null;
                }
                else {
                    if ((this.ResourceContributorField == null)) {
                        this.ResourceContributorField = XTypedList<ResourceContributor>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ResourceContributor", ""));
                    }
                    else {
                        XTypedServices.SetList<ResourceContributor>(this.ResourceContributorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of an indirect ddex:Contributor to the ddex:Image.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, CLine*, Description?, CourtesyLine?, OriginalResourceReleaseDate?)
        /// </para>
        /// </summary>
        public IList<IndirectResourceContributor> IndirectResourceContributor {
            get {
                if ((this.IndirectResourceContributorField == null)) {
                    this.IndirectResourceContributorField = new XTypedList<IndirectResourceContributor>(this, LinqToXsdTypeManager.Instance, XName.Get("IndirectResourceContributor", ""));
                }
                return this.IndirectResourceContributorField;
            }
            set {
                if ((value == null)) {
                    this.IndirectResourceContributorField = null;
                }
                else {
                    if ((this.IndirectResourceContributorField == null)) {
                        this.IndirectResourceContributorField = XTypedList<IndirectResourceContributor>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("IndirectResourceContributor", ""));
                    }
                    else {
                        XTypedServices.SetList<IndirectResourceContributor>(this.IndirectResourceContributorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:CLine for the ddex:Image.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, CLine*, Description?, CourtesyLine?, OriginalResourceReleaseDate?)
        /// </para>
        /// </summary>
        public IList<CLine> CLine {
            get {
                if ((this.CLineField == null)) {
                    this.CLineField = new XTypedList<CLine>(this, LinqToXsdTypeManager.Instance, XName.Get("CLine", ""));
                }
                return this.CLineField;
            }
            set {
                if ((value == null)) {
                    this.CLineField = null;
                }
                else {
                    if ((this.CLineField == null)) {
                        this.CLineField = XTypedList<CLine>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CLine", ""));
                    }
                    else {
                        XTypedServices.SetList<CLine>(this.CLineField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a ddex:Description of the subject of the ddex:Image.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, CLine*, Description?, CourtesyLine?, OriginalResourceReleaseDate?)
        /// </para>
        /// </summary>
        public Description Description {
            get {
                XElement x = this.GetElement(XName.Get("Description", ""));
                return ((Description)(x));
            }
            set {
                this.SetElement(XName.Get("Description", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing an ddex:Annotation which acknowledges record companies and/or other Parties giving permission for ddex:Artists or others featured on the ddex:Image.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, CLine*, Description?, CourtesyLine?, OriginalResourceReleaseDate?)
        /// </para>
        /// </summary>
        public CourtesyLine CourtesyLine {
            get {
                XElement x = this.GetElement(XName.Get("CourtesyLine", ""));
                return ((CourtesyLine)(x));
            }
            set {
                this.SetElement(XName.Get("CourtesyLine", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ddex:Image was originally published, whether for physical or electronic/online distribution.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, CLine*, Description?, CourtesyLine?, OriginalResourceReleaseDate?)
        /// </para>
        /// </summary>
        public EventDate OriginalResourceReleaseDate {
            get {
                XElement x = this.GetElement(XName.Get("OriginalResourceReleaseDate", ""));
                return ((EventDate)(x));
            }
            set {
                this.SetElement(XName.Get("OriginalResourceReleaseDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the ddexC:ImageDetailsByTerritory as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ImageDetailsByTerritory", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ImageDetailsByTerritory>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("TerritoryCode", ""), typeof(object));
            localElementDictionary.Add(XName.Get("ExcludedTerritoryCode", ""), typeof(object));
            localElementDictionary.Add(XName.Get("ResourceContributor", ""), typeof(ResourceContributor));
            localElementDictionary.Add(XName.Get("IndirectResourceContributor", ""), typeof(IndirectResourceContributor));
            localElementDictionary.Add(XName.Get("CLine", ""), typeof(CLine));
            localElementDictionary.Add(XName.Get("Description", ""), typeof(Description));
            localElementDictionary.Add(XName.Get("CourtesyLine", ""), typeof(CourtesyLine));
            localElementDictionary.Add(XName.Get("OriginalResourceReleaseDate", ""), typeof(EventDate));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of ddex:Identifiers of an ddex:Image.
    /// </para>
    /// <para>
    /// Regular expression: (ProprietaryId+)
    /// </para>
    /// </summary>
    public partial class ImageId : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ProprietaryId> ProprietaryIdField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ImageId(XElement xe) { return XTypedServices.ToXTypedElement<ImageId>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ImageId() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ProprietaryId", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:Identifiers of an ddex:Image.
        /// </para>
        /// <para>
        /// Regular expression: (ProprietaryId+)
        /// </para>
        /// </summary>
        public ImageId() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:ProprietaryIdentifier of the ddex:Image.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ProprietaryId+)
        /// </para>
        /// </summary>
        public IList<ProprietaryId> ProprietaryId {
            get {
                if ((this.ProprietaryIdField == null)) {
                    this.ProprietaryIdField = new XTypedList<ProprietaryId>(this, LinqToXsdTypeManager.Instance, XName.Get("ProprietaryId", ""));
                }
                return this.ProprietaryIdField;
            }
            set {
                if ((value == null)) {
                    this.ProprietaryIdField = null;
                }
                else {
                    if ((this.ProprietaryIdField == null)) {
                        this.ProprietaryIdField = XTypedList<ProprietaryId>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ProprietaryId", ""));
                    }
                    else {
                        XTypedServices.SetList<ProprietaryId>(this.ProprietaryIdField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether this ddex:Identifier is old and has been replaced by a new one (=True) or not (=False). The ddex:Flag may only be set to True when the new ddex:Identifier is also provided. If the ddex:Flag is not set, this ddex:Identifier is deemed to be the current one.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsReplaced {
            get {
                XAttribute x = this.Attribute(XName.Get("IsReplaced", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("IsReplaced", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ImageId", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ImageId>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ProprietaryId", ""), typeof(ProprietaryId));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of an ddex:ImageType.
    /// </para>
    /// </summary>
    public partial class ImageType : XTypedElement, IXMetaData {
        
         public static explicit operator ImageType(XElement xe) { return XTypedServices.ToXTypedElement<ImageType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of an ddex:ImageType.
        /// </para>
        /// </summary>
        public ImageType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.ImageType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddexC:ImageType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UserDefined value of the ddexC:ImageType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserDefinedValue {
            get {
                XAttribute x = this.Attribute(XName.Get("UserDefinedValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserDefinedValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ImageType", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ImageType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of the ddex:Name, ddex:Identifier and role(s) of an indirect ddex:Contributor to a ddex:Resource.
    /// </para>
    /// <para>
    /// Regular expression: ((PartyId | (PartyName+, PartyId?)), IndirectResourceContributorRole*)
    /// </para>
    /// </summary>
    public partial class IndirectResourceContributor : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PartyId> PartyIdField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PartyName> PartyNameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<MusicalWorkContributorRole> IndirectResourceContributorRoleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator IndirectResourceContributor(XElement xe) { return XTypedServices.ToXTypedElement<IndirectResourceContributor>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static IndirectResourceContributor() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:Name, ddex:Identifier and role(s) of an indirect ddex:Contributor to a ddex:Resource.
        /// </para>
        /// <para>
        /// Regular expression: ((PartyId | (PartyName+, PartyId?)), IndirectResourceContributorRole*)
        /// </para>
        /// </summary>
        public IndirectResourceContributor() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:PartyId for the ddex:Party. If no ddex:Namespace is given, the ddex:Identifier is a ddex:DdexPartyId (DPID). Note that DPIDs are not normally used to identify ddex:Artists, ddex:Producers or other ddex:Creators.
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((PartyId | (PartyName+, PartyId?)), IndirectResourceContributorRole*)
        /// </para>
        /// </summary>
        public IList<PartyId> PartyId {
            get {
                if ((this.PartyIdField == null)) {
                    this.PartyIdField = new XTypedList<PartyId>(this, LinqToXsdTypeManager.Instance, XName.Get("PartyId", ""));
                }
                return this.PartyIdField;
            }
            set {
                if ((value == null)) {
                    this.PartyIdField = null;
                }
                else {
                    if ((this.PartyIdField == null)) {
                        this.PartyIdField = XTypedList<PartyId>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("PartyId", ""));
                    }
                    else {
                        XTypedServices.SetList<PartyId>(this.PartyIdField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the PartyName(s).
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((PartyId | (PartyName+, PartyId?)), IndirectResourceContributorRole*)
        /// </para>
        /// </summary>
        public IList<PartyName> PartyName {
            get {
                if ((this.PartyNameField == null)) {
                    this.PartyNameField = new XTypedList<PartyName>(this, LinqToXsdTypeManager.Instance, XName.Get("PartyName", ""));
                }
                return this.PartyNameField;
            }
            set {
                if ((value == null)) {
                    this.PartyNameField = null;
                }
                else {
                    if ((this.PartyNameField == null)) {
                        this.PartyNameField = XTypedList<PartyName>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("PartyName", ""));
                    }
                    else {
                        XTypedServices.SetList<PartyName>(this.PartyNameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a role played by the indirect ddex:Contributor.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((PartyId | (PartyName+, PartyId?)), IndirectResourceContributorRole*)
        /// </para>
        /// </summary>
        public IList<MusicalWorkContributorRole> IndirectResourceContributorRole {
            get {
                if ((this.IndirectResourceContributorRoleField == null)) {
                    this.IndirectResourceContributorRoleField = new XTypedList<MusicalWorkContributorRole>(this, LinqToXsdTypeManager.Instance, XName.Get("IndirectResourceContributorRole", ""));
                }
                return this.IndirectResourceContributorRoleField;
            }
            set {
                if ((value == null)) {
                    this.IndirectResourceContributorRoleField = null;
                }
                else {
                    if ((this.IndirectResourceContributorRoleField == null)) {
                        this.IndirectResourceContributorRoleField = XTypedList<MusicalWorkContributorRole>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("IndirectResourceContributorRole", ""));
                    }
                    else {
                        XTypedServices.SetList<MusicalWorkContributorRole>(this.IndirectResourceContributorRoleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The number indicating the order of the indirect ResourceContributor in a group of ResourceContributors that have contributed to a ddex:Resource. This is represented in an XML schema as an XML ddex:Attribute. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> SequenceNumber {
            get {
                XAttribute x = this.Attribute(XName.Get("SequenceNumber", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("SequenceNumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("IndirectResourceContributor", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<IndirectResourceContributor>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("PartyId", ""), typeof(PartyId));
            localElementDictionary.Add(XName.Get("PartyName", ""), typeof(PartyName));
            localElementDictionary.Add(XName.Get("IndirectResourceContributorRole", ""), typeof(MusicalWorkContributorRole));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:Description containing ddex:Keywords.
    /// </para>
    /// </summary>
    public partial class Keywords : XTypedElement, IXMetaData {
        
         public static explicit operator Keywords(XElement xe) { return XTypedServices.ToXTypedElement<Keywords>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Description containing ddex:Keywords.
        /// </para>
        /// </summary>
        public Keywords() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script of the ddexC:Keywords as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Keywords", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Keywords>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:LabelName.
    /// </para>
    /// </summary>
    public partial class LabelName : XTypedElement, IXMetaData {
        
         public static explicit operator LabelName(XElement xe) { return XTypedServices.ToXTypedElement<LabelName>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:LabelName.
        /// </para>
        /// </summary>
        public LabelName() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script of the ddexC:LabelName as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Type of ddex:LabelName. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LabelNameType {
            get {
                XAttribute x = this.Attribute(XName.Get("LabelNameType", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LabelNameType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("LabelName", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<LabelName>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:LicenseOrClaimRefusalReason.
    /// </para>
    /// </summary>
    public partial class LicenseOrClaimRefusalReason : XTypedElement, IXMetaData {
        
         public static explicit operator LicenseOrClaimRefusalReason(XElement xe) { return XTypedServices.ToXTypedElement<LicenseOrClaimRefusalReason>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:LicenseOrClaimRefusalReason.
        /// </para>
        /// </summary>
        public LicenseOrClaimRefusalReason() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.LicenseOrClaimRefusalReason.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddexC:LicenseOrClaimRefusalReason. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UserDefined value of the ddexC:LicenseOrClaimRefusalReason. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserDefinedValue {
            get {
                XAttribute x = this.Attribute(XName.Get("UserDefinedValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserDefinedValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("LicenseOrClaimRefusalReason", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<LicenseOrClaimRefusalReason>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:LicenseOrClaimRequestUpdateReason.
    /// </para>
    /// </summary>
    public partial class LicenseOrClaimRequestUpdateReason : XTypedElement, IXMetaData {
        
         public static explicit operator LicenseOrClaimRequestUpdateReason(XElement xe) { return XTypedServices.ToXTypedElement<LicenseOrClaimRequestUpdateReason>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:LicenseOrClaimRequestUpdateReason.
        /// </para>
        /// </summary>
        public LicenseOrClaimRequestUpdateReason() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.LicenseOrClaimRequestUpdateReason.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddexC:LicenseOrClaimRequestUpdateReason. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UserDefined value of the ddexC:LicenseOrClaimRequestUpdateReason. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserDefinedValue {
            get {
                XAttribute x = this.Attribute(XName.Get("UserDefinedValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserDefinedValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("LicenseOrClaimRequestUpdateReason", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<LicenseOrClaimRequestUpdateReason>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:LicenseOrClaimUpdateReason.
    /// </para>
    /// </summary>
    public partial class LicenseOrClaimUpdateReason : XTypedElement, IXMetaData {
        
         public static explicit operator LicenseOrClaimUpdateReason(XElement xe) { return XTypedServices.ToXTypedElement<LicenseOrClaimUpdateReason>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:LicenseOrClaimUpdateReason.
        /// </para>
        /// </summary>
        public LicenseOrClaimUpdateReason() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.LicenseOrClaimUpdateReason.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddexC:LicenseOrClaimUpdateReason. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UserDefined value of the ddexC:LicenseOrClaimUpdateReason. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserDefinedValue {
            get {
                XAttribute x = this.Attribute(XName.Get("UserDefinedValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserDefinedValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("LicenseOrClaimUpdateReason", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<LicenseOrClaimUpdateReason>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:LinkedReleaseResourceReference for a ddex:Resource which is linked to a ddex:ContentItem.
    /// </para>
    /// </summary>
    public partial class LinkedReleaseResourceReference : XTypedElement, IXMetaData {
        
         public static explicit operator LinkedReleaseResourceReference(XElement xe) { return XTypedServices.ToXTypedElement<LinkedReleaseResourceReference>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:LinkedReleaseResourceReference for a ddex:Resource which is linked to a ddex:ContentItem.
        /// </para>
        /// </summary>
        public LinkedReleaseResourceReference() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.LocalResourceAnchorReference.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a  ddex:Description of the link for the ddex:ReleaseResourceReference.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LinkDescription {
            get {
                XAttribute x = this.Attribute(XName.Get("LinkDescription", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LinkDescription", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:LinkDescription as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("LinkedReleaseResourceReference", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<LinkedReleaseResourceReference>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:MessageActionType.
    /// </para>
    /// </summary>
    public partial class MessageActionType : XTypedElement, IXMetaData {
        
         public static explicit operator MessageActionType(XElement xe) { return XTypedServices.ToXTypedElement<MessageActionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:MessageActionType.
        /// </para>
        /// </summary>
        public MessageActionType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.MessageActionType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddex:MessageActionType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UserDefined value of the ddex:MessageActionType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserDefinedValue {
            get {
                XAttribute x = this.Attribute(XName.Get("UserDefinedValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserDefinedValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MessageActionType", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MessageActionType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing information about Parties in between the original ddex:MessageSender and ultimate ddex:MessageRecipient.
    /// </para>
    /// <para>
    /// Regular expression: (MessageAuditTrailEvent+)
    /// </para>
    /// </summary>
    public partial class MessageAuditTrail : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<MessageAuditTrailEvent> MessageAuditTrailEventField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator MessageAuditTrail(XElement xe) { return XTypedServices.ToXTypedElement<MessageAuditTrail>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MessageAuditTrail() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("MessageAuditTrailEvent", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing information about Parties in between the original ddex:MessageSender and ultimate ddex:MessageRecipient.
        /// </para>
        /// <para>
        /// Regular expression: (MessageAuditTrailEvent+)
        /// </para>
        /// </summary>
        public MessageAuditTrail() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Party handling the ddex:Message and the ddex:Time at which the handling took place.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (MessageAuditTrailEvent+)
        /// </para>
        /// </summary>
        public IList<MessageAuditTrailEvent> MessageAuditTrailEvent {
            get {
                if ((this.MessageAuditTrailEventField == null)) {
                    this.MessageAuditTrailEventField = new XTypedList<MessageAuditTrailEvent>(this, LinqToXsdTypeManager.Instance, XName.Get("MessageAuditTrailEvent", ""));
                }
                return this.MessageAuditTrailEventField;
            }
            set {
                if ((value == null)) {
                    this.MessageAuditTrailEventField = null;
                }
                else {
                    if ((this.MessageAuditTrailEventField == null)) {
                        this.MessageAuditTrailEventField = XTypedList<MessageAuditTrailEvent>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("MessageAuditTrailEvent", ""));
                    }
                    else {
                        XTypedServices.SetList<MessageAuditTrailEvent>(this.MessageAuditTrailEventField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the ddexC:MessageAuditTrail as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MessageAuditTrail", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MessageAuditTrail>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("MessageAuditTrailEvent", ""), typeof(MessageAuditTrailEvent));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:Party handling a ddex:Message and the ddex:Time at which the handling took place.
    /// </para>
    /// <para>
    /// Regular expression: (MessagingPartyDescriptor, DateTime)
    /// </para>
    /// </summary>
    public partial class MessageAuditTrailEvent : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator MessageAuditTrailEvent(XElement xe) { return XTypedServices.ToXTypedElement<MessageAuditTrailEvent>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MessageAuditTrailEvent() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("MessagingPartyDescriptor", "")), new NamedContentModelEntity(XName.Get("DateTime", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Party handling a ddex:Message and the ddex:Time at which the handling took place.
        /// </para>
        /// <para>
        /// Regular expression: (MessagingPartyDescriptor, DateTime)
        /// </para>
        /// </summary>
        public MessageAuditTrailEvent() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:MessagingParty.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (MessagingPartyDescriptor, DateTime)
        /// </para>
        /// </summary>
        public MessagingParty MessagingPartyDescriptor {
            get {
                XElement x = this.GetElement(XName.Get("MessagingPartyDescriptor", ""));
                return ((MessagingParty)(x));
            }
            set {
                this.SetElement(XName.Get("MessagingPartyDescriptor", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:DateTime at which the ddex:Message was handled by the ddex:MessagingParty (the only allowed format is ISO 8601:2004: YYYY-MM-DDThh:mm:ssTZD).
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (MessagingPartyDescriptor, DateTime)
        /// </para>
        /// </summary>
        public System.DateTime DateTime {
            get {
                XElement x = this.GetElement(XName.Get("DateTime", ""));
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetElement(XName.Get("DateTime", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MessageAuditTrailEvent", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MessageAuditTrailEvent>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("MessagingPartyDescriptor", ""), typeof(MessagingParty));
            localElementDictionary.Add(XName.Get("DateTime", ""), typeof(System.DateTime));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite placed at the beginning of each ddex:DdexMessage providing information about the ddex:Message, such as ddex:MessageSender, ddex:MessageRecipient and a ddex:Message creation time stamp.
    /// </para>
    /// <para>
    /// Regular expression: (MessageThreadId, MessageId, MessageFileName?, MessageSender, SentOnBehalfOf?, MessageRecipient, MessageCreatedDateTime, MessageAuditTrail?, Comment?, MessageControlType?)
    /// </para>
    /// </summary>
    public partial class MessageHeader : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator MessageHeader(XElement xe) { return XTypedServices.ToXTypedElement<MessageHeader>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MessageHeader() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("MessageThreadId", "")), new NamedContentModelEntity(XName.Get("MessageId", "")), new NamedContentModelEntity(XName.Get("MessageFileName", "")), new NamedContentModelEntity(XName.Get("MessageSender", "")), new NamedContentModelEntity(XName.Get("SentOnBehalfOf", "")), new NamedContentModelEntity(XName.Get("MessageRecipient", "")), new NamedContentModelEntity(XName.Get("MessageCreatedDateTime", "")), new NamedContentModelEntity(XName.Get("MessageAuditTrail", "")), new NamedContentModelEntity(XName.Get("Comment", "")), new NamedContentModelEntity(XName.Get("MessageControlType", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite placed at the beginning of each ddex:DdexMessage providing information about the ddex:Message, such as ddex:MessageSender, ddex:MessageRecipient and a ddex:Message creation time stamp.
        /// </para>
        /// <para>
        /// Regular expression: (MessageThreadId, MessageId, MessageFileName?, MessageSender, SentOnBehalfOf?, MessageRecipient, MessageCreatedDateTime, MessageAuditTrail?, Comment?, MessageControlType?)
        /// </para>
        /// </summary>
        public MessageHeader() {
        }
        
        /// <summary>
        /// <para>
        /// A xs:string used to uniquely identify the thread of ddex:Messages of which the current ddex:Message is a part. One example of such a 'thread' is the chain of NewReleaseMessages being sent from ddex:ReleaseCreator to wholesale ddex:ReleaseDistributor 1 to retail ddex:DSP when communicating information about the same Release(s). A common ddex:MessageThreadId will allow all these messages to be tied together.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (MessageThreadId, MessageId, MessageFileName?, MessageSender, SentOnBehalfOf?, MessageRecipient, MessageCreatedDateTime, MessageAuditTrail?, Comment?, MessageControlType?)
        /// </para>
        /// </summary>
        public string MessageThreadId {
            get {
                XElement x = this.GetElement(XName.Get("MessageThreadId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("MessageThreadId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A xs:string used to uniquely identify the current ddex:Message.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (MessageThreadId, MessageId, MessageFileName?, MessageSender, SentOnBehalfOf?, MessageRecipient, MessageCreatedDateTime, MessageAuditTrail?, Comment?, MessageControlType?)
        /// </para>
        /// </summary>
        public string MessageId {
            get {
                XElement x = this.GetElement(XName.Get("MessageId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("MessageId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:FileName, possibly including the ddex:FilePath, of the XML ddex:File containing the current ddex:Message.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MessageThreadId, MessageId, MessageFileName?, MessageSender, SentOnBehalfOf?, MessageRecipient, MessageCreatedDateTime, MessageAuditTrail?, Comment?, MessageControlType?)
        /// </para>
        /// </summary>
        public string MessageFileName {
            get {
                XElement x = this.GetElement(XName.Get("MessageFileName", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("MessageFileName", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:MessageSender.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (MessageThreadId, MessageId, MessageFileName?, MessageSender, SentOnBehalfOf?, MessageRecipient, MessageCreatedDateTime, MessageAuditTrail?, Comment?, MessageControlType?)
        /// </para>
        /// </summary>
        public MessagingParty MessageSender {
            get {
                XElement x = this.GetElement(XName.Get("MessageSender", ""));
                return ((MessagingParty)(x));
            }
            set {
                this.SetElement(XName.Get("MessageSender", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:Party on whose behalf the ddex:Message is sent.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MessageThreadId, MessageId, MessageFileName?, MessageSender, SentOnBehalfOf?, MessageRecipient, MessageCreatedDateTime, MessageAuditTrail?, Comment?, MessageControlType?)
        /// </para>
        /// </summary>
        public MessagingParty SentOnBehalfOf {
            get {
                XElement x = this.GetElement(XName.Get("SentOnBehalfOf", ""));
                return ((MessagingParty)(x));
            }
            set {
                this.SetElement(XName.Get("SentOnBehalfOf", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:MessageRecipient.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (MessageThreadId, MessageId, MessageFileName?, MessageSender, SentOnBehalfOf?, MessageRecipient, MessageCreatedDateTime, MessageAuditTrail?, Comment?, MessageControlType?)
        /// </para>
        /// </summary>
        public MessagingParty MessageRecipient {
            get {
                XElement x = this.GetElement(XName.Get("MessageRecipient", ""));
                return ((MessagingParty)(x));
            }
            set {
                this.SetElement(XName.Get("MessageRecipient", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:DateTime on which the ddex:Message was created (the only allowed format is ISO 8601:2004: YYYY-MM-DDThh:mm:ssTZD).
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (MessageThreadId, MessageId, MessageFileName?, MessageSender, SentOnBehalfOf?, MessageRecipient, MessageCreatedDateTime, MessageAuditTrail?, Comment?, MessageControlType?)
        /// </para>
        /// </summary>
        public System.DateTime MessageCreatedDateTime {
            get {
                XElement x = this.GetElement(XName.Get("MessageCreatedDateTime", ""));
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetElement(XName.Get("MessageCreatedDateTime", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing information about Parties in between the original ddex:MessageSender and ultimate ddex:MessageRecipient.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MessageThreadId, MessageId, MessageFileName?, MessageSender, SentOnBehalfOf?, MessageRecipient, MessageCreatedDateTime, MessageAuditTrail?, Comment?, MessageControlType?)
        /// </para>
        /// </summary>
        public MessageAuditTrail MessageAuditTrail {
            get {
                XElement x = this.GetElement(XName.Get("MessageAuditTrail", ""));
                return ((MessageAuditTrail)(x));
            }
            set {
                this.SetElement(XName.Get("MessageAuditTrail", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a human-readable ddex:Comment about the ddex:Message.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MessageThreadId, MessageId, MessageFileName?, MessageSender, SentOnBehalfOf?, MessageRecipient, MessageCreatedDateTime, MessageAuditTrail?, Comment?, MessageControlType?)
        /// </para>
        /// </summary>
        public Comment Comment {
            get {
                XElement x = this.GetElement(XName.Get("Comment", ""));
                return ((Comment)(x));
            }
            set {
                this.SetElement(XName.Get("Comment", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The indicator used to distinguish a live ddex:Message from a test ddex:Message.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MessageThreadId, MessageId, MessageFileName?, MessageSender, SentOnBehalfOf?, MessageRecipient, MessageCreatedDateTime, MessageAuditTrail?, Comment?, MessageControlType?)
        /// </para>
        /// </summary>
        public string MessageControlType {
            get {
                XElement x = this.GetElement(XName.Get("MessageControlType", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("MessageControlType", ""), value, "MessageControlType", global::ddex_net.xml._20120404.ddex.MessageControlType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the ddexC:MessageHeader as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MessageHeader", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MessageHeader>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("MessageThreadId", ""), typeof(string));
            localElementDictionary.Add(XName.Get("MessageId", ""), typeof(string));
            localElementDictionary.Add(XName.Get("MessageFileName", ""), typeof(string));
            localElementDictionary.Add(XName.Get("MessageSender", ""), typeof(MessagingParty));
            localElementDictionary.Add(XName.Get("SentOnBehalfOf", ""), typeof(MessagingParty));
            localElementDictionary.Add(XName.Get("MessageRecipient", ""), typeof(MessagingParty));
            localElementDictionary.Add(XName.Get("MessageCreatedDateTime", ""), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("MessageAuditTrail", ""), typeof(MessageAuditTrail));
            localElementDictionary.Add(XName.Get("Comment", ""), typeof(Comment));
            localElementDictionary.Add(XName.Get("MessageControlType", ""), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a reporting ddex:Period covered by a ddex:Message. It must contain at least one out of ddex:StartDate or ddex:EndDate. The ddex:StartDate must be earlier than the ddex:EndDate if both are provided.
    /// </para>
    /// <para>
    /// Regular expression: (StartDate, EndDate)
    /// </para>
    /// </summary>
    public partial class MessageNotificationPeriod : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator MessageNotificationPeriod(XElement xe) { return XTypedServices.ToXTypedElement<MessageNotificationPeriod>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MessageNotificationPeriod() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("StartDate", "")), new NamedContentModelEntity(XName.Get("EndDate", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a reporting ddex:Period covered by a ddex:Message. It must contain at least one out of ddex:StartDate or ddex:EndDate. The ddex:StartDate must be earlier than the ddex:EndDate if both are provided.
        /// </para>
        /// <para>
        /// Regular expression: (StartDate, EndDate)
        /// </para>
        /// </summary>
        public MessageNotificationPeriod() {
        }
        
        /// <summary>
        /// <para>
        /// The Date that marks the beginning of the ddex:Period (in ISO 8601:2004 format: YYYY-MM-DD). This cannot be a Date in the future.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (StartDate, EndDate)
        /// </para>
        /// </summary>
        public System.DateTime StartDate {
            get {
                XElement x = this.GetElement(XName.Get("StartDate", ""));
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElement(XName.Get("StartDate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The Date that marks the end of the ddex:Period (in ISO 8601:2004 format: YYYY-MM-DD). This cannot be a Date in the future.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (StartDate, EndDate)
        /// </para>
        /// </summary>
        public System.DateTime EndDate {
            get {
                XElement x = this.GetElement(XName.Get("EndDate", ""));
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElement(XName.Get("EndDate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MessageNotificationPeriod", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MessageNotificationPeriod>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("StartDate", ""), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("EndDate", ""), typeof(System.DateTime));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:MessagingParty.
    /// </para>
    /// <para>
    /// Regular expression: (PartyId, PartyName?, TradingName?)
    /// </para>
    /// </summary>
    public partial class MessagingParty : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator MessagingParty(XElement xe) { return XTypedServices.ToXTypedElement<MessagingParty>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MessagingParty() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("PartyId", "")), new NamedContentModelEntity(XName.Get("PartyName", "")), new NamedContentModelEntity(XName.Get("TradingName", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:MessagingParty.
        /// </para>
        /// <para>
        /// Regular expression: (PartyId, PartyName?, TradingName?)
        /// </para>
        /// </summary>
        public MessagingParty() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:PartyId for the ddex:Party handling the ddex:Message. If no ddex:Namespace is given, the ddex:Identifier is a ddex:DdexPartyId (DPID). Note that DPIDs are not normally used to identify ddex:Artists, ddex:Producers or other ddex:Creators.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (PartyId, PartyName?, TradingName?)
        /// </para>
        /// </summary>
        public PartyId PartyId {
            get {
                XElement x = this.GetElement(XName.Get("PartyId", ""));
                return ((PartyId)(x));
            }
            set {
                this.SetElement(XName.Get("PartyId", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:PartyNames for the ddex:Party handling the ddex:Message.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PartyId, PartyName?, TradingName?)
        /// </para>
        /// </summary>
        public PartyName PartyName {
            get {
                XElement x = this.GetElement(XName.Get("PartyName", ""));
                return ((PartyName)(x));
            }
            set {
                this.SetElement(XName.Get("PartyName", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a ddex:TradingName for the ddex:Party handling the ddex:Message.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PartyId, PartyName?, TradingName?)
        /// </para>
        /// </summary>
        public Name TradingName {
            get {
                XElement x = this.GetElement(XName.Get("TradingName", ""));
                return ((Name)(x));
            }
            set {
                this.SetElement(XName.Get("TradingName", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the ddexC:MessagingParty as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MessagingParty", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MessagingParty>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("PartyId", ""), typeof(PartyId));
            localElementDictionary.Add(XName.Get("PartyName", ""), typeof(PartyName));
            localElementDictionary.Add(XName.Get("TradingName", ""), typeof(Name));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of ddex:Descriptors and other attributes of a ddex:MIDI which may vary according to ddex:Territory of release. 
    /// </para>
    /// <para>
    /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, CLine*)
    /// </para>
    /// </summary>
    public partial class MidiDetailsByTerritory : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<object> TerritoryCodeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<object> ExcludedTerritoryCodeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Title> TitleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Artist> DisplayArtistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ResourceContributor> ResourceContributorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<IndirectResourceContributor> IndirectResourceContributorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LabelName> LabelNameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<RightsController> RightsControllerField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CLine> CLineField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator MidiDetailsByTerritory(XElement xe) { return XTypedServices.ToXTypedElement<MidiDetailsByTerritory>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MidiDetailsByTerritory() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:Descriptors and other attributes of a ddex:MIDI which may vary according to ddex:Territory of release. 
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, CLine*)
        /// </para>
        /// </summary>
        public MidiDetailsByTerritory() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Territory to which the ddex:MIDI details apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:ExcludedTerritory shall be present, but not both. 
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, CLine*)
        /// </para>
        /// </summary>
        public IList<object> TerritoryCode {
            get {
                if ((this.TerritoryCodeField == null)) {
                    this.TerritoryCodeField = new XSimpleList<object>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, XName.Get("TerritoryCode", ""));
                }
                return this.TerritoryCodeField;
            }
            set {
                if ((value == null)) {
                    this.TerritoryCodeField = null;
                }
                else {
                    if ((this.TerritoryCodeField == null)) {
                        this.TerritoryCodeField = XSimpleList<object>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, value, XName.Get("TerritoryCode", ""));
                    }
                    else {
                        XTypedServices.SetList<System.Object>(this.TerritoryCodeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Territory to which the ddex:MIDI details do not apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:Territory shall be present, but not both.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, CLine*)
        /// </para>
        /// </summary>
        public IList<object> ExcludedTerritoryCode {
            get {
                if ((this.ExcludedTerritoryCodeField == null)) {
                    this.ExcludedTerritoryCodeField = new XSimpleList<object>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, XName.Get("ExcludedTerritoryCode", ""));
                }
                return this.ExcludedTerritoryCodeField;
            }
            set {
                if ((value == null)) {
                    this.ExcludedTerritoryCodeField = null;
                }
                else {
                    if ((this.ExcludedTerritoryCodeField == null)) {
                        this.ExcludedTerritoryCodeField = XSimpleList<object>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, value, XName.Get("ExcludedTerritoryCode", ""));
                    }
                    else {
                        XTypedServices.SetList<System.Object>(this.ExcludedTerritoryCodeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Title of the ddex:MIDI.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, CLine*)
        /// </para>
        /// </summary>
        public IList<Title> Title {
            get {
                if ((this.TitleField == null)) {
                    this.TitleField = new XTypedList<Title>(this, LinqToXsdTypeManager.Instance, XName.Get("Title", ""));
                }
                return this.TitleField;
            }
            set {
                if ((value == null)) {
                    this.TitleField = null;
                }
                else {
                    if ((this.TitleField == null)) {
                        this.TitleField = XTypedList<Title>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Title", ""));
                    }
                    else {
                        XTypedServices.SetList<Title>(this.TitleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:DisplayArtist for the ddex:MIDI. The ddex:DisplayArtist may be described through ddex:Name, ddex:Identifier and Roles.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, CLine*)
        /// </para>
        /// </summary>
        public IList<Artist> DisplayArtist {
            get {
                if ((this.DisplayArtistField == null)) {
                    this.DisplayArtistField = new XTypedList<Artist>(this, LinqToXsdTypeManager.Instance, XName.Get("DisplayArtist", ""));
                }
                return this.DisplayArtistField;
            }
            set {
                if ((value == null)) {
                    this.DisplayArtistField = null;
                }
                else {
                    if ((this.DisplayArtistField == null)) {
                        this.DisplayArtistField = XTypedList<Artist>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("DisplayArtist", ""));
                    }
                    else {
                        XTypedServices.SetList<Artist>(this.DisplayArtistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Contributor to the ddex:MIDI.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, CLine*)
        /// </para>
        /// </summary>
        public IList<ResourceContributor> ResourceContributor {
            get {
                if ((this.ResourceContributorField == null)) {
                    this.ResourceContributorField = new XTypedList<ResourceContributor>(this, LinqToXsdTypeManager.Instance, XName.Get("ResourceContributor", ""));
                }
                return this.ResourceContributorField;
            }
            set {
                if ((value == null)) {
                    this.ResourceContributorField = null;
                }
                else {
                    if ((this.ResourceContributorField == null)) {
                        this.ResourceContributorField = XTypedList<ResourceContributor>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ResourceContributor", ""));
                    }
                    else {
                        XTypedServices.SetList<ResourceContributor>(this.ResourceContributorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of an indirect ddex:Contributor to the ddex:MIDI.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, CLine*)
        /// </para>
        /// </summary>
        public IList<IndirectResourceContributor> IndirectResourceContributor {
            get {
                if ((this.IndirectResourceContributorField == null)) {
                    this.IndirectResourceContributorField = new XTypedList<IndirectResourceContributor>(this, LinqToXsdTypeManager.Instance, XName.Get("IndirectResourceContributor", ""));
                }
                return this.IndirectResourceContributorField;
            }
            set {
                if ((value == null)) {
                    this.IndirectResourceContributorField = null;
                }
                else {
                    if ((this.IndirectResourceContributorField == null)) {
                        this.IndirectResourceContributorField = XTypedList<IndirectResourceContributor>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("IndirectResourceContributor", ""));
                    }
                    else {
                        XTypedServices.SetList<IndirectResourceContributor>(this.IndirectResourceContributorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:Identifiers of a ddex:License, ddex:Claim, ddex:RightShare or contract for the MusicalWork(s) used in the ddex:MIDI.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, CLine*)
        /// </para>
        /// </summary>
        public RightsAgreementId RightsAgreementId {
            get {
                XElement x = this.GetElement(XName.Get("RightsAgreementId", ""));
                return ((RightsAgreementId)(x));
            }
            set {
                this.SetElement(XName.Get("RightsAgreementId", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing the ddex:Name of the ddex:Label under which the ddex:Release is to be marketed.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, CLine*)
        /// </para>
        /// </summary>
        public IList<LabelName> LabelName {
            get {
                if ((this.LabelNameField == null)) {
                    this.LabelNameField = new XTypedList<LabelName>(this, LinqToXsdTypeManager.Instance, XName.Get("LabelName", ""));
                }
                return this.LabelNameField;
            }
            set {
                if ((value == null)) {
                    this.LabelNameField = null;
                }
                else {
                    if ((this.LabelNameField == null)) {
                        this.LabelNameField = XTypedList<LabelName>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("LabelName", ""));
                    }
                    else {
                        XTypedServices.SetList<LabelName>(this.LabelNameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:RightsController of Rights in the ddex:MIDI.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, CLine*)
        /// </para>
        /// </summary>
        public IList<RightsController> RightsController {
            get {
                if ((this.RightsControllerField == null)) {
                    this.RightsControllerField = new XTypedList<RightsController>(this, LinqToXsdTypeManager.Instance, XName.Get("RightsController", ""));
                }
                return this.RightsControllerField;
            }
            set {
                if ((value == null)) {
                    this.RightsControllerField = null;
                }
                else {
                    if ((this.RightsControllerField == null)) {
                        this.RightsControllerField = XTypedList<RightsController>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("RightsController", ""));
                    }
                    else {
                        XTypedServices.SetList<RightsController>(this.RightsControllerField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ddex:MIDI was re-mastered (usually digitally).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, CLine*)
        /// </para>
        /// </summary>
        public EventDate RemasteredDate {
            get {
                XElement x = this.GetElement(XName.Get("RemasteredDate", ""));
                return ((EventDate)(x));
            }
            set {
                this.SetElement(XName.Get("RemasteredDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ddex:MIDI was originally published, whether for physical or electronic/online distribution.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, CLine*)
        /// </para>
        /// </summary>
        public EventDate OriginalResourceReleaseDate {
            get {
                XElement x = this.GetElement(XName.Get("OriginalResourceReleaseDate", ""));
                return ((EventDate)(x));
            }
            set {
                this.SetElement(XName.Get("OriginalResourceReleaseDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:CLine for the ddex:MIDI.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, CLine*)
        /// </para>
        /// </summary>
        public IList<CLine> CLine {
            get {
                if ((this.CLineField == null)) {
                    this.CLineField = new XTypedList<CLine>(this, LinqToXsdTypeManager.Instance, XName.Get("CLine", ""));
                }
                return this.CLineField;
            }
            set {
                if ((value == null)) {
                    this.CLineField = null;
                }
                else {
                    if ((this.CLineField == null)) {
                        this.CLineField = XTypedList<CLine>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CLine", ""));
                    }
                    else {
                        XTypedServices.SetList<CLine>(this.CLineField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the ddexC:MidiDetailsByTerritory as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MidiDetailsByTerritory", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MidiDetailsByTerritory>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("TerritoryCode", ""), typeof(object));
            localElementDictionary.Add(XName.Get("ExcludedTerritoryCode", ""), typeof(object));
            localElementDictionary.Add(XName.Get("Title", ""), typeof(Title));
            localElementDictionary.Add(XName.Get("DisplayArtist", ""), typeof(Artist));
            localElementDictionary.Add(XName.Get("ResourceContributor", ""), typeof(ResourceContributor));
            localElementDictionary.Add(XName.Get("IndirectResourceContributor", ""), typeof(IndirectResourceContributor));
            localElementDictionary.Add(XName.Get("RightsAgreementId", ""), typeof(RightsAgreementId));
            localElementDictionary.Add(XName.Get("LabelName", ""), typeof(LabelName));
            localElementDictionary.Add(XName.Get("RightsController", ""), typeof(RightsController));
            localElementDictionary.Add(XName.Get("RemasteredDate", ""), typeof(EventDate));
            localElementDictionary.Add(XName.Get("OriginalResourceReleaseDate", ""), typeof(EventDate));
            localElementDictionary.Add(XName.Get("CLine", ""), typeof(CLine));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of ddex:Identifiers of a Midi.
    /// </para>
    /// <para>
    /// Regular expression: (ProprietaryId+)
    /// </para>
    /// </summary>
    public partial class MidiId : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ProprietaryId> ProprietaryIdField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator MidiId(XElement xe) { return XTypedServices.ToXTypedElement<MidiId>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MidiId() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ProprietaryId", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:Identifiers of a Midi.
        /// </para>
        /// <para>
        /// Regular expression: (ProprietaryId+)
        /// </para>
        /// </summary>
        public MidiId() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:ProprietaryIdentifier of the Midi.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ProprietaryId+)
        /// </para>
        /// </summary>
        public IList<ProprietaryId> ProprietaryId {
            get {
                if ((this.ProprietaryIdField == null)) {
                    this.ProprietaryIdField = new XTypedList<ProprietaryId>(this, LinqToXsdTypeManager.Instance, XName.Get("ProprietaryId", ""));
                }
                return this.ProprietaryIdField;
            }
            set {
                if ((value == null)) {
                    this.ProprietaryIdField = null;
                }
                else {
                    if ((this.ProprietaryIdField == null)) {
                        this.ProprietaryIdField = XTypedList<ProprietaryId>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ProprietaryId", ""));
                    }
                    else {
                        XTypedServices.SetList<ProprietaryId>(this.ProprietaryIdField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether this ddex:Identifier is old and has been replaced by a new one (=True) or not (=False). The ddex:Flag may only be set to True when the new ddex:Identifier is also provided. If the ddex:Flag is not set, this ddex:Identifier is deemed to be the current one.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsReplaced {
            get {
                XAttribute x = this.Attribute(XName.Get("IsReplaced", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("IsReplaced", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MidiId", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MidiId>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ProprietaryId", ""), typeof(ProprietaryId));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:MidiType.
    /// </para>
    /// </summary>
    public partial class MidiType : XTypedElement, IXMetaData {
        
         public static explicit operator MidiType(XElement xe) { return XTypedServices.ToXTypedElement<MidiType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:MidiType.
        /// </para>
        /// </summary>
        public MidiType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.MidiType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddexC:MidiType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UserDefined value of the ddexC:MidiType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserDefinedValue {
            get {
                XAttribute x = this.Attribute(XName.Get("UserDefinedValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserDefinedValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MidiType", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MidiType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:MusicalWork.
    /// </para>
    /// <para>
    /// Regular expression: (MusicalWorkId+, MusicalWorkReference, ReferenceTitle+, RightsAgreementId?, MusicalWorkContributor+, MusicalWorkType*, RightShare*, MusicalWorkDetailsByTerritory*)
    /// </para>
    /// </summary>
    public partial class MusicalWork : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<MusicalWorkId> MusicalWorkIdField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ReferenceTitle> ReferenceTitleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<MusicalWorkContributor> MusicalWorkContributorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<MusicalWorkType> MusicalWorkTypeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<RightShare> RightShareField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<MusicalWorkDetailsByTerritory> MusicalWorkDetailsByTerritoryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator MusicalWork(XElement xe) { return XTypedServices.ToXTypedElement<MusicalWork>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MusicalWork() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("MusicalWorkId", "")), new NamedContentModelEntity(XName.Get("MusicalWorkReference", "")), new NamedContentModelEntity(XName.Get("ReferenceTitle", "")), new NamedContentModelEntity(XName.Get("RightsAgreementId", "")), new NamedContentModelEntity(XName.Get("MusicalWorkContributor", "")), new NamedContentModelEntity(XName.Get("MusicalWorkType", "")), new NamedContentModelEntity(XName.Get("RightShare", "")), new NamedContentModelEntity(XName.Get("MusicalWorkDetailsByTerritory", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:MusicalWork.
        /// </para>
        /// <para>
        /// Regular expression: (MusicalWorkId+, MusicalWorkReference, ReferenceTitle+, RightsAgreementId?, MusicalWorkContributor+, MusicalWorkType*, RightShare*, MusicalWorkDetailsByTerritory*)
        /// </para>
        /// </summary>
        public MusicalWork() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:MusicalWorkId of the ddexC:MusicalWork.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (MusicalWorkId+, MusicalWorkReference, ReferenceTitle+, RightsAgreementId?, MusicalWorkContributor+, MusicalWorkType*, RightShare*, MusicalWorkDetailsByTerritory*)
        /// </para>
        /// </summary>
        public IList<MusicalWorkId> MusicalWorkId {
            get {
                if ((this.MusicalWorkIdField == null)) {
                    this.MusicalWorkIdField = new XTypedList<MusicalWorkId>(this, LinqToXsdTypeManager.Instance, XName.Get("MusicalWorkId", ""));
                }
                return this.MusicalWorkIdField;
            }
            set {
                if ((value == null)) {
                    this.MusicalWorkIdField = null;
                }
                else {
                    if ((this.MusicalWorkIdField == null)) {
                        this.MusicalWorkIdField = XTypedList<MusicalWorkId>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("MusicalWorkId", ""));
                    }
                    else {
                        XTypedServices.SetList<MusicalWorkId>(this.MusicalWorkIdField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Identifier (specific to the ddex:Message) of the ddexC:MusicalWork within the ddex:Release which contains it. This is a ddex:LocalMusicalWorkAnchor starting with the letter W.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (MusicalWorkId+, MusicalWorkReference, ReferenceTitle+, RightsAgreementId?, MusicalWorkContributor+, MusicalWorkType*, RightShare*, MusicalWorkDetailsByTerritory*)
        /// </para>
        /// </summary>
        public string MusicalWorkReference {
            get {
                XElement x = this.GetElement(XName.Get("MusicalWorkReference", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("MusicalWorkReference", ""), value, "MusicalWorkReference", MusicalWorkReferenceLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:ReferenceTitle of the ddexC:MusicalWork.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (MusicalWorkId+, MusicalWorkReference, ReferenceTitle+, RightsAgreementId?, MusicalWorkContributor+, MusicalWorkType*, RightShare*, MusicalWorkDetailsByTerritory*)
        /// </para>
        /// </summary>
        public IList<ReferenceTitle> ReferenceTitle {
            get {
                if ((this.ReferenceTitleField == null)) {
                    this.ReferenceTitleField = new XTypedList<ReferenceTitle>(this, LinqToXsdTypeManager.Instance, XName.Get("ReferenceTitle", ""));
                }
                return this.ReferenceTitleField;
            }
            set {
                if ((value == null)) {
                    this.ReferenceTitleField = null;
                }
                else {
                    if ((this.ReferenceTitleField == null)) {
                        this.ReferenceTitleField = XTypedList<ReferenceTitle>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ReferenceTitle", ""));
                    }
                    else {
                        XTypedServices.SetList<ReferenceTitle>(this.ReferenceTitleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:Identifiers of a ddex:License, ddex:Claim, ddex:RightShare or contract for the ddexC:MusicalWork.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MusicalWorkId+, MusicalWorkReference, ReferenceTitle+, RightsAgreementId?, MusicalWorkContributor+, MusicalWorkType*, RightShare*, MusicalWorkDetailsByTerritory*)
        /// </para>
        /// </summary>
        public RightsAgreementId RightsAgreementId {
            get {
                XElement x = this.GetElement(XName.Get("RightsAgreementId", ""));
                return ((RightsAgreementId)(x));
            }
            set {
                this.SetElement(XName.Get("RightsAgreementId", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details a ddex:MusicalWorkContributor to the ddexC:MusicalWork.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (MusicalWorkId+, MusicalWorkReference, ReferenceTitle+, RightsAgreementId?, MusicalWorkContributor+, MusicalWorkType*, RightShare*, MusicalWorkDetailsByTerritory*)
        /// </para>
        /// </summary>
        public IList<MusicalWorkContributor> MusicalWorkContributor {
            get {
                if ((this.MusicalWorkContributorField == null)) {
                    this.MusicalWorkContributorField = new XTypedList<MusicalWorkContributor>(this, LinqToXsdTypeManager.Instance, XName.Get("MusicalWorkContributor", ""));
                }
                return this.MusicalWorkContributorField;
            }
            set {
                if ((value == null)) {
                    this.MusicalWorkContributorField = null;
                }
                else {
                    if ((this.MusicalWorkContributorField == null)) {
                        this.MusicalWorkContributorField = XTypedList<MusicalWorkContributor>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("MusicalWorkContributor", ""));
                    }
                    else {
                        XTypedServices.SetList<MusicalWorkContributor>(this.MusicalWorkContributorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:Type of the ddexC:MusicalWork.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (MusicalWorkId+, MusicalWorkReference, ReferenceTitle+, RightsAgreementId?, MusicalWorkContributor+, MusicalWorkType*, RightShare*, MusicalWorkDetailsByTerritory*)
        /// </para>
        /// </summary>
        public IList<MusicalWorkType> MusicalWorkType {
            get {
                if ((this.MusicalWorkTypeField == null)) {
                    this.MusicalWorkTypeField = new XTypedList<MusicalWorkType>(this, LinqToXsdTypeManager.Instance, XName.Get("MusicalWorkType", ""));
                }
                return this.MusicalWorkTypeField;
            }
            set {
                if ((value == null)) {
                    this.MusicalWorkTypeField = null;
                }
                else {
                    if ((this.MusicalWorkTypeField == null)) {
                        this.MusicalWorkTypeField = XTypedList<MusicalWorkType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("MusicalWorkType", ""));
                    }
                    else {
                        XTypedServices.SetList<MusicalWorkType>(this.MusicalWorkTypeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:RightShare for the ddexC:MusicalWork.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (MusicalWorkId+, MusicalWorkReference, ReferenceTitle+, RightsAgreementId?, MusicalWorkContributor+, MusicalWorkType*, RightShare*, MusicalWorkDetailsByTerritory*)
        /// </para>
        /// </summary>
        public IList<RightShare> RightShare {
            get {
                if ((this.RightShareField == null)) {
                    this.RightShareField = new XTypedList<RightShare>(this, LinqToXsdTypeManager.Instance, XName.Get("RightShare", ""));
                }
                return this.RightShareField;
            }
            set {
                if ((value == null)) {
                    this.RightShareField = null;
                }
                else {
                    if ((this.RightShareField == null)) {
                        this.RightShareField = XTypedList<RightShare>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("RightShare", ""));
                    }
                    else {
                        XTypedServices.SetList<RightShare>(this.RightShareField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:Descriptors and other attributes of the ddexC:MusicalWork which may vary according to ddex:Territory of release. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (MusicalWorkId+, MusicalWorkReference, ReferenceTitle+, RightsAgreementId?, MusicalWorkContributor+, MusicalWorkType*, RightShare*, MusicalWorkDetailsByTerritory*)
        /// </para>
        /// </summary>
        public IList<MusicalWorkDetailsByTerritory> MusicalWorkDetailsByTerritory {
            get {
                if ((this.MusicalWorkDetailsByTerritoryField == null)) {
                    this.MusicalWorkDetailsByTerritoryField = new XTypedList<MusicalWorkDetailsByTerritory>(this, LinqToXsdTypeManager.Instance, XName.Get("MusicalWorkDetailsByTerritory", ""));
                }
                return this.MusicalWorkDetailsByTerritoryField;
            }
            set {
                if ((value == null)) {
                    this.MusicalWorkDetailsByTerritoryField = null;
                }
                else {
                    if ((this.MusicalWorkDetailsByTerritoryField == null)) {
                        this.MusicalWorkDetailsByTerritoryField = XTypedList<MusicalWorkDetailsByTerritory>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("MusicalWorkDetailsByTerritory", ""));
                    }
                    else {
                        XTypedServices.SetList<MusicalWorkDetailsByTerritory>(this.MusicalWorkDetailsByTerritoryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ddexC:MusicalWork ddex:Element was updated (=True) or not (=False). The ddex:Flag may only be used when the ddex:UpdateIndicator is set to ddex:UpdateMessage. When this ddex:Boolean ddex:Flag is set to true, the ddex:MessageRecipient is expected to replace any previously provided ddexC:MusicalWork data with the now provided data.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsUpdated {
            get {
                XAttribute x = this.Attribute(XName.Get("IsUpdated", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("IsUpdated", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the ddexC:MusicalWork as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MusicalWork", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MusicalWork>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("MusicalWorkId", ""), typeof(MusicalWorkId));
            localElementDictionary.Add(XName.Get("MusicalWorkReference", ""), typeof(string));
            localElementDictionary.Add(XName.Get("ReferenceTitle", ""), typeof(ReferenceTitle));
            localElementDictionary.Add(XName.Get("RightsAgreementId", ""), typeof(RightsAgreementId));
            localElementDictionary.Add(XName.Get("MusicalWorkContributor", ""), typeof(MusicalWorkContributor));
            localElementDictionary.Add(XName.Get("MusicalWorkType", ""), typeof(MusicalWorkType));
            localElementDictionary.Add(XName.Get("RightShare", ""), typeof(RightShare));
            localElementDictionary.Add(XName.Get("MusicalWorkDetailsByTerritory", ""), typeof(MusicalWorkDetailsByTerritory));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class MusicalWorkReferenceLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "W[\\d\\-_a-zA-Z]+"}, 0, XmlSchemaWhiteSpace.Collapse));
            
            private MusicalWorkReferenceLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details a ddex:MusicalWorkContributor.
    /// </para>
    /// <para>
    /// Regular expression: ((PartyId | (PartyName+, PartyId?)), MusicalWorkContributorRole*, SocietyAffiliation*)
    /// </para>
    /// </summary>
    public partial class MusicalWorkContributor : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PartyId> PartyIdField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PartyName> PartyNameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<MusicalWorkContributorRole> MusicalWorkContributorRoleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SocietyAffiliation> SocietyAffiliationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator MusicalWorkContributor(XElement xe) { return XTypedServices.ToXTypedElement<MusicalWorkContributor>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MusicalWorkContributor() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details a ddex:MusicalWorkContributor.
        /// </para>
        /// <para>
        /// Regular expression: ((PartyId | (PartyName+, PartyId?)), MusicalWorkContributorRole*, SocietyAffiliation*)
        /// </para>
        /// </summary>
        public MusicalWorkContributor() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:PartyId for the ddex:Party. If no ddex:Namespace is given, the ddex:Identifier is a ddex:DdexPartyId (DPID). Note that DPIDs are not normally used to identify ddex:Artists, ddex:Producers or other ddex:Creators.
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((PartyId | (PartyName+, PartyId?)), MusicalWorkContributorRole*, SocietyAffiliation*)
        /// </para>
        /// </summary>
        public IList<PartyId> PartyId {
            get {
                if ((this.PartyIdField == null)) {
                    this.PartyIdField = new XTypedList<PartyId>(this, LinqToXsdTypeManager.Instance, XName.Get("PartyId", ""));
                }
                return this.PartyIdField;
            }
            set {
                if ((value == null)) {
                    this.PartyIdField = null;
                }
                else {
                    if ((this.PartyIdField == null)) {
                        this.PartyIdField = XTypedList<PartyId>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("PartyId", ""));
                    }
                    else {
                        XTypedServices.SetList<PartyId>(this.PartyIdField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the PartyName(s).
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((PartyId | (PartyName+, PartyId?)), MusicalWorkContributorRole*, SocietyAffiliation*)
        /// </para>
        /// </summary>
        public IList<PartyName> PartyName {
            get {
                if ((this.PartyNameField == null)) {
                    this.PartyNameField = new XTypedList<PartyName>(this, LinqToXsdTypeManager.Instance, XName.Get("PartyName", ""));
                }
                return this.PartyNameField;
            }
            set {
                if ((value == null)) {
                    this.PartyNameField = null;
                }
                else {
                    if ((this.PartyNameField == null)) {
                        this.PartyNameField = XTypedList<PartyName>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("PartyName", ""));
                    }
                    else {
                        XTypedServices.SetList<PartyName>(this.PartyNameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a role played by the ddex:Contributor in relation to the ddex:MusicalWork. Note: This can be used in a ddex:DdexMessage in relation to any ddex:Work, ddex:Performance or ddex:Fixation any of which may form the whole or part of the ddex:Resource itself. Example: if an 'AssociatedPerformer' is shown as a ddex:Contributor to a ddex:MusicalWork it refers to a performer of a ddex:Resource (e.g. a ddex:SoundRecording) expressing the ddex:MusicalWork.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((PartyId | (PartyName+, PartyId?)), MusicalWorkContributorRole*, SocietyAffiliation*)
        /// </para>
        /// </summary>
        public IList<MusicalWorkContributorRole> MusicalWorkContributorRole {
            get {
                if ((this.MusicalWorkContributorRoleField == null)) {
                    this.MusicalWorkContributorRoleField = new XTypedList<MusicalWorkContributorRole>(this, LinqToXsdTypeManager.Instance, XName.Get("MusicalWorkContributorRole", ""));
                }
                return this.MusicalWorkContributorRoleField;
            }
            set {
                if ((value == null)) {
                    this.MusicalWorkContributorRoleField = null;
                }
                else {
                    if ((this.MusicalWorkContributorRoleField == null)) {
                        this.MusicalWorkContributorRoleField = XTypedList<MusicalWorkContributorRole>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("MusicalWorkContributorRole", ""));
                    }
                    else {
                        XTypedServices.SetList<MusicalWorkContributorRole>(this.MusicalWorkContributorRoleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a society affiliation for the ddexC:MusicalWorkContributor.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((PartyId | (PartyName+, PartyId?)), MusicalWorkContributorRole*, SocietyAffiliation*)
        /// </para>
        /// </summary>
        public IList<SocietyAffiliation> SocietyAffiliation {
            get {
                if ((this.SocietyAffiliationField == null)) {
                    this.SocietyAffiliationField = new XTypedList<SocietyAffiliation>(this, LinqToXsdTypeManager.Instance, XName.Get("SocietyAffiliation", ""));
                }
                return this.SocietyAffiliationField;
            }
            set {
                if ((value == null)) {
                    this.SocietyAffiliationField = null;
                }
                else {
                    if ((this.SocietyAffiliationField == null)) {
                        this.SocietyAffiliationField = XTypedList<SocietyAffiliation>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("SocietyAffiliation", ""));
                    }
                    else {
                        XTypedServices.SetList<SocietyAffiliation>(this.SocietyAffiliationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The number indicating the order of the ddexC:MusicalWorkContributor in a group of ddex:MusicalWorkContributors that have contributed to a ddex:MusicalWork. This is represented in an XML schema as an XML ddex:Attribute. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> SequenceNumber {
            get {
                XAttribute x = this.Attribute(XName.Get("SequenceNumber", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("SequenceNumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MusicalWorkContributor", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MusicalWorkContributor>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("PartyId", ""), typeof(PartyId));
            localElementDictionary.Add(XName.Get("PartyName", ""), typeof(PartyName));
            localElementDictionary.Add(XName.Get("MusicalWorkContributorRole", ""), typeof(MusicalWorkContributorRole));
            localElementDictionary.Add(XName.Get("SocietyAffiliation", ""), typeof(SocietyAffiliation));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:MusicalWorkContributorRole. Note: This can be used in a ddex:DdexMessage in relation to any ddex:Work, ddex:Performance or ddex:Fixation any of which may form the whole or part of the ddex:Resource itself. Example: if an 'AssociatedPerformer' is shown as a ddex:Contributor to a ddex:MusicalWork it refers to a performer of a ddex:Resource (e.g. a ddex:SoundRecording) expressing the ddex:MusicalWork.
    /// </para>
    /// </summary>
    public partial class MusicalWorkContributorRole : XTypedElement, IXMetaData {
        
         public static explicit operator MusicalWorkContributorRole(XElement xe) { return XTypedServices.ToXTypedElement<MusicalWorkContributorRole>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:MusicalWorkContributorRole. Note: This can be used in a ddex:DdexMessage in relation to any ddex:Work, ddex:Performance or ddex:Fixation any of which may form the whole or part of the ddex:Resource itself. Example: if an 'AssociatedPerformer' is shown as a ddex:Contributor to a ddex:MusicalWork it refers to a performer of a ddex:Resource (e.g. a ddex:SoundRecording) expressing the ddex:MusicalWork.
        /// </para>
        /// </summary>
        public MusicalWorkContributorRole() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.MusicalWorkContributorRole.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddexC:MusicalWorkContributorRole. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UserDefined value of the ddexC:MusicalWorkContributorRole. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserDefinedValue {
            get {
                XAttribute x = this.Attribute(XName.Get("UserDefinedValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserDefinedValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MusicalWorkContributorRole", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MusicalWorkContributorRole>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of ddex:Descriptors and other attributes of a ddex:MusicalWork which may vary according to ddex:Territory of release. 
    /// </para>
    /// <para>
    /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), MusicalWorkContributor+)
    /// </para>
    /// </summary>
    public partial class MusicalWorkDetailsByTerritory : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<object> TerritoryCodeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<object> ExcludedTerritoryCodeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<MusicalWorkContributor> MusicalWorkContributorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator MusicalWorkDetailsByTerritory(XElement xe) { return XTypedServices.ToXTypedElement<MusicalWorkDetailsByTerritory>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MusicalWorkDetailsByTerritory() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:Descriptors and other attributes of a ddex:MusicalWork which may vary according to ddex:Territory of release. 
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), MusicalWorkContributor+)
        /// </para>
        /// </summary>
        public MusicalWorkDetailsByTerritory() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Territory to which the ddex:MusicalWork details apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:ExcludedTerritory shall be present, but not both. 
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), MusicalWorkContributor+)
        /// </para>
        /// </summary>
        public IList<object> TerritoryCode {
            get {
                if ((this.TerritoryCodeField == null)) {
                    this.TerritoryCodeField = new XSimpleList<object>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, XName.Get("TerritoryCode", ""));
                }
                return this.TerritoryCodeField;
            }
            set {
                if ((value == null)) {
                    this.TerritoryCodeField = null;
                }
                else {
                    if ((this.TerritoryCodeField == null)) {
                        this.TerritoryCodeField = XSimpleList<object>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, value, XName.Get("TerritoryCode", ""));
                    }
                    else {
                        XTypedServices.SetList<System.Object>(this.TerritoryCodeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Territory to which the ddex:MusicalWork details do not apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:Territory shall be present, but not both.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), MusicalWorkContributor+)
        /// </para>
        /// </summary>
        public IList<object> ExcludedTerritoryCode {
            get {
                if ((this.ExcludedTerritoryCodeField == null)) {
                    this.ExcludedTerritoryCodeField = new XSimpleList<object>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, XName.Get("ExcludedTerritoryCode", ""));
                }
                return this.ExcludedTerritoryCodeField;
            }
            set {
                if ((value == null)) {
                    this.ExcludedTerritoryCodeField = null;
                }
                else {
                    if ((this.ExcludedTerritoryCodeField == null)) {
                        this.ExcludedTerritoryCodeField = XSimpleList<object>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, value, XName.Get("ExcludedTerritoryCode", ""));
                    }
                    else {
                        XTypedServices.SetList<System.Object>(this.ExcludedTerritoryCodeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details a ddex:MusicalWorkContributor to the ddex:MusicalWork.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), MusicalWorkContributor+)
        /// </para>
        /// </summary>
        public IList<MusicalWorkContributor> MusicalWorkContributor {
            get {
                if ((this.MusicalWorkContributorField == null)) {
                    this.MusicalWorkContributorField = new XTypedList<MusicalWorkContributor>(this, LinqToXsdTypeManager.Instance, XName.Get("MusicalWorkContributor", ""));
                }
                return this.MusicalWorkContributorField;
            }
            set {
                if ((value == null)) {
                    this.MusicalWorkContributorField = null;
                }
                else {
                    if ((this.MusicalWorkContributorField == null)) {
                        this.MusicalWorkContributorField = XTypedList<MusicalWorkContributor>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("MusicalWorkContributor", ""));
                    }
                    else {
                        XTypedServices.SetList<MusicalWorkContributor>(this.MusicalWorkContributorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the ddexC:MusicalWorkDetailsByTerritory as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MusicalWorkDetailsByTerritory", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MusicalWorkDetailsByTerritory>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("TerritoryCode", ""), typeof(object));
            localElementDictionary.Add(XName.Get("ExcludedTerritoryCode", ""), typeof(object));
            localElementDictionary.Add(XName.Get("MusicalWorkContributor", ""), typeof(MusicalWorkContributor));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:MusicalWorkId.
    /// </para>
    /// <para>
    /// Regular expression: (ISWC?, OpusNumber?, ComposerCatalogNumber*, ProprietaryId*)
    /// </para>
    /// </summary>
    public partial class MusicalWorkId : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> ComposerCatalogNumberField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ProprietaryId> ProprietaryIdField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator MusicalWorkId(XElement xe) { return XTypedServices.ToXTypedElement<MusicalWorkId>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MusicalWorkId() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ISWC", "")), new NamedContentModelEntity(XName.Get("OpusNumber", "")), new NamedContentModelEntity(XName.Get("ComposerCatalogNumber", "")), new NamedContentModelEntity(XName.Get("ProprietaryId", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:MusicalWorkId.
        /// </para>
        /// <para>
        /// Regular expression: (ISWC?, OpusNumber?, ComposerCatalogNumber*, ProprietaryId*)
        /// </para>
        /// </summary>
        public MusicalWorkId() {
        }
        
        /// <summary>
        /// <para>
        /// The ddex:ISWC (International Standard Musical ddex:Work Code defined in ISO 15707) identifying the ddex:MusicalWork. An ddex:ISWC comprises three parts: the letter 'T', followed by nine digits and then one check digit.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ISWC?, OpusNumber?, ComposerCatalogNumber*, ProprietaryId*)
        /// </para>
        /// </summary>
        public string ISWC {
            get {
                XElement x = this.GetElement(XName.Get("ISWC", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("ISWC", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddexC:MusicalWorkId identifying the ddex:MusicalWork within the catalog of its ddex:Composer (typically of classical music) as an opus number.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ISWC?, OpusNumber?, ComposerCatalogNumber*, ProprietaryId*)
        /// </para>
        /// </summary>
        public string OpusNumber {
            get {
                XElement x = this.GetElement(XName.Get("OpusNumber", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("OpusNumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddexC:MusicalWorkId identifying a ddex:MusicalWork within the catalog of its ddex:Composer (typically of classical music) according to a standardized numbering (e.g. 'K' numbers for Koechel's catalog of Mozart).
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ISWC?, OpusNumber?, ComposerCatalogNumber*, ProprietaryId*)
        /// </para>
        /// </summary>
        public IList<string> ComposerCatalogNumber {
            get {
                if ((this.ComposerCatalogNumberField == null)) {
                    this.ComposerCatalogNumberField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("ComposerCatalogNumber", ""));
                }
                return this.ComposerCatalogNumberField;
            }
            set {
                if ((value == null)) {
                    this.ComposerCatalogNumberField = null;
                }
                else {
                    if ((this.ComposerCatalogNumberField == null)) {
                        this.ComposerCatalogNumberField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("ComposerCatalogNumber", ""));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.ComposerCatalogNumberField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:ProprietaryIdentifier of the ddex:MusicalWork.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ISWC?, OpusNumber?, ComposerCatalogNumber*, ProprietaryId*)
        /// </para>
        /// </summary>
        public IList<ProprietaryId> ProprietaryId {
            get {
                if ((this.ProprietaryIdField == null)) {
                    this.ProprietaryIdField = new XTypedList<ProprietaryId>(this, LinqToXsdTypeManager.Instance, XName.Get("ProprietaryId", ""));
                }
                return this.ProprietaryIdField;
            }
            set {
                if ((value == null)) {
                    this.ProprietaryIdField = null;
                }
                else {
                    if ((this.ProprietaryIdField == null)) {
                        this.ProprietaryIdField = XTypedList<ProprietaryId>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ProprietaryId", ""));
                    }
                    else {
                        XTypedServices.SetList<ProprietaryId>(this.ProprietaryIdField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether this ddex:Identifier is old and has been replaced by a new one (=True) or not (=False). The ddex:Flag may only be set to True when the new ddex:Identifier is also provided. If the ddex:Flag is not set, this ddex:Identifier is deemed to be the current one.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsReplaced {
            get {
                XAttribute x = this.Attribute(XName.Get("IsReplaced", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("IsReplaced", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MusicalWorkId", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MusicalWorkId>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ISWC", ""), typeof(string));
            localElementDictionary.Add(XName.Get("OpusNumber", ""), typeof(string));
            localElementDictionary.Add(XName.Get("ComposerCatalogNumber", ""), typeof(string));
            localElementDictionary.Add(XName.Get("ProprietaryId", ""), typeof(ProprietaryId));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:MusicalWorkType.
    /// </para>
    /// </summary>
    public partial class MusicalWorkType : XTypedElement, IXMetaData {
        
         public static explicit operator MusicalWorkType(XElement xe) { return XTypedServices.ToXTypedElement<MusicalWorkType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:MusicalWorkType.
        /// </para>
        /// </summary>
        public MusicalWorkType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.MusicalWorkType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddexC:MusicalWorkType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UserDefined value of the ddexC:MusicalWorkType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserDefinedValue {
            get {
                XAttribute x = this.Attribute(XName.Get("UserDefinedValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserDefinedValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MusicalWorkType", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MusicalWorkType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:Name.
    /// </para>
    /// </summary>
    public partial class Name : XTypedElement, IXMetaData {
        
         public static explicit operator Name(XElement xe) { return XTypedServices.ToXTypedElement<Name>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Name.
        /// </para>
        /// </summary>
        public Name() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script of the ddexC:Name as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Name", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Name>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing a ddex:NumberOfDataMismatchItems.
    /// </para>
    /// </summary>
    public partial class NumberOfDataMismatchItems : XTypedElement, IXMetaData {
        
         public static explicit operator NumberOfDataMismatchItems(XElement xe) { return XTypedServices.ToXTypedElement<NumberOfDataMismatchItems>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a ddex:NumberOfDataMismatchItems.
        /// </para>
        /// </summary>
        public NumberOfDataMismatchItems() {
        }
        
        public decimal TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A status of the DataMismatch(es). This is represented in an XML schema as an XML ddex:Attribute. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DataMismatchStatus {
            get {
                XAttribute x = this.Attribute(XName.Get("DataMismatchStatus", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DataMismatchStatus", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("NumberOfDataMismatchItems", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<NumberOfDataMismatchItems>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing a ddex:NumberOfSubscribers (applicable only where a ddex:Subscription ddex:Service is employed).
    /// </para>
    /// <para>
    /// Regular expression: (Quantity, UseType+, UserInterfaceType*, DistributionChannelType*, CarrierType*)
    /// </para>
    /// </summary>
    public partial class NumberOfSubscribers : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UseType> UseTypeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UserInterfaceType> UserInterfaceTypeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DistributionChannelType> DistributionChannelTypeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CarrierType> CarrierTypeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator NumberOfSubscribers(XElement xe) { return XTypedServices.ToXTypedElement<NumberOfSubscribers>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static NumberOfSubscribers() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Quantity", "")), new NamedContentModelEntity(XName.Get("UseType", "")), new NamedContentModelEntity(XName.Get("UserInterfaceType", "")), new NamedContentModelEntity(XName.Get("DistributionChannelType", "")), new NamedContentModelEntity(XName.Get("CarrierType", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a ddex:NumberOfSubscribers (applicable only where a ddex:Subscription ddex:Service is employed).
        /// </para>
        /// <para>
        /// Regular expression: (Quantity, UseType+, UserInterfaceType*, DistributionChannelType*, CarrierType*)
        /// </para>
        /// </summary>
        public NumberOfSubscribers() {
        }
        
        /// <summary>
        /// <para>
        /// The number of ddex:Consumers using the ddex:DSP service specified for the ddex:UseType.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Quantity, UseType+, UserInterfaceType*, DistributionChannelType*, CarrierType*)
        /// </para>
        /// </summary>
        public decimal Quantity {
            get {
                XElement x = this.GetElement(XName.Get("Quantity", ""));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElement(XName.Get("Quantity", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a nature of a ddex:Service, or a ddex:Release, as used by a ddex:Consumer.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Quantity, UseType+, UserInterfaceType*, DistributionChannelType*, CarrierType*)
        /// </para>
        /// </summary>
        public IList<UseType> UseType {
            get {
                if ((this.UseTypeField == null)) {
                    this.UseTypeField = new XTypedList<UseType>(this, LinqToXsdTypeManager.Instance, XName.Get("UseType", ""));
                }
                return this.UseTypeField;
            }
            set {
                if ((value == null)) {
                    this.UseTypeField = null;
                }
                else {
                    if ((this.UseTypeField == null)) {
                        this.UseTypeField = XTypedList<UseType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("UseType", ""));
                    }
                    else {
                        XTypedServices.SetList<UseType>(this.UseTypeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a physical interface by which a ddex:Consumer uses a ddex:Service or ddex:Release.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Quantity, UseType+, UserInterfaceType*, DistributionChannelType*, CarrierType*)
        /// </para>
        /// </summary>
        public IList<UserInterfaceType> UserInterfaceType {
            get {
                if ((this.UserInterfaceTypeField == null)) {
                    this.UserInterfaceTypeField = new XTypedList<UserInterfaceType>(this, LinqToXsdTypeManager.Instance, XName.Get("UserInterfaceType", ""));
                }
                return this.UserInterfaceTypeField;
            }
            set {
                if ((value == null)) {
                    this.UserInterfaceTypeField = null;
                }
                else {
                    if ((this.UserInterfaceTypeField == null)) {
                        this.UserInterfaceTypeField = XTypedList<UserInterfaceType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("UserInterfaceType", ""));
                    }
                    else {
                        XTypedServices.SetList<UserInterfaceType>(this.UserInterfaceTypeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a distribution channel used to disseminate a ddex:Service or ddex:Release to a ddex:Consumer.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Quantity, UseType+, UserInterfaceType*, DistributionChannelType*, CarrierType*)
        /// </para>
        /// </summary>
        public IList<DistributionChannelType> DistributionChannelType {
            get {
                if ((this.DistributionChannelTypeField == null)) {
                    this.DistributionChannelTypeField = new XTypedList<DistributionChannelType>(this, LinqToXsdTypeManager.Instance, XName.Get("DistributionChannelType", ""));
                }
                return this.DistributionChannelTypeField;
            }
            set {
                if ((value == null)) {
                    this.DistributionChannelTypeField = null;
                }
                else {
                    if ((this.DistributionChannelTypeField == null)) {
                        this.DistributionChannelTypeField = XTypedList<DistributionChannelType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("DistributionChannelType", ""));
                    }
                    else {
                        XTypedServices.SetList<DistributionChannelType>(this.DistributionChannelTypeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Carrier.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Quantity, UseType+, UserInterfaceType*, DistributionChannelType*, CarrierType*)
        /// </para>
        /// </summary>
        public IList<CarrierType> CarrierType {
            get {
                if ((this.CarrierTypeField == null)) {
                    this.CarrierTypeField = new XTypedList<CarrierType>(this, LinqToXsdTypeManager.Instance, XName.Get("CarrierType", ""));
                }
                return this.CarrierTypeField;
            }
            set {
                if ((value == null)) {
                    this.CarrierTypeField = null;
                }
                else {
                    if ((this.CarrierTypeField == null)) {
                        this.CarrierTypeField = XTypedList<CarrierType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CarrierType", ""));
                    }
                    else {
                        XTypedServices.SetList<CarrierType>(this.CarrierTypeField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("NumberOfSubscribers", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<NumberOfSubscribers>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Quantity", ""), typeof(decimal));
            localElementDictionary.Add(XName.Get("UseType", ""), typeof(UseType));
            localElementDictionary.Add(XName.Get("UserInterfaceType", ""), typeof(UserInterfaceType));
            localElementDictionary.Add(XName.Get("DistributionChannelType", ""), typeof(DistributionChannelType));
            localElementDictionary.Add(XName.Get("CarrierType", ""), typeof(CarrierType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of an ddex:OperatingSystemType.
    /// </para>
    /// </summary>
    public partial class OperatingSystemType : XTypedElement, IXMetaData {
        
         public static explicit operator OperatingSystemType(XElement xe) { return XTypedServices.ToXTypedElement<OperatingSystemType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of an ddex:OperatingSystemType.
        /// </para>
        /// </summary>
        public OperatingSystemType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.OperatingSystemType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Identifier of the ddex:Version of the ddexC:OperatingSystemType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Version {
            get {
                XAttribute x = this.Attribute(XName.Get("Version", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Version", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddexC:OperatingSystemType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UserDefined value of the ddexC:OperatingSystemType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserDefinedValue {
            get {
                XAttribute x = this.Attribute(XName.Get("UserDefinedValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserDefinedValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("OperatingSystemType", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<OperatingSystemType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:OrderType.
    /// </para>
    /// </summary>
    public partial class OrderType : XTypedElement, IXMetaData {
        
         public static explicit operator OrderType(XElement xe) { return XTypedServices.ToXTypedElement<OrderType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:OrderType.
        /// </para>
        /// </summary>
        public OrderType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.OrderType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddex:OrderType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UserDefined value of the ddex:OrderType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserDefinedValue {
            get {
                XAttribute x = this.Attribute(XName.Get("UserDefinedValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserDefinedValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("OrderType", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<OrderType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:PLine.
    /// </para>
    /// <para>
    /// Regular expression: (Year?, PLineCompany?, PLineText)
    /// </para>
    /// </summary>
    public partial class PLine : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator PLine(XElement xe) { return XTypedServices.ToXTypedElement<PLine>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PLine() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Year", "")), new NamedContentModelEntity(XName.Get("PLineCompany", "")), new NamedContentModelEntity(XName.Get("PLineText", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:PLine.
        /// </para>
        /// <para>
        /// Regular expression: (Year?, PLineCompany?, PLineText)
        /// </para>
        /// </summary>
        public PLine() {
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Year of the ddexC:PLine.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Year?, PLineCompany?, PLineText)
        /// </para>
        /// </summary>
        public System.Nullable<System.DateTime> Year {
            get {
                XElement x = this.GetElement(XName.Get("Year", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.GYear).Datatype);
            }
            set {
                this.SetElement(XName.Get("Year", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.GYear).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Name of the company releasing the ddex:Creation. This may be an owner or a licensee of the ddex:Creation.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Year?, PLineCompany?, PLineText)
        /// </para>
        /// </summary>
        public string PLineCompany {
            get {
                XElement x = this.GetElement(XName.Get("PLineCompany", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("PLineCompany", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The text of the ddexC:PLine. (Note: DDEX expects to deprecate the use of the PLineText element in a subsequent version of this standard. It will be deprecated once users of the standard are able to provide PLine information in a structured form.)
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Year?, PLineCompany?, PLineText)
        /// </para>
        /// </summary>
        public string PLineText {
            get {
                XElement x = this.GetElement(XName.Get("PLineText", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("PLineText", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script of the ddex:PLineText as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Type of ddex:PLine. This is represented in an XML schema as an XML ddex:Attribute. If this ddex:Attribute is not provided, it is assumed that the ddex:PLine is a ddex:OriginalPLine.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string PLineType {
            get {
                XAttribute x = this.Attribute(XName.Get("PLineType", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("PLineType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("PLine", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PLine>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Year", ""), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("PLineCompany", ""), typeof(string));
            localElementDictionary.Add(XName.Get("PLineText", ""), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:ParentalWarningType.
    /// </para>
    /// </summary>
    public partial class ParentalWarningType : XTypedElement, IXMetaData {
        
         public static explicit operator ParentalWarningType(XElement xe) { return XTypedServices.ToXTypedElement<ParentalWarningType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:ParentalWarningType.
        /// </para>
        /// </summary>
        public ParentalWarningType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.ParentalWarningType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddexC:ParentalWarningType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UserDefined value of the ddexC:ParentalWarningType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserDefinedValue {
            get {
                XAttribute x = this.Attribute(XName.Get("UserDefinedValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserDefinedValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ParentalWarningType", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ParentalWarningType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:Party. Parties are typically described through ddex:Names and/or ddex:Identifiers.
    /// </para>
    /// <para>
    /// Regular expression: (PartyId | (PartyName+, PartyId?))
    /// </para>
    /// </summary>
    public partial class PartyDescriptor : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PartyId> PartyIdField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PartyName> PartyNameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator PartyDescriptor(XElement xe) { return XTypedServices.ToXTypedElement<PartyDescriptor>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PartyDescriptor() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Party. Parties are typically described through ddex:Names and/or ddex:Identifiers.
        /// </para>
        /// <para>
        /// Regular expression: (PartyId | (PartyName+, PartyId?))
        /// </para>
        /// </summary>
        public PartyDescriptor() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:PartyId for the ddex:Party. If no ddex:Namespace is given, the ddex:Identifier is a ddex:DdexPartyId (DPID). Note that DPIDs are not normally used to identify ddex:Artists, ddex:Producers or other ddex:Creators.
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (PartyId | (PartyName+, PartyId?))
        /// </para>
        /// </summary>
        public IList<PartyId> PartyId {
            get {
                if ((this.PartyIdField == null)) {
                    this.PartyIdField = new XTypedList<PartyId>(this, LinqToXsdTypeManager.Instance, XName.Get("PartyId", ""));
                }
                return this.PartyIdField;
            }
            set {
                if ((value == null)) {
                    this.PartyIdField = null;
                }
                else {
                    if ((this.PartyIdField == null)) {
                        this.PartyIdField = XTypedList<PartyId>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("PartyId", ""));
                    }
                    else {
                        XTypedServices.SetList<PartyId>(this.PartyIdField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the PartyName(s).
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (PartyId | (PartyName+, PartyId?))
        /// </para>
        /// </summary>
        public IList<PartyName> PartyName {
            get {
                if ((this.PartyNameField == null)) {
                    this.PartyNameField = new XTypedList<PartyName>(this, LinqToXsdTypeManager.Instance, XName.Get("PartyName", ""));
                }
                return this.PartyNameField;
            }
            set {
                if ((value == null)) {
                    this.PartyNameField = null;
                }
                else {
                    if ((this.PartyNameField == null)) {
                        this.PartyNameField = XTypedList<PartyName>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("PartyName", ""));
                    }
                    else {
                        XTypedServices.SetList<PartyName>(this.PartyNameField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("PartyDescriptor", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PartyDescriptor>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("PartyId", ""), typeof(PartyId));
            localElementDictionary.Add(XName.Get("PartyName", ""), typeof(PartyName));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:PartyId. If no ddex:Namespace is given, the ddex:Identifier is a ddex:DdexPartyId (DPID). Note that DPIDs are not normally used to identify ddex:Artists, ddex:Producers or other ddex:Creators.
    /// </para>
    /// </summary>
    public partial class PartyId : XTypedElement, IXMetaData {
        
         public static explicit operator PartyId(XElement xe) { return XTypedServices.ToXTypedElement<PartyId>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:PartyId. If no ddex:Namespace is given, the ddex:Identifier is a ddex:DdexPartyId (DPID). Note that DPIDs are not normally used to identify ddex:Artists, ddex:Producers or other ddex:Creators.
        /// </para>
        /// </summary>
        public PartyId() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddexC:PartyId if it belongs to a proprietary ddex:Party xs:ID scheme. If the ddexC:PartyId is a DPID, the ddex:Namespace ddex:Element must not be used. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ddexC:PartyId is a ddex:DPID (=True) or not (=False). This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsDPID {
            get {
                XAttribute x = this.Attribute(XName.Get("IsDPID", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("IsDPID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ddexC:PartyId is an ddex:ISNI (=True) or not (=False). This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsISNI {
            get {
                XAttribute x = this.Attribute(XName.Get("IsISNI", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("IsISNI", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("PartyId", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PartyId>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:PartyName. ddex:Name details for a ddex:Party typically either contain a ddex:FullName or a ddex:KeyName.
    /// </para>
    /// <para>
    /// Regular expression: (FullName, FullNameAsciiTranscribed?, FullNameIndexed?, NamesBeforeKeyName?, KeyName?, NamesAfterKeyName?, AbbreviatedName?)
    /// </para>
    /// </summary>
    public partial class PartyName : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator PartyName(XElement xe) { return XTypedServices.ToXTypedElement<PartyName>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PartyName() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("FullName", "")), new NamedContentModelEntity(XName.Get("FullNameAsciiTranscribed", "")), new NamedContentModelEntity(XName.Get("FullNameIndexed", "")), new NamedContentModelEntity(XName.Get("NamesBeforeKeyName", "")), new NamedContentModelEntity(XName.Get("KeyName", "")), new NamedContentModelEntity(XName.Get("NamesAfterKeyName", "")), new NamedContentModelEntity(XName.Get("AbbreviatedName", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:PartyName. ddex:Name details for a ddex:Party typically either contain a ddex:FullName or a ddex:KeyName.
        /// </para>
        /// <para>
        /// Regular expression: (FullName, FullNameAsciiTranscribed?, FullNameIndexed?, NamesBeforeKeyName?, KeyName?, NamesAfterKeyName?, AbbreviatedName?)
        /// </para>
        /// </summary>
        public PartyName() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing the complete ddex:Name of the ddex:Party, in its normal form of presentation (e.g. John H. Smith, Acme Music Inc, A ddex:Composite containing the Beatles).
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (FullName, FullNameAsciiTranscribed?, FullNameIndexed?, NamesBeforeKeyName?, KeyName?, NamesAfterKeyName?, AbbreviatedName?)
        /// </para>
        /// </summary>
        public Name FullName {
            get {
                XElement x = this.GetElement(XName.Get("FullName", ""));
                return ((Name)(x));
            }
            set {
                this.SetElement(XName.Get("FullName", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:FullName transcribed using 7-bit ddex:ASCII code.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FullName, FullNameAsciiTranscribed?, FullNameIndexed?, NamesBeforeKeyName?, KeyName?, NamesAfterKeyName?, AbbreviatedName?)
        /// </para>
        /// </summary>
        public string FullNameAsciiTranscribed {
            get {
                XElement x = this.GetElement(XName.Get("FullNameAsciiTranscribed", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("FullNameAsciiTranscribed", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing the complete ddex:Name of the ddex:Party in the form in which it normally appears in an alphabetic index, with the ddex:KeyName first (e.g. Smith, John H.; Beatles, A ddex:Composite containing the).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FullName, FullNameAsciiTranscribed?, FullNameIndexed?, NamesBeforeKeyName?, KeyName?, NamesAfterKeyName?, AbbreviatedName?)
        /// </para>
        /// </summary>
        public Name FullNameIndexed {
            get {
                XElement x = this.GetElement(XName.Get("FullNameIndexed", ""));
                return ((Name)(x));
            }
            set {
                this.SetElement(XName.Get("FullNameIndexed", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing the Name(s) preceding the ddex:KeyName in the ddex:FullName (and that is placed after it in a ddex:FullNameIndexed). Examples: 'George' in 'George Michael'; 'John Fitzgerald' in 'John Fitzgerald Kennedy'. Not all ddex:PartyNames have a ddex:NamesBeforeKeyName (e.g. Madonna, EMI Music Inc).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FullName, FullNameAsciiTranscribed?, FullNameIndexed?, NamesBeforeKeyName?, KeyName?, NamesAfterKeyName?, AbbreviatedName?)
        /// </para>
        /// </summary>
        public Name NamesBeforeKeyName {
            get {
                XElement x = this.GetElement(XName.Get("NamesBeforeKeyName", ""));
                return ((Name)(x));
            }
            set {
                this.SetElement(XName.Get("NamesBeforeKeyName", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing the ddex:Part of a ddex:Name of the ddex:Party normally used to index an entry in an alphabetical list, such as 'Smith' (in John Smith) or 'Garcia Marquez' or 'Madonna' or 'Francis de Sales' (in Saint Francis de Sales). For persons, this normally corresponds to the 'family name' or names, which in Western name forms usually comes as a surname at the end of a ddex:FullName, and in Asian name forms often at the beginning of a ddex:FullName. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FullName, FullNameAsciiTranscribed?, FullNameIndexed?, NamesBeforeKeyName?, KeyName?, NamesAfterKeyName?, AbbreviatedName?)
        /// </para>
        /// </summary>
        public Name KeyName {
            get {
                XElement x = this.GetElement(XName.Get("KeyName", ""));
                return ((Name)(x));
            }
            set {
                this.SetElement(XName.Get("KeyName", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing the Name(s) following the ddex:KeyName. Example:'Ibrahim' (in Anwar Ibrahim). This is common, e.g., in many Asian personal name forms where a ddex:FullName begins with the ddex:KeyName, which is followed by other names.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FullName, FullNameAsciiTranscribed?, FullNameIndexed?, NamesBeforeKeyName?, KeyName?, NamesAfterKeyName?, AbbreviatedName?)
        /// </para>
        /// </summary>
        public Name NamesAfterKeyName {
            get {
                XElement x = this.GetElement(XName.Get("NamesAfterKeyName", ""));
                return ((Name)(x));
            }
            set {
                this.SetElement(XName.Get("NamesAfterKeyName", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a short version of the ddexC:PartyName (e.g. for use on devices with a small display).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FullName, FullNameAsciiTranscribed?, FullNameIndexed?, NamesBeforeKeyName?, KeyName?, NamesAfterKeyName?, AbbreviatedName?)
        /// </para>
        /// </summary>
        public Name AbbreviatedName {
            get {
                XElement x = this.GetElement(XName.Get("AbbreviatedName", ""));
                return ((Name)(x));
            }
            set {
                this.SetElement(XName.Get("AbbreviatedName", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the ddexC:PartyName as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("PartyName", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PartyName>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("FullName", ""), typeof(Name));
            localElementDictionary.Add(XName.Get("FullNameAsciiTranscribed", ""), typeof(string));
            localElementDictionary.Add(XName.Get("FullNameIndexed", ""), typeof(Name));
            localElementDictionary.Add(XName.Get("NamesBeforeKeyName", ""), typeof(Name));
            localElementDictionary.Add(XName.Get("KeyName", ""), typeof(Name));
            localElementDictionary.Add(XName.Get("NamesAfterKeyName", ""), typeof(Name));
            localElementDictionary.Add(XName.Get("AbbreviatedName", ""), typeof(Name));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details about a ddex:Period of ddex:Time. ddex:Periods are typically described by at least a ddex:StartDate or ddex:EndDate.
    /// </para>
    /// <para>
    /// Regular expression: ((StartDate?, EndDate?)|(StartDateTime?, EndDateTime?))
    /// </para>
    /// </summary>
    public partial class Period : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator Period(XElement xe) { return XTypedServices.ToXTypedElement<Period>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Period() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details about a ddex:Period of ddex:Time. ddex:Periods are typically described by at least a ddex:StartDate or ddex:EndDate.
        /// </para>
        /// <para>
        /// Regular expression: ((StartDate?, EndDate?)|(StartDateTime?, EndDateTime?))
        /// </para>
        /// </summary>
        public Period() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the Date and ddex:Place of an ddex:Event that marks the beginning of the ddexC:Period (in ISO 8601:2004 format: YYYY-MM-DD). The ddex:StartDate must be earlier than the ddex:EndDate if both are provided.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((StartDate?, EndDate?)|(StartDateTime?, EndDateTime?))
        /// </para>
        /// </summary>
        public EventDate StartDate {
            get {
                XElement x = this.GetElement(XName.Get("StartDate", ""));
                return ((EventDate)(x));
            }
            set {
                this.SetElement(XName.Get("StartDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the Date and ddex:Place of an ddex:Event that marks the end of the ddexC:Period (in ISO 8601:2004 format: YYYY-MM-DD). The ddex:EndDate must be later than the ddex:StartDate if both are provided.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((StartDate?, EndDate?)|(StartDateTime?, EndDateTime?))
        /// </para>
        /// </summary>
        public EventDate EndDate {
            get {
                XElement x = this.GetElement(XName.Get("EndDate", ""));
                return ((EventDate)(x));
            }
            set {
                this.SetElement(XName.Get("EndDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:DateTime and ddex:Place of an ddex:Event that marks the beginning of the ddexC:Period (in ISO 8601:2004 format: YYYY-DD-MMThh:mm:ss). The StartDateTime must be earlier than the EndDateTime if both are provided.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((StartDate?, EndDate?)|(StartDateTime?, EndDateTime?))
        /// </para>
        /// </summary>
        public EventDateTime StartDateTime {
            get {
                XElement x = this.GetElement(XName.Get("StartDateTime", ""));
                return ((EventDateTime)(x));
            }
            set {
                this.SetElement(XName.Get("StartDateTime", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:DateTime and ddex:Place of an ddex:Event that marks the end of the ddexC:Period (in ISO 8601:2004 format: YYYY-DD-MMThh:mm:ss). The EndDateTime must be later than the StartDateTime if both are provided.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((StartDate?, EndDate?)|(StartDateTime?, EndDateTime?))
        /// </para>
        /// </summary>
        public EventDateTime EndDateTime {
            get {
                XElement x = this.GetElement(XName.Get("EndDateTime", ""));
                return ((EventDateTime)(x));
            }
            set {
                this.SetElement(XName.Get("EndDateTime", ""), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Period", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Period>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("StartDate", ""), typeof(EventDate));
            localElementDictionary.Add(XName.Get("EndDate", ""), typeof(EventDate));
            localElementDictionary.Add(XName.Get("StartDateTime", ""), typeof(EventDateTime));
            localElementDictionary.Add(XName.Get("EndDateTime", ""), typeof(EventDateTime));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:Price.
    /// </para>
    /// </summary>
    public partial class Price : XTypedElement, IXMetaData {
        
         public static explicit operator Price(XElement xe) { return XTypedServices.ToXTypedElement<Price>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Price.
        /// </para>
        /// </summary>
        public Price() {
        }
        
        public decimal TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Currency of the ddexC:Price (represented by an ISO 4217 iso4217a:CurrencyCode). This is represented in an XML schema as an XML ddex:Attribute. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public object CurrencyCode {
            get {
                XAttribute x = this.Attribute(XName.Get("CurrencyCode", ""));
                return XTypedServices.ParseUnionValue(x, global::ddex_net.xml._20120404.ddexC.CurrencyCode.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "CurrencyCode", this, XName.Get("CurrencyCode", ""), global::ddex_net.xml._20120404.ddexC.CurrencyCode.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Price", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Price>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:PriceConsumerPaidExcSalesTax.
    /// </para>
    /// </summary>
    public partial class PriceConsumerPaidExcSalesTax : XTypedElement, IXMetaData {
        
         public static explicit operator PriceConsumerPaidExcSalesTax(XElement xe) { return XTypedServices.ToXTypedElement<PriceConsumerPaidExcSalesTax>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:PriceConsumerPaidExcSalesTax.
        /// </para>
        /// </summary>
        public PriceConsumerPaidExcSalesTax() {
        }
        
        public decimal TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Currency of the ddex:Price (represented by an ISO 4217 iso4217a:CurrencyCode). This is represented in an XML schema as an XML ddex:Attribute. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object CurrencyCode {
            get {
                XAttribute x = this.Attribute(XName.Get("CurrencyCode", ""));
                return XTypedServices.ParseUnionValue(x, global::ddex_net.xml._20120404.ddexC.CurrencyCode.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "CurrencyCode", this, XName.Get("CurrencyCode", ""), global::ddex_net.xml._20120404.ddexC.CurrencyCode.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("PriceConsumerPaidExcSalesTax", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PriceConsumerPaidExcSalesTax>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:Price.
    /// </para>
    /// <para>
    /// Regular expression: (Description?, PriceRangeType?, PriceType?, WholesalePricePerUnit?, BulkOrderWholesalePricePerUnit?, SuggestedRetailPrice?)
    /// </para>
    /// </summary>
    public partial class PriceInformation : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator PriceInformation(XElement xe) { return XTypedServices.ToXTypedElement<PriceInformation>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PriceInformation() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Description", "")), new NamedContentModelEntity(XName.Get("PriceRangeType", "")), new NamedContentModelEntity(XName.Get("PriceType", "")), new NamedContentModelEntity(XName.Get("WholesalePricePerUnit", "")), new NamedContentModelEntity(XName.Get("BulkOrderWholesalePricePerUnit", "")), new NamedContentModelEntity(XName.Get("SuggestedRetailPrice", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Price.
        /// </para>
        /// <para>
        /// Regular expression: (Description?, PriceRangeType?, PriceType?, WholesalePricePerUnit?, BulkOrderWholesalePricePerUnit?, SuggestedRetailPrice?)
        /// </para>
        /// </summary>
        public PriceInformation() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a ddex:Description of the differences between multiple ddexC:PriceInformation ddex:Composites.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Description?, PriceRangeType?, PriceType?, WholesalePricePerUnit?, BulkOrderWholesalePricePerUnit?, SuggestedRetailPrice?)
        /// </para>
        /// </summary>
        public Description Description {
            get {
                XElement x = this.GetElement(XName.Get("Description", ""));
                return ((Description)(x));
            }
            set {
                this.SetElement(XName.Get("Description", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a ddex:Type of ddex:Price according to its value range. Typical examples include 'budget' and 'front line'.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Description?, PriceRangeType?, PriceType?, WholesalePricePerUnit?, BulkOrderWholesalePricePerUnit?, SuggestedRetailPrice?)
        /// </para>
        /// </summary>
        public PriceRangeType PriceRangeType {
            get {
                XElement x = this.GetElement(XName.Get("PriceRangeType", ""));
                return ((PriceRangeType)(x));
            }
            set {
                this.SetElement(XName.Get("PriceRangeType", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing further details of the ddex:Price. Often used to refine the ddex:PriceRangeType.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Description?, PriceRangeType?, PriceType?, WholesalePricePerUnit?, BulkOrderWholesalePricePerUnit?, SuggestedRetailPrice?)
        /// </para>
        /// </summary>
        public PriceType PriceType {
            get {
                XElement x = this.GetElement(XName.Get("PriceType", ""));
                return ((PriceType)(x));
            }
            set {
                this.SetElement(XName.Get("PriceType", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a wholesale ddex:Price for a single unit of Usage. Note that this ddex:Price applies to all ddex:UseTypes referenced in a DealTerm ddex:Composite.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Description?, PriceRangeType?, PriceType?, WholesalePricePerUnit?, BulkOrderWholesalePricePerUnit?, SuggestedRetailPrice?)
        /// </para>
        /// </summary>
        public Price WholesalePricePerUnit {
            get {
                XElement x = this.GetElement(XName.Get("WholesalePricePerUnit", ""));
                return ((Price)(x));
            }
            set {
                this.SetElement(XName.Get("WholesalePricePerUnit", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a wholesale ddex:Price for a single unit. Note that the size of a bulk order is defined in the contract between ddex:MessageSender and the ddex:MessageRecipient.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Description?, PriceRangeType?, PriceType?, WholesalePricePerUnit?, BulkOrderWholesalePricePerUnit?, SuggestedRetailPrice?)
        /// </para>
        /// </summary>
        public Price BulkOrderWholesalePricePerUnit {
            get {
                XElement x = this.GetElement(XName.Get("BulkOrderWholesalePricePerUnit", ""));
                return ((Price)(x));
            }
            set {
                this.SetElement(XName.Get("BulkOrderWholesalePricePerUnit", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a suggested retail ddex:Price.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Description?, PriceRangeType?, PriceType?, WholesalePricePerUnit?, BulkOrderWholesalePricePerUnit?, SuggestedRetailPrice?)
        /// </para>
        /// </summary>
        public Price SuggestedRetailPrice {
            get {
                XElement x = this.GetElement(XName.Get("SuggestedRetailPrice", ""));
                return ((Price)(x));
            }
            set {
                this.SetElement(XName.Get("SuggestedRetailPrice", ""), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("PriceInformation", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PriceInformation>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Description", ""), typeof(Description));
            localElementDictionary.Add(XName.Get("PriceRangeType", ""), typeof(PriceRangeType));
            localElementDictionary.Add(XName.Get("PriceType", ""), typeof(PriceType));
            localElementDictionary.Add(XName.Get("WholesalePricePerUnit", ""), typeof(Price));
            localElementDictionary.Add(XName.Get("BulkOrderWholesalePricePerUnit", ""), typeof(Price));
            localElementDictionary.Add(XName.Get("SuggestedRetailPrice", ""), typeof(Price));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:PriceRangeType.
    /// </para>
    /// </summary>
    public partial class PriceRangeType : XTypedElement, IXMetaData {
        
         public static explicit operator PriceRangeType(XElement xe) { return XTypedServices.ToXTypedElement<PriceRangeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:PriceRangeType.
        /// </para>
        /// </summary>
        public PriceRangeType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.PriceRangeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddexC:PriceRangeType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("PriceRangeType", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PriceRangeType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:PriceType.
    /// </para>
    /// </summary>
    public partial class PriceType : XTypedElement, IXMetaData {
        
         public static explicit operator PriceType(XElement xe) { return XTypedServices.ToXTypedElement<PriceType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:PriceType.
        /// </para>
        /// </summary>
        public PriceType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.PriceType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddexC:PriceType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("PriceType", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PriceType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:ProductType.
    /// </para>
    /// </summary>
    public partial class ProductType : XTypedElement, IXMetaData {
        
         public static explicit operator ProductType(XElement xe) { return XTypedServices.ToXTypedElement<ProductType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:ProductType.
        /// </para>
        /// </summary>
        public ProductType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.ProductType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddex:ProductType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UserDefined value of the ddex:ProductType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserDefinedValue {
            get {
                XAttribute x = this.Attribute(XName.Get("UserDefinedValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserDefinedValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ProductType", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ProductType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:PromotionalCode.
    /// </para>
    /// </summary>
    public partial class PromotionalCode : XTypedElement, IXMetaData {
        
         public static explicit operator PromotionalCode(XElement xe) { return XTypedServices.ToXTypedElement<PromotionalCode>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:PromotionalCode.
        /// </para>
        /// </summary>
        public PromotionalCode() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddexC:PromotionalCode. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("PromotionalCode", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PromotionalCode>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:ProprietaryIdentifier.
    /// </para>
    /// </summary>
    public partial class ProprietaryId : XTypedElement, IXMetaData {
        
         public static explicit operator ProprietaryId(XElement xe) { return XTypedServices.ToXTypedElement<ProprietaryId>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:ProprietaryIdentifier.
        /// </para>
        /// </summary>
        public ProprietaryId() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddexC:ProprietaryId. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ProprietaryId", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ProprietaryId>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:Purpose.
    /// </para>
    /// </summary>
    public partial class Purpose : XTypedElement, IXMetaData {
        
         public static explicit operator Purpose(XElement xe) { return XTypedServices.ToXTypedElement<Purpose>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Purpose.
        /// </para>
        /// </summary>
        public Purpose() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.Purpose.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddexC:Purpose. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UserDefined value of the ddexC:Purpose. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserDefinedValue {
            get {
                XAttribute x = this.Attribute(XName.Get("UserDefinedValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserDefinedValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Purpose", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Purpose>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:RatingAgency.
    /// </para>
    /// </summary>
    public partial class RatingAgency : XTypedElement, IXMetaData {
        
         public static explicit operator RatingAgency(XElement xe) { return XTypedServices.ToXTypedElement<RatingAgency>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:RatingAgency.
        /// </para>
        /// </summary>
        public RatingAgency() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.RatingAgency.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddexC:RatingAgency. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UserDefined value of the ddexC:RatingAgency. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserDefinedValue {
            get {
                XAttribute x = this.Attribute(XName.Get("UserDefinedValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserDefinedValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("RatingAgency", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RatingAgency>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:Reason.
    /// </para>
    /// </summary>
    public partial class Reason : XTypedElement, IXMetaData {
        
         public static explicit operator Reason(XElement xe) { return XTypedServices.ToXTypedElement<Reason>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Reason.
        /// </para>
        /// </summary>
        public Reason() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script of the ddexC:Reason as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Reason", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Reason>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:ReasonType.
    /// </para>
    /// </summary>
    public partial class ReasonType : XTypedElement, IXMetaData {
        
         public static explicit operator ReasonType(XElement xe) { return XTypedServices.ToXTypedElement<ReasonType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:ReasonType.
        /// </para>
        /// </summary>
        public ReasonType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.ReasonType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddex:ReasonType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UserDefined value of the ddex:ReasonType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserDefinedValue {
            get {
                XAttribute x = this.Attribute(XName.Get("UserDefinedValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserDefinedValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ReasonType", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ReasonType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing information to support the calculation of a record company's market share of all ddex:Releases provided by a ddex:DSP to ddex:Consumers for a specified ddex:UseType.
    /// </para>
    /// <para>
    /// Regular expression: (ReleaseType*, UnitsSoldTotal, UseType*, UserInterfaceType*, DistributionChannelType*, CarrierType*)
    /// </para>
    /// </summary>
    public partial class RecordCompanyMarketShareData : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ReleaseType> ReleaseTypeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UseType> UseTypeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UserInterfaceType> UserInterfaceTypeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DistributionChannelType> DistributionChannelTypeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CarrierType> CarrierTypeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator RecordCompanyMarketShareData(XElement xe) { return XTypedServices.ToXTypedElement<RecordCompanyMarketShareData>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RecordCompanyMarketShareData() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ReleaseType", "")), new NamedContentModelEntity(XName.Get("UnitsSoldTotal", "")), new NamedContentModelEntity(XName.Get("UseType", "")), new NamedContentModelEntity(XName.Get("UserInterfaceType", "")), new NamedContentModelEntity(XName.Get("DistributionChannelType", "")), new NamedContentModelEntity(XName.Get("CarrierType", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing information to support the calculation of a record company's market share of all ddex:Releases provided by a ddex:DSP to ddex:Consumers for a specified ddex:UseType.
        /// </para>
        /// <para>
        /// Regular expression: (ReleaseType*, UnitsSoldTotal, UseType*, UserInterfaceType*, DistributionChannelType*, CarrierType*)
        /// </para>
        /// </summary>
        public RecordCompanyMarketShareData() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the form in which a ddex:ReleaseCreator anticipates offering the ddex:Release to ddex:Consumers.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ReleaseType*, UnitsSoldTotal, UseType*, UserInterfaceType*, DistributionChannelType*, CarrierType*)
        /// </para>
        /// </summary>
        public IList<ReleaseType> ReleaseType {
            get {
                if ((this.ReleaseTypeField == null)) {
                    this.ReleaseTypeField = new XTypedList<ReleaseType>(this, LinqToXsdTypeManager.Instance, XName.Get("ReleaseType", ""));
                }
                return this.ReleaseTypeField;
            }
            set {
                if ((value == null)) {
                    this.ReleaseTypeField = null;
                }
                else {
                    if ((this.ReleaseTypeField == null)) {
                        this.ReleaseTypeField = XTypedList<ReleaseType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ReleaseType", ""));
                    }
                    else {
                        XTypedServices.SetList<ReleaseType>(this.ReleaseTypeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The total number of ddex:Releases sold of the ddex:ReleaseType.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ReleaseType*, UnitsSoldTotal, UseType*, UserInterfaceType*, DistributionChannelType*, CarrierType*)
        /// </para>
        /// </summary>
        public decimal UnitsSoldTotal {
            get {
                XElement x = this.GetElement(XName.Get("UnitsSoldTotal", ""));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElement(XName.Get("UnitsSoldTotal", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a nature of a ddex:Service, or a ddex:Release, as used by a ddex:Consumer.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ReleaseType*, UnitsSoldTotal, UseType*, UserInterfaceType*, DistributionChannelType*, CarrierType*)
        /// </para>
        /// </summary>
        public IList<UseType> UseType {
            get {
                if ((this.UseTypeField == null)) {
                    this.UseTypeField = new XTypedList<UseType>(this, LinqToXsdTypeManager.Instance, XName.Get("UseType", ""));
                }
                return this.UseTypeField;
            }
            set {
                if ((value == null)) {
                    this.UseTypeField = null;
                }
                else {
                    if ((this.UseTypeField == null)) {
                        this.UseTypeField = XTypedList<UseType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("UseType", ""));
                    }
                    else {
                        XTypedServices.SetList<UseType>(this.UseTypeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a physical interface by which a ddex:Consumer uses a ddex:Service or ddex:Release.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ReleaseType*, UnitsSoldTotal, UseType*, UserInterfaceType*, DistributionChannelType*, CarrierType*)
        /// </para>
        /// </summary>
        public IList<UserInterfaceType> UserInterfaceType {
            get {
                if ((this.UserInterfaceTypeField == null)) {
                    this.UserInterfaceTypeField = new XTypedList<UserInterfaceType>(this, LinqToXsdTypeManager.Instance, XName.Get("UserInterfaceType", ""));
                }
                return this.UserInterfaceTypeField;
            }
            set {
                if ((value == null)) {
                    this.UserInterfaceTypeField = null;
                }
                else {
                    if ((this.UserInterfaceTypeField == null)) {
                        this.UserInterfaceTypeField = XTypedList<UserInterfaceType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("UserInterfaceType", ""));
                    }
                    else {
                        XTypedServices.SetList<UserInterfaceType>(this.UserInterfaceTypeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a distribution channel used to disseminate a ddex:Service or ddex:Release to a ddex:Consumer.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ReleaseType*, UnitsSoldTotal, UseType*, UserInterfaceType*, DistributionChannelType*, CarrierType*)
        /// </para>
        /// </summary>
        public IList<DistributionChannelType> DistributionChannelType {
            get {
                if ((this.DistributionChannelTypeField == null)) {
                    this.DistributionChannelTypeField = new XTypedList<DistributionChannelType>(this, LinqToXsdTypeManager.Instance, XName.Get("DistributionChannelType", ""));
                }
                return this.DistributionChannelTypeField;
            }
            set {
                if ((value == null)) {
                    this.DistributionChannelTypeField = null;
                }
                else {
                    if ((this.DistributionChannelTypeField == null)) {
                        this.DistributionChannelTypeField = XTypedList<DistributionChannelType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("DistributionChannelType", ""));
                    }
                    else {
                        XTypedServices.SetList<DistributionChannelType>(this.DistributionChannelTypeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Carrier.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ReleaseType*, UnitsSoldTotal, UseType*, UserInterfaceType*, DistributionChannelType*, CarrierType*)
        /// </para>
        /// </summary>
        public IList<CarrierType> CarrierType {
            get {
                if ((this.CarrierTypeField == null)) {
                    this.CarrierTypeField = new XTypedList<CarrierType>(this, LinqToXsdTypeManager.Instance, XName.Get("CarrierType", ""));
                }
                return this.CarrierTypeField;
            }
            set {
                if ((value == null)) {
                    this.CarrierTypeField = null;
                }
                else {
                    if ((this.CarrierTypeField == null)) {
                        this.CarrierTypeField = XTypedList<CarrierType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CarrierType", ""));
                    }
                    else {
                        XTypedServices.SetList<CarrierType>(this.CarrierTypeField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("RecordCompanyMarketShareData", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RecordCompanyMarketShareData>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ReleaseType", ""), typeof(ReleaseType));
            localElementDictionary.Add(XName.Get("UnitsSoldTotal", ""), typeof(decimal));
            localElementDictionary.Add(XName.Get("UseType", ""), typeof(UseType));
            localElementDictionary.Add(XName.Get("UserInterfaceType", ""), typeof(UserInterfaceType));
            localElementDictionary.Add(XName.Get("DistributionChannelType", ""), typeof(DistributionChannelType));
            localElementDictionary.Add(XName.Get("CarrierType", ""), typeof(CarrierType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:RedeliveryReasonType.
    /// </para>
    /// </summary>
    public partial class RedeliveryReasonType : XTypedElement, IXMetaData {
        
         public static explicit operator RedeliveryReasonType(XElement xe) { return XTypedServices.ToXTypedElement<RedeliveryReasonType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:RedeliveryReasonType.
        /// </para>
        /// </summary>
        public RedeliveryReasonType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.RedeliveryReasonType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddex:RedeliveryReasonType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UserDefined value of the ddex:RedeliveryReasonType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserDefinedValue {
            get {
                XAttribute x = this.Attribute(XName.Get("UserDefinedValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserDefinedValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("RedeliveryReasonType", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RedeliveryReasonType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:ReferenceTitle.
    /// </para>
    /// <para>
    /// Regular expression: (TitleText, SubTitle?)
    /// </para>
    /// </summary>
    public partial class ReferenceTitle : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ReferenceTitle(XElement xe) { return XTypedServices.ToXTypedElement<ReferenceTitle>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ReferenceTitle() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("TitleText", "")), new NamedContentModelEntity(XName.Get("SubTitle", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:ReferenceTitle.
        /// </para>
        /// <para>
        /// Regular expression: (TitleText, SubTitle?)
        /// </para>
        /// </summary>
        public ReferenceTitle() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing the text of the ddexC:ReferenceTitle.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TitleText, SubTitle?)
        /// </para>
        /// </summary>
        public TitleText TitleText {
            get {
                XElement x = this.GetElement(XName.Get("TitleText", ""));
                return ((TitleText)(x));
            }
            set {
                this.SetElement(XName.Get("TitleText", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:SubTitle of the ddexC:ReferenceTitle, including ddex:Titles of ddex:Versions used to differentiate different versions of the same ddex:Title, as required by the ddex:GRid and ddex:ISRC ddex:ReferenceDescriptiveMetadataSets (where the SubTitle is called ddex:Version ddex:Title).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TitleText, SubTitle?)
        /// </para>
        /// </summary>
        public SubTitle SubTitle {
            get {
                XElement x = this.GetElement(XName.Get("SubTitle", ""));
                return ((SubTitle)(x));
            }
            set {
                this.SetElement(XName.Get("SubTitle", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the ddexC:ReferenceTitle as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ReferenceTitle", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ReferenceTitle>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("TitleText", ""), typeof(TitleText));
            localElementDictionary.Add(XName.Get("SubTitle", ""), typeof(SubTitle));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a RelatedLicenseOrClaimId.
    /// </para>
    /// <para>
    /// Regular expression: (LicenseOrClaimId?, LicenseOrClaimUpdateReason?)
    /// </para>
    /// </summary>
    public partial class RelatedLicenseOrClaimId : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator RelatedLicenseOrClaimId(XElement xe) { return XTypedServices.ToXTypedElement<RelatedLicenseOrClaimId>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RelatedLicenseOrClaimId() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("LicenseOrClaimId", "")), new NamedContentModelEntity(XName.Get("LicenseOrClaimUpdateReason", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a RelatedLicenseOrClaimId.
        /// </para>
        /// <para>
        /// Regular expression: (LicenseOrClaimId?, LicenseOrClaimUpdateReason?)
        /// </para>
        /// </summary>
        public RelatedLicenseOrClaimId() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of an ddex:Identifier of the ddex:License or ddex:Claim.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (LicenseOrClaimId?, LicenseOrClaimUpdateReason?)
        /// </para>
        /// </summary>
        public RightsAgreementId LicenseOrClaimId {
            get {
                XElement x = this.GetElement(XName.Get("LicenseOrClaimId", ""));
                return ((RightsAgreementId)(x));
            }
            set {
                this.SetElement(XName.Get("LicenseOrClaimId", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a reason for an updated mwl:LicenseOrClaim.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (LicenseOrClaimId?, LicenseOrClaimUpdateReason?)
        /// </para>
        /// </summary>
        public LicenseOrClaimUpdateReason LicenseOrClaimUpdateReason {
            get {
                XElement x = this.GetElement(XName.Get("LicenseOrClaimUpdateReason", ""));
                return ((LicenseOrClaimUpdateReason)(x));
            }
            set {
                this.SetElement(XName.Get("LicenseOrClaimUpdateReason", ""), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("RelatedLicenseOrClaimId", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RelatedLicenseOrClaimId>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("LicenseOrClaimId", ""), typeof(RightsAgreementId));
            localElementDictionary.Add(XName.Get("LicenseOrClaimUpdateReason", ""), typeof(LicenseOrClaimUpdateReason));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a RelatedLicenseOrClaimRequestId.
    /// </para>
    /// <para>
    /// Regular expression: (LicenseOrClaimRequestId?, LicenseOrClaimRequestUpdateReason?)
    /// </para>
    /// </summary>
    public partial class RelatedLicenseOrClaimRequestId : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator RelatedLicenseOrClaimRequestId(XElement xe) { return XTypedServices.ToXTypedElement<RelatedLicenseOrClaimRequestId>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RelatedLicenseOrClaimRequestId() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("LicenseOrClaimRequestId", "")), new NamedContentModelEntity(XName.Get("LicenseOrClaimRequestUpdateReason", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a RelatedLicenseOrClaimRequestId.
        /// </para>
        /// <para>
        /// Regular expression: (LicenseOrClaimRequestId?, LicenseOrClaimRequestUpdateReason?)
        /// </para>
        /// </summary>
        public RelatedLicenseOrClaimRequestId() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of an ddex:Identifier of mwl:LicenseOrClaimRequest.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (LicenseOrClaimRequestId?, LicenseOrClaimRequestUpdateReason?)
        /// </para>
        /// </summary>
        public ProprietaryId LicenseOrClaimRequestId {
            get {
                XElement x = this.GetElement(XName.Get("LicenseOrClaimRequestId", ""));
                return ((ProprietaryId)(x));
            }
            set {
                this.SetElement(XName.Get("LicenseOrClaimRequestId", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a reason for an updated mwl:LicenseOrClaimRequest.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (LicenseOrClaimRequestId?, LicenseOrClaimRequestUpdateReason?)
        /// </para>
        /// </summary>
        public LicenseOrClaimRequestUpdateReason LicenseOrClaimRequestUpdateReason {
            get {
                XElement x = this.GetElement(XName.Get("LicenseOrClaimRequestUpdateReason", ""));
                return ((LicenseOrClaimRequestUpdateReason)(x));
            }
            set {
                this.SetElement(XName.Get("LicenseOrClaimRequestUpdateReason", ""), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("RelatedLicenseOrClaimRequestId", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RelatedLicenseOrClaimRequestId>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("LicenseOrClaimRequestId", ""), typeof(ProprietaryId));
            localElementDictionary.Add(XName.Get("LicenseOrClaimRequestUpdateReason", ""), typeof(LicenseOrClaimRequestUpdateReason));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:Release (or a ddex:PhysicalProduct or a ddex:DigitalProduct derived from such a ddex:Release) which is related to a ddex:Resource, ddex:Release or ddex:Product.
    /// </para>
    /// <para>
    /// Regular expression: (ReleaseId+, ReferenceTitle?, ReleaseSummaryDetailsByTerritory*, RightsAgreementId?, ReleaseRelationshipType, ReleaseDate?, OriginalReleaseDate?)
    /// </para>
    /// </summary>
    public partial class RelatedRelease : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ReleaseId> ReleaseIdField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ReleaseSummaryDetailsByTerritory> ReleaseSummaryDetailsByTerritoryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator RelatedRelease(XElement xe) { return XTypedServices.ToXTypedElement<RelatedRelease>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RelatedRelease() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ReleaseId", "")), new NamedContentModelEntity(XName.Get("ReferenceTitle", "")), new NamedContentModelEntity(XName.Get("ReleaseSummaryDetailsByTerritory", "")), new NamedContentModelEntity(XName.Get("RightsAgreementId", "")), new NamedContentModelEntity(XName.Get("ReleaseRelationshipType", "")), new NamedContentModelEntity(XName.Get("ReleaseDate", "")), new NamedContentModelEntity(XName.Get("OriginalReleaseDate", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Release (or a ddex:PhysicalProduct or a ddex:DigitalProduct derived from such a ddex:Release) which is related to a ddex:Resource, ddex:Release or ddex:Product.
        /// </para>
        /// <para>
        /// Regular expression: (ReleaseId+, ReferenceTitle?, ReleaseSummaryDetailsByTerritory*, RightsAgreementId?, ReleaseRelationshipType, ReleaseDate?, OriginalReleaseDate?)
        /// </para>
        /// </summary>
        public RelatedRelease() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:ReleaseIds. If available, a ddex:GRid shall always to be used. If the ddex:Release contains only one ddex:SoundRecording, the ddex:ISRC of the ddex:SoundRecording may be used instead. If the ddex:Release is an abstraction of a complete ddex:PhysicalProduct (such as a CD ddex:Album), the ddex:ICPN of the ddex:PhysicalProduct may be used instead. More than one of these identifiers may be provided.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ReleaseId+, ReferenceTitle?, ReleaseSummaryDetailsByTerritory*, RightsAgreementId?, ReleaseRelationshipType, ReleaseDate?, OriginalReleaseDate?)
        /// </para>
        /// </summary>
        public IList<ReleaseId> ReleaseId {
            get {
                if ((this.ReleaseIdField == null)) {
                    this.ReleaseIdField = new XTypedList<ReleaseId>(this, LinqToXsdTypeManager.Instance, XName.Get("ReleaseId", ""));
                }
                return this.ReleaseIdField;
            }
            set {
                if ((value == null)) {
                    this.ReleaseIdField = null;
                }
                else {
                    if ((this.ReleaseIdField == null)) {
                        this.ReleaseIdField = XTypedList<ReleaseId>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ReleaseId", ""));
                    }
                    else {
                        XTypedServices.SetList<ReleaseId>(this.ReleaseIdField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:ReferenceTitle of the ddex:Release.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ReleaseId+, ReferenceTitle?, ReleaseSummaryDetailsByTerritory*, RightsAgreementId?, ReleaseRelationshipType, ReleaseDate?, OriginalReleaseDate?)
        /// </para>
        /// </summary>
        public ReferenceTitle ReferenceTitle {
            get {
                XElement x = this.GetElement(XName.Get("ReferenceTitle", ""));
                return ((ReferenceTitle)(x));
            }
            set {
                this.SetElement(XName.Get("ReferenceTitle", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing summary details of ddex:Descriptors and other attributes of the ddex:Release which may vary according to ddex:Territory of ddex:Release. ddex:Territory of ddex:Release may be the world.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ReleaseId+, ReferenceTitle?, ReleaseSummaryDetailsByTerritory*, RightsAgreementId?, ReleaseRelationshipType, ReleaseDate?, OriginalReleaseDate?)
        /// </para>
        /// </summary>
        public IList<ReleaseSummaryDetailsByTerritory> ReleaseSummaryDetailsByTerritory {
            get {
                if ((this.ReleaseSummaryDetailsByTerritoryField == null)) {
                    this.ReleaseSummaryDetailsByTerritoryField = new XTypedList<ReleaseSummaryDetailsByTerritory>(this, LinqToXsdTypeManager.Instance, XName.Get("ReleaseSummaryDetailsByTerritory", ""));
                }
                return this.ReleaseSummaryDetailsByTerritoryField;
            }
            set {
                if ((value == null)) {
                    this.ReleaseSummaryDetailsByTerritoryField = null;
                }
                else {
                    if ((this.ReleaseSummaryDetailsByTerritoryField == null)) {
                        this.ReleaseSummaryDetailsByTerritoryField = XTypedList<ReleaseSummaryDetailsByTerritory>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ReleaseSummaryDetailsByTerritory", ""));
                    }
                    else {
                        XTypedServices.SetList<ReleaseSummaryDetailsByTerritory>(this.ReleaseSummaryDetailsByTerritoryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:Identifiers of a ddex:License, ddex:Claim, ddex:RightShare or contract for the MusicalWork(s) used in the ddex:Release.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ReleaseId+, ReferenceTitle?, ReleaseSummaryDetailsByTerritory*, RightsAgreementId?, ReleaseRelationshipType, ReleaseDate?, OriginalReleaseDate?)
        /// </para>
        /// </summary>
        public RightsAgreementId RightsAgreementId {
            get {
                XElement x = this.GetElement(XName.Get("RightsAgreementId", ""));
                return ((RightsAgreementId)(x));
            }
            set {
                this.SetElement(XName.Get("RightsAgreementId", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:Type of the relationship between the two ddex:Releases.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ReleaseId+, ReferenceTitle?, ReleaseSummaryDetailsByTerritory*, RightsAgreementId?, ReleaseRelationshipType, ReleaseDate?, OriginalReleaseDate?)
        /// </para>
        /// </summary>
        public ReleaseRelationshipType ReleaseRelationshipType {
            get {
                XElement x = this.GetElement(XName.Get("ReleaseRelationshipType", ""));
                return ((ReleaseRelationshipType)(x));
            }
            set {
                this.SetElement(XName.Get("ReleaseRelationshipType", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the related ddex:Release is made available for Usage.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ReleaseId+, ReferenceTitle?, ReleaseSummaryDetailsByTerritory*, RightsAgreementId?, ReleaseRelationshipType, ReleaseDate?, OriginalReleaseDate?)
        /// </para>
        /// </summary>
        public EventDate ReleaseDate {
            get {
                XElement x = this.GetElement(XName.Get("ReleaseDate", ""));
                return ((EventDate)(x));
            }
            set {
                this.SetElement(XName.Get("ReleaseDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ddex:Release was or will be first made available for Usage, whether for physical or electronic/online distribution (in ISO 8601:2004 format: YYYY-MM-DD).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ReleaseId+, ReferenceTitle?, ReleaseSummaryDetailsByTerritory*, RightsAgreementId?, ReleaseRelationshipType, ReleaseDate?, OriginalReleaseDate?)
        /// </para>
        /// </summary>
        public EventDate OriginalReleaseDate {
            get {
                XElement x = this.GetElement(XName.Get("OriginalReleaseDate", ""));
                return ((EventDate)(x));
            }
            set {
                this.SetElement(XName.Get("OriginalReleaseDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the ReleatedRelease as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("RelatedRelease", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RelatedRelease>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ReleaseId", ""), typeof(ReleaseId));
            localElementDictionary.Add(XName.Get("ReferenceTitle", ""), typeof(ReferenceTitle));
            localElementDictionary.Add(XName.Get("ReleaseSummaryDetailsByTerritory", ""), typeof(ReleaseSummaryDetailsByTerritory));
            localElementDictionary.Add(XName.Get("RightsAgreementId", ""), typeof(RightsAgreementId));
            localElementDictionary.Add(XName.Get("ReleaseRelationshipType", ""), typeof(ReleaseRelationshipType));
            localElementDictionary.Add(XName.Get("ReleaseDate", ""), typeof(EventDate));
            localElementDictionary.Add(XName.Get("OriginalReleaseDate", ""), typeof(EventDate));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:ReleaseAvailabilityStatus.
    /// </para>
    /// </summary>
    public partial class ReleaseAvailabilityStatus : XTypedElement, IXMetaData {
        
         public static explicit operator ReleaseAvailabilityStatus(XElement xe) { return XTypedServices.ToXTypedElement<ReleaseAvailabilityStatus>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:ReleaseAvailabilityStatus.
        /// </para>
        /// </summary>
        public ReleaseAvailabilityStatus() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.ReleaseAvailabilityStatus.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddex:ReleaseAvailabilityStatus. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UserDefined value of the ddex:ReleaseAvailabilityStatus. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserDefinedValue {
            get {
                XAttribute x = this.Attribute(XName.Get("UserDefinedValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserDefinedValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ReleaseAvailabilityStatus", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ReleaseAvailabilityStatus>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:ReleaseCollectionReference.
    /// </para>
    /// </summary>
    public partial class ReleaseCollectionReference : XTypedElement, IXMetaData {
        
         public static explicit operator ReleaseCollectionReference(XElement xe) { return XTypedServices.ToXTypedElement<ReleaseCollectionReference>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:ReleaseCollectionReference.
        /// </para>
        /// </summary>
        public ReleaseCollectionReference() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.LocalCollectionAnchorReference.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Type of ddex:Collection in the context of a ddex:Release. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ReleaseResourceType {
            get {
                XAttribute x = this.Attribute(XName.Get("ReleaseResourceType", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ReleaseResourceType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ReleaseCollectionReference", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ReleaseCollectionReference>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing a list of ddex:ReleaseCollectionReferences.
    /// </para>
    /// <para>
    /// Regular expression: (NumberOfCollections?, ReleaseCollectionReference+)
    /// </para>
    /// </summary>
    public partial class ReleaseCollectionReferenceList : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ReleaseCollectionReference> ReleaseCollectionReferenceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ReleaseCollectionReferenceList(XElement xe) { return XTypedServices.ToXTypedElement<ReleaseCollectionReferenceList>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ReleaseCollectionReferenceList() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("NumberOfCollections", "")), new NamedContentModelEntity(XName.Get("ReleaseCollectionReference", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a list of ddex:ReleaseCollectionReferences.
        /// </para>
        /// <para>
        /// Regular expression: (NumberOfCollections?, ReleaseCollectionReference+)
        /// </para>
        /// </summary>
        public ReleaseCollectionReferenceList() {
        }
        
        /// <summary>
        /// <para>
        /// The number of referenced ddexC:Collections (typically Chapters).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (NumberOfCollections?, ReleaseCollectionReference+)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> NumberOfCollections {
            get {
                XElement x = this.GetElement(XName.Get("NumberOfCollections", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElement(XName.Get("NumberOfCollections", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a ddex:ReleaseCollectionReference for a ddex:Collection (specific to this ddex:Message). The referenced ddex:Collection has to be of ddex:CollectionType ddex:Series, ddex:Season or ddex:Episode.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (NumberOfCollections?, ReleaseCollectionReference+)
        /// </para>
        /// </summary>
        public IList<ReleaseCollectionReference> ReleaseCollectionReference {
            get {
                if ((this.ReleaseCollectionReferenceField == null)) {
                    this.ReleaseCollectionReferenceField = new XTypedList<ReleaseCollectionReference>(this, LinqToXsdTypeManager.Instance, XName.Get("ReleaseCollectionReference", ""));
                }
                return this.ReleaseCollectionReferenceField;
            }
            set {
                if ((value == null)) {
                    this.ReleaseCollectionReferenceField = null;
                }
                else {
                    if ((this.ReleaseCollectionReferenceField == null)) {
                        this.ReleaseCollectionReferenceField = XTypedList<ReleaseCollectionReference>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ReleaseCollectionReference", ""));
                    }
                    else {
                        XTypedServices.SetList<ReleaseCollectionReference>(this.ReleaseCollectionReferenceField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ReleaseCollectionReferenceList", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ReleaseCollectionReferenceList>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("NumberOfCollections", ""), typeof(decimal));
            localElementDictionary.Add(XName.Get("ReleaseCollectionReference", ""), typeof(ReleaseCollectionReference));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of ddex:Descriptors and other attributes of a ddex:Release which may vary according to ddex:Territory of release. 
    /// </para>
    /// <para>
    /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), DisplayArtistName*, LabelName*, RightsAgreementId?, Title*, DisplayArtist+, IsMultiArtistCompilation?, AdministratingRecordCompany*, ReleaseType*, RelatedRelease*)
    /// </para>
    /// </summary>
    public partial class ReleaseDetailsByTerritory : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<object> TerritoryCodeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<object> ExcludedTerritoryCodeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Name> DisplayArtistNameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LabelName> LabelNameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Title> TitleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Artist> DisplayArtistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AdministratingRecordCompany> AdministratingRecordCompanyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ReleaseType> ReleaseTypeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<RelatedRelease> RelatedReleaseField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator ReleaseDetailsByTerritory(XElement xe) { return XTypedServices.ToXTypedElement<ReleaseDetailsByTerritory>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ReleaseDetailsByTerritory() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:Descriptors and other attributes of a ddex:Release which may vary according to ddex:Territory of release. 
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), DisplayArtistName*, LabelName*, RightsAgreementId?, Title*, DisplayArtist+, IsMultiArtistCompilation?, AdministratingRecordCompany*, ReleaseType*, RelatedRelease*)
        /// </para>
        /// </summary>
        public ReleaseDetailsByTerritory() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Territory to which the ddexC:ReleaseSummaryDetailsByTerritory apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:ExcludedTerritory shall be present, but not both.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), DisplayArtistName*, LabelName*, RightsAgreementId?, Title*, DisplayArtist+, IsMultiArtistCompilation?, AdministratingRecordCompany*, ReleaseType*, RelatedRelease*)
        /// </para>
        /// </summary>
        public IList<object> TerritoryCode {
            get {
                if ((this.TerritoryCodeField == null)) {
                    this.TerritoryCodeField = new XSimpleList<object>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, XName.Get("TerritoryCode", ""));
                }
                return this.TerritoryCodeField;
            }
            set {
                if ((value == null)) {
                    this.TerritoryCodeField = null;
                }
                else {
                    if ((this.TerritoryCodeField == null)) {
                        this.TerritoryCodeField = XSimpleList<object>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, value, XName.Get("TerritoryCode", ""));
                    }
                    else {
                        XTypedServices.SetList<System.Object>(this.TerritoryCodeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Territory to which the ddexC:ReleaseSummaryDetailsByTerritory do not apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:Territory shall be present, but not both.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), DisplayArtistName*, LabelName*, RightsAgreementId?, Title*, DisplayArtist+, IsMultiArtistCompilation?, AdministratingRecordCompany*, ReleaseType*, RelatedRelease*)
        /// </para>
        /// </summary>
        public IList<object> ExcludedTerritoryCode {
            get {
                if ((this.ExcludedTerritoryCodeField == null)) {
                    this.ExcludedTerritoryCodeField = new XSimpleList<object>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, XName.Get("ExcludedTerritoryCode", ""));
                }
                return this.ExcludedTerritoryCodeField;
            }
            set {
                if ((value == null)) {
                    this.ExcludedTerritoryCodeField = null;
                }
                else {
                    if ((this.ExcludedTerritoryCodeField == null)) {
                        this.ExcludedTerritoryCodeField = XSimpleList<object>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, value, XName.Get("ExcludedTerritoryCode", ""));
                    }
                    else {
                        XTypedServices.SetList<System.Object>(this.ExcludedTerritoryCodeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing the ddex:Name to be used by a ddex:DSP when presenting ddex:Artist details of the ddex:Release to a ddex:Consumer.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), DisplayArtistName*, LabelName*, RightsAgreementId?, Title*, DisplayArtist+, IsMultiArtistCompilation?, AdministratingRecordCompany*, ReleaseType*, RelatedRelease*)
        /// </para>
        /// </summary>
        public IList<Name> DisplayArtistName {
            get {
                if ((this.DisplayArtistNameField == null)) {
                    this.DisplayArtistNameField = new XTypedList<Name>(this, LinqToXsdTypeManager.Instance, XName.Get("DisplayArtistName", ""));
                }
                return this.DisplayArtistNameField;
            }
            set {
                if ((value == null)) {
                    this.DisplayArtistNameField = null;
                }
                else {
                    if ((this.DisplayArtistNameField == null)) {
                        this.DisplayArtistNameField = XTypedList<Name>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("DisplayArtistName", ""));
                    }
                    else {
                        XTypedServices.SetList<Name>(this.DisplayArtistNameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing the ddex:Name of the ddex:Label for the ddex:Release.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), DisplayArtistName*, LabelName*, RightsAgreementId?, Title*, DisplayArtist+, IsMultiArtistCompilation?, AdministratingRecordCompany*, ReleaseType*, RelatedRelease*)
        /// </para>
        /// </summary>
        public IList<LabelName> LabelName {
            get {
                if ((this.LabelNameField == null)) {
                    this.LabelNameField = new XTypedList<LabelName>(this, LinqToXsdTypeManager.Instance, XName.Get("LabelName", ""));
                }
                return this.LabelNameField;
            }
            set {
                if ((value == null)) {
                    this.LabelNameField = null;
                }
                else {
                    if ((this.LabelNameField == null)) {
                        this.LabelNameField = XTypedList<LabelName>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("LabelName", ""));
                    }
                    else {
                        XTypedServices.SetList<LabelName>(this.LabelNameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:Identifiers of a ddex:License, ddex:Claim, ddex:RightShare or contract for the MusicalWork(s) used in the ddex:Release.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), DisplayArtistName*, LabelName*, RightsAgreementId?, Title*, DisplayArtist+, IsMultiArtistCompilation?, AdministratingRecordCompany*, ReleaseType*, RelatedRelease*)
        /// </para>
        /// </summary>
        public RightsAgreementId RightsAgreementId {
            get {
                XElement x = this.GetElement(XName.Get("RightsAgreementId", ""));
                return ((RightsAgreementId)(x));
            }
            set {
                this.SetElement(XName.Get("RightsAgreementId", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Title of the ddex:Release.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), DisplayArtistName*, LabelName*, RightsAgreementId?, Title*, DisplayArtist+, IsMultiArtistCompilation?, AdministratingRecordCompany*, ReleaseType*, RelatedRelease*)
        /// </para>
        /// </summary>
        public IList<Title> Title {
            get {
                if ((this.TitleField == null)) {
                    this.TitleField = new XTypedList<Title>(this, LinqToXsdTypeManager.Instance, XName.Get("Title", ""));
                }
                return this.TitleField;
            }
            set {
                if ((value == null)) {
                    this.TitleField = null;
                }
                else {
                    if ((this.TitleField == null)) {
                        this.TitleField = XTypedList<Title>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Title", ""));
                    }
                    else {
                        XTypedServices.SetList<Title>(this.TitleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:DisplayArtist for the ddex:Release. The ddex:DisplayArtist may be described through ddex:Name, ddex:Identifier and Roles.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), DisplayArtistName*, LabelName*, RightsAgreementId?, Title*, DisplayArtist+, IsMultiArtistCompilation?, AdministratingRecordCompany*, ReleaseType*, RelatedRelease*)
        /// </para>
        /// </summary>
        public IList<Artist> DisplayArtist {
            get {
                if ((this.DisplayArtistField == null)) {
                    this.DisplayArtistField = new XTypedList<Artist>(this, LinqToXsdTypeManager.Instance, XName.Get("DisplayArtist", ""));
                }
                return this.DisplayArtistField;
            }
            set {
                if ((value == null)) {
                    this.DisplayArtistField = null;
                }
                else {
                    if ((this.DisplayArtistField == null)) {
                        this.DisplayArtistField = XTypedList<Artist>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("DisplayArtist", ""));
                    }
                    else {
                        XTypedServices.SetList<Artist>(this.DisplayArtistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ddex:Release is a multiartist compilation (=True) or not (=False).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), DisplayArtistName*, LabelName*, RightsAgreementId?, Title*, DisplayArtist+, IsMultiArtistCompilation?, AdministratingRecordCompany*, ReleaseType*, RelatedRelease*)
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsMultiArtistCompilation {
            get {
                XElement x = this.GetElement(XName.Get("IsMultiArtistCompilation", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("IsMultiArtistCompilation", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:AdministratingRecordCompany for the ddex:Release. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), DisplayArtistName*, LabelName*, RightsAgreementId?, Title*, DisplayArtist+, IsMultiArtistCompilation?, AdministratingRecordCompany*, ReleaseType*, RelatedRelease*)
        /// </para>
        /// </summary>
        public IList<AdministratingRecordCompany> AdministratingRecordCompany {
            get {
                if ((this.AdministratingRecordCompanyField == null)) {
                    this.AdministratingRecordCompanyField = new XTypedList<AdministratingRecordCompany>(this, LinqToXsdTypeManager.Instance, XName.Get("AdministratingRecordCompany", ""));
                }
                return this.AdministratingRecordCompanyField;
            }
            set {
                if ((value == null)) {
                    this.AdministratingRecordCompanyField = null;
                }
                else {
                    if ((this.AdministratingRecordCompanyField == null)) {
                        this.AdministratingRecordCompanyField = XTypedList<AdministratingRecordCompany>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("AdministratingRecordCompany", ""));
                    }
                    else {
                        XTypedServices.SetList<AdministratingRecordCompany>(this.AdministratingRecordCompanyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the form in which a ddex:ReleaseCreator anticipates offering the ddex:Release to ddex:Consumers. This overrides the ddex:ReleaseType specified globally for the ddex:Release.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), DisplayArtistName*, LabelName*, RightsAgreementId?, Title*, DisplayArtist+, IsMultiArtistCompilation?, AdministratingRecordCompany*, ReleaseType*, RelatedRelease*)
        /// </para>
        /// </summary>
        public IList<ReleaseType> ReleaseType {
            get {
                if ((this.ReleaseTypeField == null)) {
                    this.ReleaseTypeField = new XTypedList<ReleaseType>(this, LinqToXsdTypeManager.Instance, XName.Get("ReleaseType", ""));
                }
                return this.ReleaseTypeField;
            }
            set {
                if ((value == null)) {
                    this.ReleaseTypeField = null;
                }
                else {
                    if ((this.ReleaseTypeField == null)) {
                        this.ReleaseTypeField = XTypedList<ReleaseType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ReleaseType", ""));
                    }
                    else {
                        XTypedServices.SetList<ReleaseType>(this.ReleaseTypeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Release (or a ddex:PhysicalProduct or a ddex:DigitalProduct derived from such a ddex:Release) which is related to this ddex:Release.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), DisplayArtistName*, LabelName*, RightsAgreementId?, Title*, DisplayArtist+, IsMultiArtistCompilation?, AdministratingRecordCompany*, ReleaseType*, RelatedRelease*)
        /// </para>
        /// </summary>
        public IList<RelatedRelease> RelatedRelease {
            get {
                if ((this.RelatedReleaseField == null)) {
                    this.RelatedReleaseField = new XTypedList<RelatedRelease>(this, LinqToXsdTypeManager.Instance, XName.Get("RelatedRelease", ""));
                }
                return this.RelatedReleaseField;
            }
            set {
                if ((value == null)) {
                    this.RelatedReleaseField = null;
                }
                else {
                    if ((this.RelatedReleaseField == null)) {
                        this.RelatedReleaseField = XTypedList<RelatedRelease>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("RelatedRelease", ""));
                    }
                    else {
                        XTypedServices.SetList<RelatedRelease>(this.RelatedReleaseField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the ddexC:ReleaseSummaryDetailsByTerritory as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ReleaseDetailsByTerritory", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ReleaseDetailsByTerritory>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("TerritoryCode", ""), typeof(object));
            localElementDictionary.Add(XName.Get("ExcludedTerritoryCode", ""), typeof(object));
            localElementDictionary.Add(XName.Get("DisplayArtistName", ""), typeof(Name));
            localElementDictionary.Add(XName.Get("LabelName", ""), typeof(LabelName));
            localElementDictionary.Add(XName.Get("RightsAgreementId", ""), typeof(RightsAgreementId));
            localElementDictionary.Add(XName.Get("Title", ""), typeof(Title));
            localElementDictionary.Add(XName.Get("DisplayArtist", ""), typeof(Artist));
            localElementDictionary.Add(XName.Get("IsMultiArtistCompilation", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("AdministratingRecordCompany", ""), typeof(AdministratingRecordCompany));
            localElementDictionary.Add(XName.Get("ReleaseType", ""), typeof(ReleaseType));
            localElementDictionary.Add(XName.Get("RelatedRelease", ""), typeof(RelatedRelease));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:ReleaseId. If available, a ddex:GRid should always to be used. If the ddex:Release contains only one ddex:SoundRecording, the ddex:ISRC of the ddex:SoundRecording may be used instead. If the ddex:Release is an abstraction of a complete ddex:PhysicalProduct (such as a CD ddex:Album), the ddex:ICPN of the ddex:PhysicalProduct may be used instead.
    /// </para>
    /// <para>
    /// Regular expression: (GRid?, ISRC?, ICPN?, CatalogNumber?, ProprietaryId*)
    /// </para>
    /// </summary>
    public partial class ReleaseId : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ProprietaryId> ProprietaryIdField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ReleaseId(XElement xe) { return XTypedServices.ToXTypedElement<ReleaseId>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ReleaseId() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("GRid", "")), new NamedContentModelEntity(XName.Get("ISRC", "")), new NamedContentModelEntity(XName.Get("ICPN", "")), new NamedContentModelEntity(XName.Get("CatalogNumber", "")), new NamedContentModelEntity(XName.Get("ProprietaryId", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:ReleaseId. If available, a ddex:GRid should always to be used. If the ddex:Release contains only one ddex:SoundRecording, the ddex:ISRC of the ddex:SoundRecording may be used instead. If the ddex:Release is an abstraction of a complete ddex:PhysicalProduct (such as a CD ddex:Album), the ddex:ICPN of the ddex:PhysicalProduct may be used instead.
        /// </para>
        /// <para>
        /// Regular expression: (GRid?, ISRC?, ICPN?, CatalogNumber?, ProprietaryId*)
        /// </para>
        /// </summary>
        public ReleaseId() {
        }
        
        /// <summary>
        /// <para>
        /// The ddex:GRid identifying the ddex:Release. This is the preferred ddex:Element and is mandatory if a ddex:GRid is available. A ddex:GRid comprises four parts: the xs:string 'A1', followed by five alphanumeric characters, ten alphanumeric characters and and one alphanumeric character.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (GRid?, ISRC?, ICPN?, CatalogNumber?, ProprietaryId*)
        /// </para>
        /// </summary>
        public string GRid {
            get {
                XElement x = this.GetElement(XName.Get("GRid", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("GRid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:ISRC (International Standard ddex:Recording Code as defined in  ISO 3901) used as proxy for identification of the ddex:Release. Only applicable when the ddex:Release only contains one ddex:SoundRecording or one ddex:MusicalWorkVideo. An ddex:ISRC comprises four parts: two characters, followed by three alphanumeric characters, then two digits and five digits. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (GRid?, ISRC?, ICPN?, CatalogNumber?, ProprietaryId*)
        /// </para>
        /// </summary>
        public string ISRC {
            get {
                XElement x = this.GetElement(XName.Get("ISRC", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("ISRC", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:ICPN used as proxy for identification of the ddex:Release. Only applicable when the ddex:Release is an abstraction of a complete ddex:PhysicalProduct. An ddex:ICPN comprises 12 or 13 digits, depending whether it is an ddex:EAN (13) or a ddex:UPC (12).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (GRid?, ISRC?, ICPN?, CatalogNumber?, ProprietaryId*)
        /// </para>
        /// </summary>
        public ICPN ICPN {
            get {
                XElement x = this.GetElement(XName.Get("ICPN", ""));
                return ((ICPN)(x));
            }
            set {
                this.SetElement(XName.Get("ICPN", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:CatalogNumber of the ddex:Release.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (GRid?, ISRC?, ICPN?, CatalogNumber?, ProprietaryId*)
        /// </para>
        /// </summary>
        public CatalogNumber CatalogNumber {
            get {
                XElement x = this.GetElement(XName.Get("CatalogNumber", ""));
                return ((CatalogNumber)(x));
            }
            set {
                this.SetElement(XName.Get("CatalogNumber", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:ProprietaryIdentifier of the ddex:Release.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (GRid?, ISRC?, ICPN?, CatalogNumber?, ProprietaryId*)
        /// </para>
        /// </summary>
        public IList<ProprietaryId> ProprietaryId {
            get {
                if ((this.ProprietaryIdField == null)) {
                    this.ProprietaryIdField = new XTypedList<ProprietaryId>(this, LinqToXsdTypeManager.Instance, XName.Get("ProprietaryId", ""));
                }
                return this.ProprietaryIdField;
            }
            set {
                if ((value == null)) {
                    this.ProprietaryIdField = null;
                }
                else {
                    if ((this.ProprietaryIdField == null)) {
                        this.ProprietaryIdField = XTypedList<ProprietaryId>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ProprietaryId", ""));
                    }
                    else {
                        XTypedServices.SetList<ProprietaryId>(this.ProprietaryIdField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether this ddex:Identifier is old and has been replaced by a new one (=True) or not (=False). The ddex:Flag may only be set to True when the new ddex:Identifier is also provided. If the ddex:Flag is not set, this ddex:Identifier is deemed to be the current one.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsReplaced {
            get {
                XAttribute x = this.Attribute(XName.Get("IsReplaced", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("IsReplaced", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ReleaseId", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ReleaseId>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("GRid", ""), typeof(string));
            localElementDictionary.Add(XName.Get("ISRC", ""), typeof(string));
            localElementDictionary.Add(XName.Get("ICPN", ""), typeof(ICPN));
            localElementDictionary.Add(XName.Get("CatalogNumber", ""), typeof(CatalogNumber));
            localElementDictionary.Add(XName.Get("ProprietaryId", ""), typeof(ProprietaryId));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:ReleaseRelationshipType, e.g. between an ddex:AudioClipRelease and a ddex:VideoClipRelease.
    /// </para>
    /// </summary>
    public partial class ReleaseRelationshipType : XTypedElement, IXMetaData {
        
         public static explicit operator ReleaseRelationshipType(XElement xe) { return XTypedServices.ToXTypedElement<ReleaseRelationshipType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:ReleaseRelationshipType, e.g. between an ddex:AudioClipRelease and a ddex:VideoClipRelease.
        /// </para>
        /// </summary>
        public ReleaseRelationshipType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.ReleaseRelationshipType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddexC:ReleaseRelationshipType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UserDefined value of the ddexC:ReleaseRelationshipType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserDefinedValue {
            get {
                XAttribute x = this.Attribute(XName.Get("UserDefinedValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserDefinedValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ReleaseRelationshipType", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ReleaseRelationshipType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:ReleaseResourceReference.
    /// </para>
    /// </summary>
    public partial class ReleaseResourceReference : XTypedElement, IXMetaData {
        
         public static explicit operator ReleaseResourceReference(XElement xe) { return XTypedServices.ToXTypedElement<ReleaseResourceReference>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:ReleaseResourceReference.
        /// </para>
        /// </summary>
        public ReleaseResourceReference() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.LocalResourceAnchorReference.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Type of ddex:Resource in the context of a ddex:Release. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ReleaseResourceType {
            get {
                XAttribute x = this.Attribute(XName.Get("ReleaseResourceType", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ReleaseResourceType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ReleaseResourceReference", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ReleaseResourceReference>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing a list of ddex:ReleaseResourceReferences.
    /// </para>
    /// <para>
    /// Regular expression: (ReleaseResourceReference+)
    /// </para>
    /// </summary>
    public partial class ReleaseResourceReferenceList : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ReleaseResourceReference> ReleaseResourceReferenceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ReleaseResourceReferenceList(XElement xe) { return XTypedServices.ToXTypedElement<ReleaseResourceReferenceList>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ReleaseResourceReferenceList() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ReleaseResourceReference", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a list of ddex:ReleaseResourceReferences.
        /// </para>
        /// <para>
        /// Regular expression: (ReleaseResourceReference+)
        /// </para>
        /// </summary>
        public ReleaseResourceReferenceList() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a ddex:Reference for a ddex:Resource (specific to this ddex:Message). The ddex:LocalAnchorReference in this ddex:Composite is a xs:string starting with the letter A.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ReleaseResourceReference+)
        /// </para>
        /// </summary>
        public IList<ReleaseResourceReference> ReleaseResourceReference {
            get {
                if ((this.ReleaseResourceReferenceField == null)) {
                    this.ReleaseResourceReferenceField = new XTypedList<ReleaseResourceReference>(this, LinqToXsdTypeManager.Instance, XName.Get("ReleaseResourceReference", ""));
                }
                return this.ReleaseResourceReferenceField;
            }
            set {
                if ((value == null)) {
                    this.ReleaseResourceReferenceField = null;
                }
                else {
                    if ((this.ReleaseResourceReferenceField == null)) {
                        this.ReleaseResourceReferenceField = XTypedList<ReleaseResourceReference>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ReleaseResourceReference", ""));
                    }
                    else {
                        XTypedServices.SetList<ReleaseResourceReference>(this.ReleaseResourceReferenceField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ReleaseResourceReferenceList", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ReleaseResourceReferenceList>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ReleaseResourceReference", ""), typeof(ReleaseResourceReference));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing summary details of a ddex:Release.
    /// </para>
    /// <para>
    /// Regular expression: (ReleaseId+, ReferenceTitle, ReleaseSummaryDetailsByTerritory*, RightsAgreementId?)
    /// </para>
    /// </summary>
    public partial class ReleaseSummary : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ReleaseId> ReleaseIdField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ReleaseSummaryDetailsByTerritory> ReleaseSummaryDetailsByTerritoryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ReleaseSummary(XElement xe) { return XTypedServices.ToXTypedElement<ReleaseSummary>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ReleaseSummary() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ReleaseId", "")), new NamedContentModelEntity(XName.Get("ReferenceTitle", "")), new NamedContentModelEntity(XName.Get("ReleaseSummaryDetailsByTerritory", "")), new NamedContentModelEntity(XName.Get("RightsAgreementId", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing summary details of a ddex:Release.
        /// </para>
        /// <para>
        /// Regular expression: (ReleaseId+, ReferenceTitle, ReleaseSummaryDetailsByTerritory*, RightsAgreementId?)
        /// </para>
        /// </summary>
        public ReleaseSummary() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:ReleaseIds. If available, a ddex:GRid shall always to be used. If the ddex:Release contains only one ddex:SoundRecording, the ddex:ISRC of the ddex:SoundRecording may be used instead. If the ddex:Release is an abstraction of a complete ddex:PhysicalProduct (such as a CD ddex:Album), the ddex:ICPN of the ddex:PhysicalProduct may be used instead. More than one of these identifiers may be provided.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ReleaseId+, ReferenceTitle, ReleaseSummaryDetailsByTerritory*, RightsAgreementId?)
        /// </para>
        /// </summary>
        public IList<ReleaseId> ReleaseId {
            get {
                if ((this.ReleaseIdField == null)) {
                    this.ReleaseIdField = new XTypedList<ReleaseId>(this, LinqToXsdTypeManager.Instance, XName.Get("ReleaseId", ""));
                }
                return this.ReleaseIdField;
            }
            set {
                if ((value == null)) {
                    this.ReleaseIdField = null;
                }
                else {
                    if ((this.ReleaseIdField == null)) {
                        this.ReleaseIdField = XTypedList<ReleaseId>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ReleaseId", ""));
                    }
                    else {
                        XTypedServices.SetList<ReleaseId>(this.ReleaseIdField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:ReferenceTitle of the ddex:Release.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ReleaseId+, ReferenceTitle, ReleaseSummaryDetailsByTerritory*, RightsAgreementId?)
        /// </para>
        /// </summary>
        public ReferenceTitle ReferenceTitle {
            get {
                XElement x = this.GetElement(XName.Get("ReferenceTitle", ""));
                return ((ReferenceTitle)(x));
            }
            set {
                this.SetElement(XName.Get("ReferenceTitle", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing summary details of ddex:Descriptors and other attributes of the ddex:Release which may vary according to ddex:Territory of ddex:Release. ddex:Territory of ddex:Release may be the world.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ReleaseId+, ReferenceTitle, ReleaseSummaryDetailsByTerritory*, RightsAgreementId?)
        /// </para>
        /// </summary>
        public IList<ReleaseSummaryDetailsByTerritory> ReleaseSummaryDetailsByTerritory {
            get {
                if ((this.ReleaseSummaryDetailsByTerritoryField == null)) {
                    this.ReleaseSummaryDetailsByTerritoryField = new XTypedList<ReleaseSummaryDetailsByTerritory>(this, LinqToXsdTypeManager.Instance, XName.Get("ReleaseSummaryDetailsByTerritory", ""));
                }
                return this.ReleaseSummaryDetailsByTerritoryField;
            }
            set {
                if ((value == null)) {
                    this.ReleaseSummaryDetailsByTerritoryField = null;
                }
                else {
                    if ((this.ReleaseSummaryDetailsByTerritoryField == null)) {
                        this.ReleaseSummaryDetailsByTerritoryField = XTypedList<ReleaseSummaryDetailsByTerritory>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ReleaseSummaryDetailsByTerritory", ""));
                    }
                    else {
                        XTypedServices.SetList<ReleaseSummaryDetailsByTerritory>(this.ReleaseSummaryDetailsByTerritoryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:Identifiers of a ddex:License, ddex:Claim, ddex:RightShare or contract for the MusicalWork(s) used in the ddex:Release.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ReleaseId+, ReferenceTitle, ReleaseSummaryDetailsByTerritory*, RightsAgreementId?)
        /// </para>
        /// </summary>
        public RightsAgreementId RightsAgreementId {
            get {
                XElement x = this.GetElement(XName.Get("RightsAgreementId", ""));
                return ((RightsAgreementId)(x));
            }
            set {
                this.SetElement(XName.Get("RightsAgreementId", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the ddexC:ReleaseSummary as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ReleaseSummary", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ReleaseSummary>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ReleaseId", ""), typeof(ReleaseId));
            localElementDictionary.Add(XName.Get("ReferenceTitle", ""), typeof(ReferenceTitle));
            localElementDictionary.Add(XName.Get("ReleaseSummaryDetailsByTerritory", ""), typeof(ReleaseSummaryDetailsByTerritory));
            localElementDictionary.Add(XName.Get("RightsAgreementId", ""), typeof(RightsAgreementId));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing summary details of ddex:Descriptors and other attributes of a ddex:Release which may vary according to ddex:Territory of ddex:Release.
    /// </para>
    /// <para>
    /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), DisplayArtistName*, LabelName*, RightsAgreementId?)
    /// </para>
    /// </summary>
    public partial class ReleaseSummaryDetailsByTerritory : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<object> TerritoryCodeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<object> ExcludedTerritoryCodeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Name> DisplayArtistNameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LabelName> LabelNameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator ReleaseSummaryDetailsByTerritory(XElement xe) { return XTypedServices.ToXTypedElement<ReleaseSummaryDetailsByTerritory>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ReleaseSummaryDetailsByTerritory() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing summary details of ddex:Descriptors and other attributes of a ddex:Release which may vary according to ddex:Territory of ddex:Release.
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), DisplayArtistName*, LabelName*, RightsAgreementId?)
        /// </para>
        /// </summary>
        public ReleaseSummaryDetailsByTerritory() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Territory to which the ddexC:ReleaseSummaryDetailsByTerritory apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:ExcludedTerritory shall be present, but not both.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), DisplayArtistName*, LabelName*, RightsAgreementId?)
        /// </para>
        /// </summary>
        public IList<object> TerritoryCode {
            get {
                if ((this.TerritoryCodeField == null)) {
                    this.TerritoryCodeField = new XSimpleList<object>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, XName.Get("TerritoryCode", ""));
                }
                return this.TerritoryCodeField;
            }
            set {
                if ((value == null)) {
                    this.TerritoryCodeField = null;
                }
                else {
                    if ((this.TerritoryCodeField == null)) {
                        this.TerritoryCodeField = XSimpleList<object>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, value, XName.Get("TerritoryCode", ""));
                    }
                    else {
                        XTypedServices.SetList<System.Object>(this.TerritoryCodeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Territory to which the ddexC:ReleaseSummaryDetailsByTerritory do not apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:Territory shall be present, but not both.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), DisplayArtistName*, LabelName*, RightsAgreementId?)
        /// </para>
        /// </summary>
        public IList<object> ExcludedTerritoryCode {
            get {
                if ((this.ExcludedTerritoryCodeField == null)) {
                    this.ExcludedTerritoryCodeField = new XSimpleList<object>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, XName.Get("ExcludedTerritoryCode", ""));
                }
                return this.ExcludedTerritoryCodeField;
            }
            set {
                if ((value == null)) {
                    this.ExcludedTerritoryCodeField = null;
                }
                else {
                    if ((this.ExcludedTerritoryCodeField == null)) {
                        this.ExcludedTerritoryCodeField = XSimpleList<object>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, value, XName.Get("ExcludedTerritoryCode", ""));
                    }
                    else {
                        XTypedServices.SetList<System.Object>(this.ExcludedTerritoryCodeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing the ddex:Name to be used by a ddex:DSP when presenting ddex:Artist details of the ddex:Release to a ddex:Consumer.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), DisplayArtistName*, LabelName*, RightsAgreementId?)
        /// </para>
        /// </summary>
        public IList<Name> DisplayArtistName {
            get {
                if ((this.DisplayArtistNameField == null)) {
                    this.DisplayArtistNameField = new XTypedList<Name>(this, LinqToXsdTypeManager.Instance, XName.Get("DisplayArtistName", ""));
                }
                return this.DisplayArtistNameField;
            }
            set {
                if ((value == null)) {
                    this.DisplayArtistNameField = null;
                }
                else {
                    if ((this.DisplayArtistNameField == null)) {
                        this.DisplayArtistNameField = XTypedList<Name>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("DisplayArtistName", ""));
                    }
                    else {
                        XTypedServices.SetList<Name>(this.DisplayArtistNameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing the ddex:Name of the ddex:Label for the ddex:Release.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), DisplayArtistName*, LabelName*, RightsAgreementId?)
        /// </para>
        /// </summary>
        public IList<LabelName> LabelName {
            get {
                if ((this.LabelNameField == null)) {
                    this.LabelNameField = new XTypedList<LabelName>(this, LinqToXsdTypeManager.Instance, XName.Get("LabelName", ""));
                }
                return this.LabelNameField;
            }
            set {
                if ((value == null)) {
                    this.LabelNameField = null;
                }
                else {
                    if ((this.LabelNameField == null)) {
                        this.LabelNameField = XTypedList<LabelName>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("LabelName", ""));
                    }
                    else {
                        XTypedServices.SetList<LabelName>(this.LabelNameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:Identifiers of a ddex:License, ddex:Claim, ddex:RightShare or contract for the MusicalWork(s) used in the ddex:Release.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), DisplayArtistName*, LabelName*, RightsAgreementId?)
        /// </para>
        /// </summary>
        public RightsAgreementId RightsAgreementId {
            get {
                XElement x = this.GetElement(XName.Get("RightsAgreementId", ""));
                return ((RightsAgreementId)(x));
            }
            set {
                this.SetElement(XName.Get("RightsAgreementId", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the ddexC:ReleaseSummaryDetailsByTerritory as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ReleaseSummaryDetailsByTerritory", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ReleaseSummaryDetailsByTerritory>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("TerritoryCode", ""), typeof(object));
            localElementDictionary.Add(XName.Get("ExcludedTerritoryCode", ""), typeof(object));
            localElementDictionary.Add(XName.Get("DisplayArtistName", ""), typeof(Name));
            localElementDictionary.Add(XName.Get("LabelName", ""), typeof(LabelName));
            localElementDictionary.Add(XName.Get("RightsAgreementId", ""), typeof(RightsAgreementId));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:ReleaseType.
    /// </para>
    /// </summary>
    public partial class ReleaseType : XTypedElement, IXMetaData {
        
         public static explicit operator ReleaseType(XElement xe) { return XTypedServices.ToXTypedElement<ReleaseType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:ReleaseType.
        /// </para>
        /// </summary>
        public ReleaseType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.ReleaseType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddexC:ReleaseType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UserDefined value of the ddexC:ReleaseType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserDefinedValue {
            get {
                XAttribute x = this.Attribute(XName.Get("UserDefinedValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserDefinedValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ReleaseType", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ReleaseType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of an ddex:RemittanceAdvice.
    /// </para>
    /// </summary>
    public partial class RemittanceAdvice : XTypedElement, IXMetaData {
        
         public static explicit operator RemittanceAdvice(XElement xe) { return XTypedServices.ToXTypedElement<RemittanceAdvice>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of an ddex:RemittanceAdvice.
        /// </para>
        /// </summary>
        public RemittanceAdvice() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script of the ddexC:RemittanceAdvice as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("RemittanceAdvice", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RemittanceAdvice>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:ReportFormat.
    /// </para>
    /// </summary>
    public partial class ReportFormat : XTypedElement, IXMetaData {
        
         public static explicit operator ReportFormat(XElement xe) { return XTypedServices.ToXTypedElement<ReportFormat>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:ReportFormat.
        /// </para>
        /// </summary>
        public ReportFormat() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.ReportFormat.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddex:ReportFormat. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UserDefined value of the ddex:ReportFormat. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserDefinedValue {
            get {
                XAttribute x = this.Attribute(XName.Get("UserDefinedValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserDefinedValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ReportFormat", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ReportFormat>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:ReportType.
    /// </para>
    /// </summary>
    public partial class ReportType : XTypedElement, IXMetaData {
        
         public static explicit operator ReportType(XElement xe) { return XTypedServices.ToXTypedElement<ReportType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:ReportType.
        /// </para>
        /// </summary>
        public ReportType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.ReportType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddex:ReportType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UserDefined value of the ddex:ReportType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserDefinedValue {
            get {
                XAttribute x = this.Attribute(XName.Get("UserDefinedValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserDefinedValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ReportType", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ReportType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:ResourceContainedResourceReference for the case where one ddex:Resource contains another one.
    /// </para>
    /// <para>
    /// Regular expression: (ResourceContainedResourceReference1, DurationUsed?, StartPoint?, Purpose?)
    /// </para>
    /// </summary>
    public partial class ResourceContainedResourceReference : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ResourceContainedResourceReference(XElement xe) { return XTypedServices.ToXTypedElement<ResourceContainedResourceReference>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ResourceContainedResourceReference() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ResourceContainedResourceReference", "")), new NamedContentModelEntity(XName.Get("DurationUsed", "")), new NamedContentModelEntity(XName.Get("StartPoint", "")), new NamedContentModelEntity(XName.Get("Purpose", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:ResourceContainedResourceReference for the case where one ddex:Resource contains another one.
        /// </para>
        /// <para>
        /// Regular expression: (ResourceContainedResourceReference1, DurationUsed?, StartPoint?, Purpose?)
        /// </para>
        /// </summary>
        public ResourceContainedResourceReference() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Reference for a ddex:Resource (specific to this ddex:Message). This is a ddex:LocalResourceAnchorReference starting with the letter A.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ResourceContainedResourceReference1, DurationUsed?, StartPoint?, Purpose?)
        /// </para>
        /// </summary>
        public string ResourceContainedResourceReference1 {
            get {
                XElement x = this.GetElement(XName.Get("ResourceContainedResourceReference", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("ResourceContainedResourceReference", ""), value, "ResourceContainedResourceReference1", ResourceContainedResourceReference1LocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The total ddex:Duration of the ddex:Resource that has been used in a specified context (this may be less than the total ddex:Duration of the ddex:Resource) (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ResourceContainedResourceReference1, DurationUsed?, StartPoint?, Purpose?)
        /// </para>
        /// </summary>
        public System.Nullable<System.TimeSpan> DurationUsed {
            get {
                XElement x = this.GetElement(XName.Get("DurationUsed", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
            set {
                this.SetElement(XName.Get("DurationUsed", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The start point of the preview given in seconds from the start of the referenced ddex:Resource.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ResourceContainedResourceReference1, DurationUsed?, StartPoint?, Purpose?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> StartPoint {
            get {
                XElement x = this.GetElement(XName.Get("StartPoint", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElement(XName.Get("StartPoint", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:Purpose of the usage.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ResourceContainedResourceReference1, DurationUsed?, StartPoint?, Purpose?)
        /// </para>
        /// </summary>
        public Purpose Purpose {
            get {
                XElement x = this.GetElement(XName.Get("Purpose", ""));
                return ((Purpose)(x));
            }
            set {
                this.SetElement(XName.Get("Purpose", ""), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ResourceContainedResourceReference", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ResourceContainedResourceReference>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ResourceContainedResourceReference", ""), typeof(string));
            localElementDictionary.Add(XName.Get("DurationUsed", ""), typeof(System.TimeSpan));
            localElementDictionary.Add(XName.Get("StartPoint", ""), typeof(decimal));
            localElementDictionary.Add(XName.Get("Purpose", ""), typeof(Purpose));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class ResourceContainedResourceReference1LocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "A[\\d\\-_a-zA-Z]+"}, 0, XmlSchemaWhiteSpace.Collapse));
            
            private ResourceContainedResourceReference1LocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of one or more ddex:ResourceContainedResourceReferences. 
    /// </para>
    /// <para>
    /// Regular expression: (ResourceContainedResourceReference+)
    /// </para>
    /// </summary>
    public partial class ResourceContainedResourceReferenceList : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ResourceContainedResourceReference> ResourceContainedResourceReferenceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ResourceContainedResourceReferenceList(XElement xe) { return XTypedServices.ToXTypedElement<ResourceContainedResourceReferenceList>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ResourceContainedResourceReferenceList() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ResourceContainedResourceReference", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of one or more ddex:ResourceContainedResourceReferences. 
        /// </para>
        /// <para>
        /// Regular expression: (ResourceContainedResourceReference+)
        /// </para>
        /// </summary>
        public ResourceContainedResourceReferenceList() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:ResourceContainedResourceReference.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ResourceContainedResourceReference+)
        /// </para>
        /// </summary>
        public IList<ResourceContainedResourceReference> ResourceContainedResourceReference {
            get {
                if ((this.ResourceContainedResourceReferenceField == null)) {
                    this.ResourceContainedResourceReferenceField = new XTypedList<ResourceContainedResourceReference>(this, LinqToXsdTypeManager.Instance, XName.Get("ResourceContainedResourceReference", ""));
                }
                return this.ResourceContainedResourceReferenceField;
            }
            set {
                if ((value == null)) {
                    this.ResourceContainedResourceReferenceField = null;
                }
                else {
                    if ((this.ResourceContainedResourceReferenceField == null)) {
                        this.ResourceContainedResourceReferenceField = XTypedList<ResourceContainedResourceReference>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ResourceContainedResourceReference", ""));
                    }
                    else {
                        XTypedServices.SetList<ResourceContainedResourceReference>(this.ResourceContainedResourceReferenceField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ResourceContainedResourceReferenceList", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ResourceContainedResourceReferenceList>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ResourceContainedResourceReference", ""), typeof(ResourceContainedResourceReference));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of the ddex:Name, ddex:Identifier and role(s) of a ddex:Contributor to a ddex:Resource.
    /// </para>
    /// <para>
    /// Regular expression: ((PartyId | (PartyName+, PartyId?)), ResourceContributorRole*)
    /// </para>
    /// </summary>
    public partial class ResourceContributor : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PartyId> PartyIdField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PartyName> PartyNameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ResourceContributorRole> ResourceContributorRoleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator ResourceContributor(XElement xe) { return XTypedServices.ToXTypedElement<ResourceContributor>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ResourceContributor() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:Name, ddex:Identifier and role(s) of a ddex:Contributor to a ddex:Resource.
        /// </para>
        /// <para>
        /// Regular expression: ((PartyId | (PartyName+, PartyId?)), ResourceContributorRole*)
        /// </para>
        /// </summary>
        public ResourceContributor() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:PartyId for the ddex:Party. If no ddex:Namespace is given, the ddex:Identifier is a ddex:DdexPartyId (DPID). Note that DPIDs are not normally used to identify ddex:Artists, ddex:Producers or other ddex:Creators.
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((PartyId | (PartyName+, PartyId?)), ResourceContributorRole*)
        /// </para>
        /// </summary>
        public IList<PartyId> PartyId {
            get {
                if ((this.PartyIdField == null)) {
                    this.PartyIdField = new XTypedList<PartyId>(this, LinqToXsdTypeManager.Instance, XName.Get("PartyId", ""));
                }
                return this.PartyIdField;
            }
            set {
                if ((value == null)) {
                    this.PartyIdField = null;
                }
                else {
                    if ((this.PartyIdField == null)) {
                        this.PartyIdField = XTypedList<PartyId>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("PartyId", ""));
                    }
                    else {
                        XTypedServices.SetList<PartyId>(this.PartyIdField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the PartyName(s).
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((PartyId | (PartyName+, PartyId?)), ResourceContributorRole*)
        /// </para>
        /// </summary>
        public IList<PartyName> PartyName {
            get {
                if ((this.PartyNameField == null)) {
                    this.PartyNameField = new XTypedList<PartyName>(this, LinqToXsdTypeManager.Instance, XName.Get("PartyName", ""));
                }
                return this.PartyNameField;
            }
            set {
                if ((value == null)) {
                    this.PartyNameField = null;
                }
                else {
                    if ((this.PartyNameField == null)) {
                        this.PartyNameField = XTypedList<PartyName>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("PartyName", ""));
                    }
                    else {
                        XTypedServices.SetList<PartyName>(this.PartyNameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a role played by the ddex:Contributor.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((PartyId | (PartyName+, PartyId?)), ResourceContributorRole*)
        /// </para>
        /// </summary>
        public IList<ResourceContributorRole> ResourceContributorRole {
            get {
                if ((this.ResourceContributorRoleField == null)) {
                    this.ResourceContributorRoleField = new XTypedList<ResourceContributorRole>(this, LinqToXsdTypeManager.Instance, XName.Get("ResourceContributorRole", ""));
                }
                return this.ResourceContributorRoleField;
            }
            set {
                if ((value == null)) {
                    this.ResourceContributorRoleField = null;
                }
                else {
                    if ((this.ResourceContributorRoleField == null)) {
                        this.ResourceContributorRoleField = XTypedList<ResourceContributorRole>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ResourceContributorRole", ""));
                    }
                    else {
                        XTypedServices.SetList<ResourceContributorRole>(this.ResourceContributorRoleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The number indicating the order of the ddexC:ResourceContributor in a group of ResourceContributors that have contributed to a ddex:Resource. This is represented in an XML schema as an XML ddex:Attribute. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> SequenceNumber {
            get {
                XAttribute x = this.Attribute(XName.Get("SequenceNumber", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("SequenceNumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ResourceContributor", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ResourceContributor>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("PartyId", ""), typeof(PartyId));
            localElementDictionary.Add(XName.Get("PartyName", ""), typeof(PartyName));
            localElementDictionary.Add(XName.Get("ResourceContributorRole", ""), typeof(ResourceContributorRole));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:ResourceContributorRole. Note: This can be used in a ddex:DdexMessage in relation to any ddex:Work, ddex:Performance or ddex:Fixation any of which may form the whole or part of the ddex:Resource itself.
    /// </para>
    /// </summary>
    public partial class ResourceContributorRole : XTypedElement, IXMetaData {
        
         public static explicit operator ResourceContributorRole(XElement xe) { return XTypedServices.ToXTypedElement<ResourceContributorRole>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:ResourceContributorRole. Note: This can be used in a ddex:DdexMessage in relation to any ddex:Work, ddex:Performance or ddex:Fixation any of which may form the whole or part of the ddex:Resource itself.
        /// </para>
        /// </summary>
        public ResourceContributorRole() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.ResourceContributorRole.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddexC:ResourceContributorRole. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UserDefined value of the ddexC:ResourceContributorRole. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserDefinedValue {
            get {
                XAttribute x = this.Attribute(XName.Get("UserDefinedValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserDefinedValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ResourceContributorRole", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ResourceContributorRole>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing a list of ddex:ResourceGroupResourceReferences.
    /// </para>
    /// <para>
    /// Regular expression: (ResourceGroupResourceReference+)
    /// </para>
    /// </summary>
    public partial class ResourceGroupResourceReferenceList : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> ResourceGroupResourceReferenceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ResourceGroupResourceReferenceList(XElement xe) { return XTypedServices.ToXTypedElement<ResourceGroupResourceReferenceList>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ResourceGroupResourceReferenceList() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ResourceGroupResourceReference", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a list of ddex:ResourceGroupResourceReferences.
        /// </para>
        /// <para>
        /// Regular expression: (ResourceGroupResourceReference+)
        /// </para>
        /// </summary>
        public ResourceGroupResourceReferenceList() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Reference for a ddex:Resource (specific to this ddex:Message). This is a ddex:LocalResourceAnchorReference starting with the letter A.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ResourceGroupResourceReference+)
        /// </para>
        /// </summary>
        public IList<string> ResourceGroupResourceReference {
            get {
                if ((this.ResourceGroupResourceReferenceField == null)) {
                    this.ResourceGroupResourceReferenceField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype, XName.Get("ResourceGroupResourceReference", ""));
                }
                return this.ResourceGroupResourceReferenceField;
            }
            set {
                if ((value == null)) {
                    this.ResourceGroupResourceReferenceField = null;
                }
                else {
                    if ((this.ResourceGroupResourceReferenceField == null)) {
                        this.ResourceGroupResourceReferenceField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype, value, XName.Get("ResourceGroupResourceReference", ""));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.ResourceGroupResourceReferenceField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ResourceGroupResourceReferenceList", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ResourceGroupResourceReferenceList>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ResourceGroupResourceReference", ""), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class ResourceGroupResourceReferenceLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "A[\\d\\-_a-zA-Z]+"}, 0, XmlSchemaWhiteSpace.Collapse));
            
            private ResourceGroupResourceReferenceLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of ddex:ResourceIds.
    /// </para>
    /// <para>
    /// Regular expression: (ISRC?, ISMN?, ISAN?, VISAN?, ISBN?, ISSN?, SICI?, CatalogNumber?, ProprietaryId*)
    /// </para>
    /// </summary>
    public partial class ResourceId : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ProprietaryId> ProprietaryIdField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ResourceId(XElement xe) { return XTypedServices.ToXTypedElement<ResourceId>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ResourceId() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ISRC", "")), new NamedContentModelEntity(XName.Get("ISMN", "")), new NamedContentModelEntity(XName.Get("ISAN", "")), new NamedContentModelEntity(XName.Get("VISAN", "")), new NamedContentModelEntity(XName.Get("ISBN", "")), new NamedContentModelEntity(XName.Get("ISSN", "")), new NamedContentModelEntity(XName.Get("SICI", "")), new NamedContentModelEntity(XName.Get("CatalogNumber", "")), new NamedContentModelEntity(XName.Get("ProprietaryId", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:ResourceIds.
        /// </para>
        /// <para>
        /// Regular expression: (ISRC?, ISMN?, ISAN?, VISAN?, ISBN?, ISSN?, SICI?, CatalogNumber?, ProprietaryId*)
        /// </para>
        /// </summary>
        public ResourceId() {
        }
        
        /// <summary>
        /// <para>
        /// The ddex:ISRC (International Standard ddex:Recording Code as defined in  ISO 3901) for the ddex:Resource. An ddex:ISRC comprises four parts: two characters, followed by three alphanumeric characters, then two digits and five digits. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ISRC?, ISMN?, ISAN?, VISAN?, ISBN?, ISSN?, SICI?, CatalogNumber?, ProprietaryId*)
        /// </para>
        /// </summary>
        public string ISRC {
            get {
                XElement x = this.GetElement(XName.Get("ISRC", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("ISRC", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:ISMN (International Standard Music Number defined in ISO 10957) for the ddex:Resource. An ddex:ISMN is a thirteen-digit number. Pre-2008 ddex:ISMNs, which had 10 characters and are now deprecated, are converted by replacing the initial letter ('M') with '979-0'.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ISRC?, ISMN?, ISAN?, VISAN?, ISBN?, ISSN?, SICI?, CatalogNumber?, ProprietaryId*)
        /// </para>
        /// </summary>
        public string ISMN {
            get {
                XElement x = this.GetElement(XName.Get("ISMN", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("ISMN", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:ISAN (International Standard Audiovisual Number as defined in ISO 15706) for the ddex:Resource. An ddex:ISAN comprises four blocks of four hexadecimal charaters followed by a check character.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ISRC?, ISMN?, ISAN?, VISAN?, ISBN?, ISSN?, SICI?, CatalogNumber?, ProprietaryId*)
        /// </para>
        /// </summary>
        public string ISAN {
            get {
                XElement x = this.GetElement(XName.Get("ISAN", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("ISAN", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The V-ISAN (Version ddex:Identifier of a International Standard Audiovisual Number as defined in ISO 15706-2) for the ddex:Resource. A V-ISAN comprises four blocks of four hexadecimal charaters followed by a check character, followed by two further blocks of four hexadecimal characters, followed by a further check character.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ISRC?, ISMN?, ISAN?, VISAN?, ISBN?, ISSN?, SICI?, CatalogNumber?, ProprietaryId*)
        /// </para>
        /// </summary>
        public string VISAN {
            get {
                XElement x = this.GetElement(XName.Get("VISAN", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("VISAN", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:ISBN (International Standard Book Number defined in ISO 2108) for the ddex:Resource. An ddex:ISBN is a 13-digit number. Pre-2007, ddex:ISBNs, which had 10-digits and are now deprecated, are converted by adding the prefix '978' and re-calculating the check character.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ISRC?, ISMN?, ISAN?, VISAN?, ISBN?, ISSN?, SICI?, CatalogNumber?, ProprietaryId*)
        /// </para>
        /// </summary>
        public string ISBN {
            get {
                XElement x = this.GetElement(XName.Get("ISBN", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("ISBN", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:ISSN (International Standard Serial Number defined in ISO 3297) for the ddex:Resource. An ddex:ISSN comprises two groups of four digits, separated by a hyphen and a control digit.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ISRC?, ISMN?, ISAN?, VISAN?, ISBN?, ISSN?, SICI?, CatalogNumber?, ProprietaryId*)
        /// </para>
        /// </summary>
        public string ISSN {
            get {
                XElement x = this.GetElement(XName.Get("ISSN", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("ISSN", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:SICI (Serial Item and Contribution ddex:Identifier defined in ANSI/NISO Z39.56-199)  for the ddex:Resource.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ISRC?, ISMN?, ISAN?, VISAN?, ISBN?, ISSN?, SICI?, CatalogNumber?, ProprietaryId*)
        /// </para>
        /// </summary>
        public string SICI {
            get {
                XElement x = this.GetElement(XName.Get("SICI", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("SICI", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:CatalogNumber of the ddex:Resource.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ISRC?, ISMN?, ISAN?, VISAN?, ISBN?, ISSN?, SICI?, CatalogNumber?, ProprietaryId*)
        /// </para>
        /// </summary>
        public CatalogNumber CatalogNumber {
            get {
                XElement x = this.GetElement(XName.Get("CatalogNumber", ""));
                return ((CatalogNumber)(x));
            }
            set {
                this.SetElement(XName.Get("CatalogNumber", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:ProprietaryIdentifier of the ddex:Resource.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ISRC?, ISMN?, ISAN?, VISAN?, ISBN?, ISSN?, SICI?, CatalogNumber?, ProprietaryId*)
        /// </para>
        /// </summary>
        public IList<ProprietaryId> ProprietaryId {
            get {
                if ((this.ProprietaryIdField == null)) {
                    this.ProprietaryIdField = new XTypedList<ProprietaryId>(this, LinqToXsdTypeManager.Instance, XName.Get("ProprietaryId", ""));
                }
                return this.ProprietaryIdField;
            }
            set {
                if ((value == null)) {
                    this.ProprietaryIdField = null;
                }
                else {
                    if ((this.ProprietaryIdField == null)) {
                        this.ProprietaryIdField = XTypedList<ProprietaryId>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ProprietaryId", ""));
                    }
                    else {
                        XTypedServices.SetList<ProprietaryId>(this.ProprietaryIdField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether this ddex:Identifier is old and has been replaced by a new one (=True) or not (=False). The ddex:Flag may only be set to True when the new ddex:Identifier is also provided. If the ddex:Flag is not set, this ddex:Identifier is deemed to be the current one.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsReplaced {
            get {
                XAttribute x = this.Attribute(XName.Get("IsReplaced", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("IsReplaced", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ResourceId", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ResourceId>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ISRC", ""), typeof(string));
            localElementDictionary.Add(XName.Get("ISMN", ""), typeof(string));
            localElementDictionary.Add(XName.Get("ISAN", ""), typeof(string));
            localElementDictionary.Add(XName.Get("VISAN", ""), typeof(string));
            localElementDictionary.Add(XName.Get("ISBN", ""), typeof(string));
            localElementDictionary.Add(XName.Get("ISSN", ""), typeof(string));
            localElementDictionary.Add(XName.Get("SICI", ""), typeof(string));
            localElementDictionary.Add(XName.Get("CatalogNumber", ""), typeof(CatalogNumber));
            localElementDictionary.Add(XName.Get("ProprietaryId", ""), typeof(ProprietaryId));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing a ddex:ResourceMusicalWorkReference.
    /// </para>
    /// <para>
    /// Regular expression: (SequenceNumber?, DurationUsed?, IsFragment?, ResourceMusicalWorkReference1)
    /// </para>
    /// </summary>
    public partial class ResourceMusicalWorkReference : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ResourceMusicalWorkReference(XElement xe) { return XTypedServices.ToXTypedElement<ResourceMusicalWorkReference>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ResourceMusicalWorkReference() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("SequenceNumber", "")), new NamedContentModelEntity(XName.Get("DurationUsed", "")), new NamedContentModelEntity(XName.Get("IsFragment", "")), new NamedContentModelEntity(XName.Get("ResourceMusicalWorkReference", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a ddex:ResourceMusicalWorkReference.
        /// </para>
        /// <para>
        /// Regular expression: (SequenceNumber?, DurationUsed?, IsFragment?, ResourceMusicalWorkReference1)
        /// </para>
        /// </summary>
        public ResourceMusicalWorkReference() {
        }
        
        /// <summary>
        /// <para>
        /// The number indicating the order of the ddex:MusicalWork in a group of ddex:MusicalWorks within a ddex:Medley, ddex:SoundRecording or other ddex:Resource.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SequenceNumber?, DurationUsed?, IsFragment?, ResourceMusicalWorkReference1)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> SequenceNumber {
            get {
                XElement x = this.GetElement(XName.Get("SequenceNumber", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElement(XName.Get("SequenceNumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The total ddex:Duration of the ddex:MusicalWork that has been used in a specified context (this may be less than the total ddex:Duration of the ddex:MusicalWork) (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SequenceNumber?, DurationUsed?, IsFragment?, ResourceMusicalWorkReference1)
        /// </para>
        /// </summary>
        public System.Nullable<System.TimeSpan> DurationUsed {
            get {
                XElement x = this.GetElement(XName.Get("DurationUsed", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
            set {
                this.SetElement(XName.Get("DurationUsed", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ddex:MusicalWork is a ddex:Fragment (=True) or not (=False).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SequenceNumber?, DurationUsed?, IsFragment?, ResourceMusicalWorkReference1)
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsFragment {
            get {
                XElement x = this.GetElement(XName.Get("IsFragment", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("IsFragment", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Reference for a ddex:MusicalWork (specific to this ddex:Message). This is a ddex:LocalMusicalWorkAnchorReference starting with the letter W.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SequenceNumber?, DurationUsed?, IsFragment?, ResourceMusicalWorkReference1)
        /// </para>
        /// </summary>
        public string ResourceMusicalWorkReference1 {
            get {
                XElement x = this.GetElement(XName.Get("ResourceMusicalWorkReference", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("ResourceMusicalWorkReference", ""), value, "ResourceMusicalWorkReference1", ResourceMusicalWorkReference1LocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ResourceMusicalWorkReference", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ResourceMusicalWorkReference>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("SequenceNumber", ""), typeof(decimal));
            localElementDictionary.Add(XName.Get("DurationUsed", ""), typeof(System.TimeSpan));
            localElementDictionary.Add(XName.Get("IsFragment", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("ResourceMusicalWorkReference", ""), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class ResourceMusicalWorkReference1LocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "W[\\d\\-_a-zA-Z]+"}, 0, XmlSchemaWhiteSpace.Collapse));
            
            private ResourceMusicalWorkReference1LocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing a list of ddex:ResourceMusicalWorkReferences.
    /// </para>
    /// <para>
    /// Regular expression: (ResourceMusicalWorkReference+)
    /// </para>
    /// </summary>
    public partial class ResourceMusicalWorkReferenceList : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ResourceMusicalWorkReference> ResourceMusicalWorkReferenceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ResourceMusicalWorkReferenceList(XElement xe) { return XTypedServices.ToXTypedElement<ResourceMusicalWorkReferenceList>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ResourceMusicalWorkReferenceList() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ResourceMusicalWorkReference", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a list of ddex:ResourceMusicalWorkReferences.
        /// </para>
        /// <para>
        /// Regular expression: (ResourceMusicalWorkReference+)
        /// </para>
        /// </summary>
        public ResourceMusicalWorkReferenceList() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a ddex:ResourceMusicalWorkReference for a ddex:MusicalWork (specific to this ddex:Message).
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ResourceMusicalWorkReference+)
        /// </para>
        /// </summary>
        public IList<ResourceMusicalWorkReference> ResourceMusicalWorkReference {
            get {
                if ((this.ResourceMusicalWorkReferenceField == null)) {
                    this.ResourceMusicalWorkReferenceField = new XTypedList<ResourceMusicalWorkReference>(this, LinqToXsdTypeManager.Instance, XName.Get("ResourceMusicalWorkReference", ""));
                }
                return this.ResourceMusicalWorkReferenceField;
            }
            set {
                if ((value == null)) {
                    this.ResourceMusicalWorkReferenceField = null;
                }
                else {
                    if ((this.ResourceMusicalWorkReferenceField == null)) {
                        this.ResourceMusicalWorkReferenceField = XTypedList<ResourceMusicalWorkReference>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ResourceMusicalWorkReference", ""));
                    }
                    else {
                        XTypedServices.SetList<ResourceMusicalWorkReference>(this.ResourceMusicalWorkReferenceField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ResourceMusicalWorkReferenceList", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ResourceMusicalWorkReferenceList>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ResourceMusicalWorkReference", ""), typeof(ResourceMusicalWorkReference));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:ResourceOmissionReason.
    /// </para>
    /// </summary>
    public partial class ResourceOmissionReason : XTypedElement, IXMetaData {
        
         public static explicit operator ResourceOmissionReason(XElement xe) { return XTypedServices.ToXTypedElement<ResourceOmissionReason>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:ResourceOmissionReason.
        /// </para>
        /// </summary>
        public ResourceOmissionReason() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.ResourceOmissionReason.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddexC:ResourceOmissionReason. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UserDefined value of the ddexC:ResourceOmissionReason. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserDefinedValue {
            get {
                XAttribute x = this.Attribute(XName.Get("UserDefinedValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserDefinedValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ResourceOmissionReason", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ResourceOmissionReason>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:ResourceType. For example a ddex:SoundRecording of a ddex:Performance of a ddex:MusicalWork or an ddex:Image of an ddex:Artist.
    /// </para>
    /// </summary>
    public partial class ResourceType : XTypedElement, IXMetaData {
        
         public static explicit operator ResourceType(XElement xe) { return XTypedServices.ToXTypedElement<ResourceType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:ResourceType. For example a ddex:SoundRecording of a ddex:Performance of a ddex:MusicalWork or an ddex:Image of an ddex:Artist.
        /// </para>
        /// </summary>
        public ResourceType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.ResourceType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddexC:ResourceType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UserDefined value of the ddexC:ResourceType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserDefinedValue {
            get {
                XAttribute x = this.Attribute(XName.Get("UserDefinedValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserDefinedValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ResourceType", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ResourceType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:RightShare.
    /// </para>
    /// <para>
    /// Regular expression: (RightShareId?, RightShareReference, RightShareCreationReferenceList?, (TerritoryCode+ | ExcludedTerritoryCode+), RightsType*, UseType*, UserInterfaceType*, DistributionChannelType*, CarrierType*, CommercialModelType*, MusicalWorkRightsClaimType*, RightsController*, ValidityPeriod, (PercentageUnknown | PercentageRate?), TariffReference?, LicenseStatus?, HasFirstLicenseRefusal?)
    /// </para>
    /// </summary>
    public partial class RightShare : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<object> TerritoryCodeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<object> ExcludedTerritoryCodeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<RightsType> RightsTypeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UseType> UseTypeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UserInterfaceType> UserInterfaceTypeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DistributionChannelType> DistributionChannelTypeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CarrierType> CarrierTypeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CommercialModelType> CommercialModelTypeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> MusicalWorkRightsClaimTypeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<RightsController> RightsControllerField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator RightShare(XElement xe) { return XTypedServices.ToXTypedElement<RightShare>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RightShare() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:RightShare.
        /// </para>
        /// <para>
        /// Regular expression: (RightShareId?, RightShareReference, RightShareCreationReferenceList?, (TerritoryCode+ | ExcludedTerritoryCode+), RightsType*, UseType*, UserInterfaceType*, DistributionChannelType*, CarrierType*, CommercialModelType*, MusicalWorkRightsClaimType*, RightsController*, ValidityPeriod, (PercentageUnknown | PercentageRate?), TariffReference?, LicenseStatus?, HasFirstLicenseRefusal?)
        /// </para>
        /// </summary>
        public RightShare() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:Identifiers for the ddexC:RightShare.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RightShareId?, RightShareReference, RightShareCreationReferenceList?, (TerritoryCode+ | ExcludedTerritoryCode+), RightsType*, UseType*, UserInterfaceType*, DistributionChannelType*, CarrierType*, CommercialModelType*, MusicalWorkRightsClaimType*, RightsController*, ValidityPeriod, (PercentageUnknown | PercentageRate?), TariffReference?, LicenseStatus?, HasFirstLicenseRefusal?)
        /// </para>
        /// </summary>
        public RightsAgreementId RightShareId {
            get {
                XElement x = this.GetElement(XName.Get("RightShareId", ""));
                return ((RightsAgreementId)(x));
            }
            set {
                this.SetElement(XName.Get("RightShareId", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Identifier (specific to the ddex:Message) of the ddexC:RightShare within the ddex:Release which contains it. This is a ddex:LocalRightShareAnchor starting with the letter S.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RightShareId?, RightShareReference, RightShareCreationReferenceList?, (TerritoryCode+ | ExcludedTerritoryCode+), RightsType*, UseType*, UserInterfaceType*, DistributionChannelType*, CarrierType*, CommercialModelType*, MusicalWorkRightsClaimType*, RightsController*, ValidityPeriod, (PercentageUnknown | PercentageRate?), TariffReference?, LicenseStatus?, HasFirstLicenseRefusal?)
        /// </para>
        /// </summary>
        public string RightShareReference {
            get {
                XElement x = this.GetElement(XName.Get("RightShareReference", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("RightShareReference", ""), value, "RightShareReference", RightShareReferenceLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of one or more ddex:Creations contained in the ddexC:RightShare.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RightShareId?, RightShareReference, RightShareCreationReferenceList?, (TerritoryCode+ | ExcludedTerritoryCode+), RightsType*, UseType*, UserInterfaceType*, DistributionChannelType*, CarrierType*, CommercialModelType*, MusicalWorkRightsClaimType*, RightsController*, ValidityPeriod, (PercentageUnknown | PercentageRate?), TariffReference?, LicenseStatus?, HasFirstLicenseRefusal?)
        /// </para>
        /// </summary>
        public RightShareCreationReferenceList RightShareCreationReferenceList {
            get {
                XElement x = this.GetElement(XName.Get("RightShareCreationReferenceList", ""));
                return ((RightShareCreationReferenceList)(x));
            }
            set {
                this.SetElement(XName.Get("RightShareCreationReferenceList", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Territory to which the ddexC:RightShare applies (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:ExcludedTerritory shall be present, but not both.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (RightShareId?, RightShareReference, RightShareCreationReferenceList?, (TerritoryCode+ | ExcludedTerritoryCode+), RightsType*, UseType*, UserInterfaceType*, DistributionChannelType*, CarrierType*, CommercialModelType*, MusicalWorkRightsClaimType*, RightsController*, ValidityPeriod, (PercentageUnknown | PercentageRate?), TariffReference?, LicenseStatus?, HasFirstLicenseRefusal?)
        /// </para>
        /// </summary>
        public IList<object> TerritoryCode {
            get {
                if ((this.TerritoryCodeField == null)) {
                    this.TerritoryCodeField = new XSimpleList<object>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, XName.Get("TerritoryCode", ""));
                }
                return this.TerritoryCodeField;
            }
            set {
                if ((value == null)) {
                    this.TerritoryCodeField = null;
                }
                else {
                    if ((this.TerritoryCodeField == null)) {
                        this.TerritoryCodeField = XSimpleList<object>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, value, XName.Get("TerritoryCode", ""));
                    }
                    else {
                        XTypedServices.SetList<System.Object>(this.TerritoryCodeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Territory to which the ddexC:RightShare does not apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:Territory shall be present, but not both.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (RightShareId?, RightShareReference, RightShareCreationReferenceList?, (TerritoryCode+ | ExcludedTerritoryCode+), RightsType*, UseType*, UserInterfaceType*, DistributionChannelType*, CarrierType*, CommercialModelType*, MusicalWorkRightsClaimType*, RightsController*, ValidityPeriod, (PercentageUnknown | PercentageRate?), TariffReference?, LicenseStatus?, HasFirstLicenseRefusal?)
        /// </para>
        /// </summary>
        public IList<object> ExcludedTerritoryCode {
            get {
                if ((this.ExcludedTerritoryCodeField == null)) {
                    this.ExcludedTerritoryCodeField = new XSimpleList<object>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, XName.Get("ExcludedTerritoryCode", ""));
                }
                return this.ExcludedTerritoryCodeField;
            }
            set {
                if ((value == null)) {
                    this.ExcludedTerritoryCodeField = null;
                }
                else {
                    if ((this.ExcludedTerritoryCodeField == null)) {
                        this.ExcludedTerritoryCodeField = XSimpleList<object>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, value, XName.Get("ExcludedTerritoryCode", ""));
                    }
                    else {
                        XTypedServices.SetList<System.Object>(this.ExcludedTerritoryCodeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Type of ddex:Right covered by the ddexC:RightShare. One of the ddex:Elements RightsType and ddex:UseType must be present. The RightsType is defined according to the jurisdiction of the ddex:Territory indicated in the iso3166a2:TerritoryCode ddex:XmlAttribute.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (RightShareId?, RightShareReference, RightShareCreationReferenceList?, (TerritoryCode+ | ExcludedTerritoryCode+), RightsType*, UseType*, UserInterfaceType*, DistributionChannelType*, CarrierType*, CommercialModelType*, MusicalWorkRightsClaimType*, RightsController*, ValidityPeriod, (PercentageUnknown | PercentageRate?), TariffReference?, LicenseStatus?, HasFirstLicenseRefusal?)
        /// </para>
        /// </summary>
        public IList<RightsType> RightsType {
            get {
                if ((this.RightsTypeField == null)) {
                    this.RightsTypeField = new XTypedList<RightsType>(this, LinqToXsdTypeManager.Instance, XName.Get("RightsType", ""));
                }
                return this.RightsTypeField;
            }
            set {
                if ((value == null)) {
                    this.RightsTypeField = null;
                }
                else {
                    if ((this.RightsTypeField == null)) {
                        this.RightsTypeField = XTypedList<RightsType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("RightsType", ""));
                    }
                    else {
                        XTypedServices.SetList<RightsType>(this.RightsTypeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a nature of a ddex:Service, or a ddex:Release, as used by a ddex:Consumer. One of the ddex:Elements RightsType and ddex:UseType must be present.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (RightShareId?, RightShareReference, RightShareCreationReferenceList?, (TerritoryCode+ | ExcludedTerritoryCode+), RightsType*, UseType*, UserInterfaceType*, DistributionChannelType*, CarrierType*, CommercialModelType*, MusicalWorkRightsClaimType*, RightsController*, ValidityPeriod, (PercentageUnknown | PercentageRate?), TariffReference?, LicenseStatus?, HasFirstLicenseRefusal?)
        /// </para>
        /// </summary>
        public IList<UseType> UseType {
            get {
                if ((this.UseTypeField == null)) {
                    this.UseTypeField = new XTypedList<UseType>(this, LinqToXsdTypeManager.Instance, XName.Get("UseType", ""));
                }
                return this.UseTypeField;
            }
            set {
                if ((value == null)) {
                    this.UseTypeField = null;
                }
                else {
                    if ((this.UseTypeField == null)) {
                        this.UseTypeField = XTypedList<UseType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("UseType", ""));
                    }
                    else {
                        XTypedServices.SetList<UseType>(this.UseTypeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a physical interface by which a ddex:Consumer uses a ddex:Service or ddex:Release.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (RightShareId?, RightShareReference, RightShareCreationReferenceList?, (TerritoryCode+ | ExcludedTerritoryCode+), RightsType*, UseType*, UserInterfaceType*, DistributionChannelType*, CarrierType*, CommercialModelType*, MusicalWorkRightsClaimType*, RightsController*, ValidityPeriod, (PercentageUnknown | PercentageRate?), TariffReference?, LicenseStatus?, HasFirstLicenseRefusal?)
        /// </para>
        /// </summary>
        public IList<UserInterfaceType> UserInterfaceType {
            get {
                if ((this.UserInterfaceTypeField == null)) {
                    this.UserInterfaceTypeField = new XTypedList<UserInterfaceType>(this, LinqToXsdTypeManager.Instance, XName.Get("UserInterfaceType", ""));
                }
                return this.UserInterfaceTypeField;
            }
            set {
                if ((value == null)) {
                    this.UserInterfaceTypeField = null;
                }
                else {
                    if ((this.UserInterfaceTypeField == null)) {
                        this.UserInterfaceTypeField = XTypedList<UserInterfaceType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("UserInterfaceType", ""));
                    }
                    else {
                        XTypedServices.SetList<UserInterfaceType>(this.UserInterfaceTypeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a distribution channel used to disseminate a ddex:Service or ddex:Release to a ddex:Consumer.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (RightShareId?, RightShareReference, RightShareCreationReferenceList?, (TerritoryCode+ | ExcludedTerritoryCode+), RightsType*, UseType*, UserInterfaceType*, DistributionChannelType*, CarrierType*, CommercialModelType*, MusicalWorkRightsClaimType*, RightsController*, ValidityPeriod, (PercentageUnknown | PercentageRate?), TariffReference?, LicenseStatus?, HasFirstLicenseRefusal?)
        /// </para>
        /// </summary>
        public IList<DistributionChannelType> DistributionChannelType {
            get {
                if ((this.DistributionChannelTypeField == null)) {
                    this.DistributionChannelTypeField = new XTypedList<DistributionChannelType>(this, LinqToXsdTypeManager.Instance, XName.Get("DistributionChannelType", ""));
                }
                return this.DistributionChannelTypeField;
            }
            set {
                if ((value == null)) {
                    this.DistributionChannelTypeField = null;
                }
                else {
                    if ((this.DistributionChannelTypeField == null)) {
                        this.DistributionChannelTypeField = XTypedList<DistributionChannelType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("DistributionChannelType", ""));
                    }
                    else {
                        XTypedServices.SetList<DistributionChannelType>(this.DistributionChannelTypeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Carrier.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (RightShareId?, RightShareReference, RightShareCreationReferenceList?, (TerritoryCode+ | ExcludedTerritoryCode+), RightsType*, UseType*, UserInterfaceType*, DistributionChannelType*, CarrierType*, CommercialModelType*, MusicalWorkRightsClaimType*, RightsController*, ValidityPeriod, (PercentageUnknown | PercentageRate?), TariffReference?, LicenseStatus?, HasFirstLicenseRefusal?)
        /// </para>
        /// </summary>
        public IList<CarrierType> CarrierType {
            get {
                if ((this.CarrierTypeField == null)) {
                    this.CarrierTypeField = new XTypedList<CarrierType>(this, LinqToXsdTypeManager.Instance, XName.Get("CarrierType", ""));
                }
                return this.CarrierTypeField;
            }
            set {
                if ((value == null)) {
                    this.CarrierTypeField = null;
                }
                else {
                    if ((this.CarrierTypeField == null)) {
                        this.CarrierTypeField = XTypedList<CarrierType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CarrierType", ""));
                    }
                    else {
                        XTypedServices.SetList<CarrierType>(this.CarrierTypeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the fundamental business model which applies (e.g. ddex:SubscriptionModel and ddex:PayAsYouGoModel). The ddex:CommercialModelType indicates how the ddex:Consumer pays for the ddex:Service or ddex:Release.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (RightShareId?, RightShareReference, RightShareCreationReferenceList?, (TerritoryCode+ | ExcludedTerritoryCode+), RightsType*, UseType*, UserInterfaceType*, DistributionChannelType*, CarrierType*, CommercialModelType*, MusicalWorkRightsClaimType*, RightsController*, ValidityPeriod, (PercentageUnknown | PercentageRate?), TariffReference?, LicenseStatus?, HasFirstLicenseRefusal?)
        /// </para>
        /// </summary>
        public IList<CommercialModelType> CommercialModelType {
            get {
                if ((this.CommercialModelTypeField == null)) {
                    this.CommercialModelTypeField = new XTypedList<CommercialModelType>(this, LinqToXsdTypeManager.Instance, XName.Get("CommercialModelType", ""));
                }
                return this.CommercialModelTypeField;
            }
            set {
                if ((value == null)) {
                    this.CommercialModelTypeField = null;
                }
                else {
                    if ((this.CommercialModelTypeField == null)) {
                        this.CommercialModelTypeField = XTypedList<CommercialModelType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CommercialModelType", ""));
                    }
                    else {
                        XTypedServices.SetList<CommercialModelType>(this.CommercialModelTypeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Type of the ddex:RightsClaim related to a ddex:MusicalWork.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (RightShareId?, RightShareReference, RightShareCreationReferenceList?, (TerritoryCode+ | ExcludedTerritoryCode+), RightsType*, UseType*, UserInterfaceType*, DistributionChannelType*, CarrierType*, CommercialModelType*, MusicalWorkRightsClaimType*, RightsController*, ValidityPeriod, (PercentageUnknown | PercentageRate?), TariffReference?, LicenseStatus?, HasFirstLicenseRefusal?)
        /// </para>
        /// </summary>
        public IList<string> MusicalWorkRightsClaimType {
            get {
                if ((this.MusicalWorkRightsClaimTypeField == null)) {
                    this.MusicalWorkRightsClaimTypeField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("MusicalWorkRightsClaimType", ""));
                }
                return this.MusicalWorkRightsClaimTypeField;
            }
            set {
                if ((value == null)) {
                    this.MusicalWorkRightsClaimTypeField = null;
                }
                else {
                    if ((this.MusicalWorkRightsClaimTypeField == null)) {
                        this.MusicalWorkRightsClaimTypeField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("MusicalWorkRightsClaimType", ""));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.MusicalWorkRightsClaimTypeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:RightsController of Rights in a ddex:Creation.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (RightShareId?, RightShareReference, RightShareCreationReferenceList?, (TerritoryCode+ | ExcludedTerritoryCode+), RightsType*, UseType*, UserInterfaceType*, DistributionChannelType*, CarrierType*, CommercialModelType*, MusicalWorkRightsClaimType*, RightsController*, ValidityPeriod, (PercentageUnknown | PercentageRate?), TariffReference?, LicenseStatus?, HasFirstLicenseRefusal?)
        /// </para>
        /// </summary>
        public IList<RightsController> RightsController {
            get {
                if ((this.RightsControllerField == null)) {
                    this.RightsControllerField = new XTypedList<RightsController>(this, LinqToXsdTypeManager.Instance, XName.Get("RightsController", ""));
                }
                return this.RightsControllerField;
            }
            set {
                if ((value == null)) {
                    this.RightsControllerField = null;
                }
                else {
                    if ((this.RightsControllerField == null)) {
                        this.RightsControllerField = XTypedList<RightsController>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("RightsController", ""));
                    }
                    else {
                        XTypedServices.SetList<RightsController>(this.RightsControllerField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details about the ddex:Period of ddex:Time for which the ddexC:RightShare is valid.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RightShareId?, RightShareReference, RightShareCreationReferenceList?, (TerritoryCode+ | ExcludedTerritoryCode+), RightsType*, UseType*, UserInterfaceType*, DistributionChannelType*, CarrierType*, CommercialModelType*, MusicalWorkRightsClaimType*, RightsController*, ValidityPeriod, (PercentageUnknown | PercentageRate?), TariffReference?, LicenseStatus?, HasFirstLicenseRefusal?)
        /// </para>
        /// </summary>
        public Period ValidityPeriod {
            get {
                XElement x = this.GetElement(XName.Get("ValidityPeriod", ""));
                return ((Period)(x));
            }
            set {
                this.SetElement(XName.Get("ValidityPeriod", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ddex:RightSharePercentage is unknown (=True) or not (=False).
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (RightShareId?, RightShareReference, RightShareCreationReferenceList?, (TerritoryCode+ | ExcludedTerritoryCode+), RightsType*, UseType*, UserInterfaceType*, DistributionChannelType*, CarrierType*, CommercialModelType*, MusicalWorkRightsClaimType*, RightsController*, ValidityPeriod, (PercentageUnknown | PercentageRate?), TariffReference?, LicenseStatus?, HasFirstLicenseRefusal?)
        /// </para>
        /// </summary>
        public System.Nullable<bool> PercentageUnknown {
            get {
                XElement x = this.GetElement(XName.Get("PercentageUnknown", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("PercentageUnknown", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The share of the licensed Rights owned by the ddex:RightsController. ddexC:RightShare information is given as a xs:decimal value (e.g. '0.125' represents 12.5%) or as a fraction (e.g. '1/8' represents 12.5%).
        /// </para>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (RightShareId?, RightShareReference, RightShareCreationReferenceList?, (TerritoryCode+ | ExcludedTerritoryCode+), RightsType*, UseType*, UserInterfaceType*, DistributionChannelType*, CarrierType*, CommercialModelType*, MusicalWorkRightsClaimType*, RightsController*, ValidityPeriod, (PercentageUnknown | PercentageRate?), TariffReference?, LicenseStatus?, HasFirstLicenseRefusal?)
        /// </para>
        /// </summary>
        public string PercentageRate {
            get {
                XElement x = this.GetElement(XName.Get("PercentageRate", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("PercentageRate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Reference to a ddex:TextDocument containing details of a ddex:Tariff (in the form of an ddex:Identifier, ddex:Name or ddex:Description) that is to be applied to the ddexC:RightShare.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RightShareId?, RightShareReference, RightShareCreationReferenceList?, (TerritoryCode+ | ExcludedTerritoryCode+), RightsType*, UseType*, UserInterfaceType*, DistributionChannelType*, CarrierType*, CommercialModelType*, MusicalWorkRightsClaimType*, RightsController*, ValidityPeriod, (PercentageUnknown | PercentageRate?), TariffReference?, LicenseStatus?, HasFirstLicenseRefusal?)
        /// </para>
        /// </summary>
        public TariffReference TariffReference {
            get {
                XElement x = this.GetElement(XName.Get("TariffReference", ""));
                return ((TariffReference)(x));
            }
            set {
                this.SetElement(XName.Get("TariffReference", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The legal status of a ddex:License for the ddexC:RightShare.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RightShareId?, RightShareReference, RightShareCreationReferenceList?, (TerritoryCode+ | ExcludedTerritoryCode+), RightsType*, UseType*, UserInterfaceType*, DistributionChannelType*, CarrierType*, CommercialModelType*, MusicalWorkRightsClaimType*, RightsController*, ValidityPeriod, (PercentageUnknown | PercentageRate?), TariffReference?, LicenseStatus?, HasFirstLicenseRefusal?)
        /// </para>
        /// </summary>
        public string LicenseStatus {
            get {
                XElement x = this.GetElement(XName.Get("LicenseStatus", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("LicenseStatus", ""), value, "LicenseStatus", global::ddex_net.xml._20120404.ddex.LicenseStatus.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether a ddex:RightsController retains the right of refusal regarding the granting of the first licence for creating a ddex:SoundRecording of a Musical ddex:Work (=True) or not (=False).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RightShareId?, RightShareReference, RightShareCreationReferenceList?, (TerritoryCode+ | ExcludedTerritoryCode+), RightsType*, UseType*, UserInterfaceType*, DistributionChannelType*, CarrierType*, CommercialModelType*, MusicalWorkRightsClaimType*, RightsController*, ValidityPeriod, (PercentageUnknown | PercentageRate?), TariffReference?, LicenseStatus?, HasFirstLicenseRefusal?)
        /// </para>
        /// </summary>
        public System.Nullable<bool> HasFirstLicenseRefusal {
            get {
                XElement x = this.GetElement(XName.Get("HasFirstLicenseRefusal", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("HasFirstLicenseRefusal", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the ddexC:RightShare as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("RightShare", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RightShare>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("RightShareId", ""), typeof(RightsAgreementId));
            localElementDictionary.Add(XName.Get("RightShareReference", ""), typeof(string));
            localElementDictionary.Add(XName.Get("RightShareCreationReferenceList", ""), typeof(RightShareCreationReferenceList));
            localElementDictionary.Add(XName.Get("TerritoryCode", ""), typeof(object));
            localElementDictionary.Add(XName.Get("ExcludedTerritoryCode", ""), typeof(object));
            localElementDictionary.Add(XName.Get("RightsType", ""), typeof(RightsType));
            localElementDictionary.Add(XName.Get("UseType", ""), typeof(UseType));
            localElementDictionary.Add(XName.Get("UserInterfaceType", ""), typeof(UserInterfaceType));
            localElementDictionary.Add(XName.Get("DistributionChannelType", ""), typeof(DistributionChannelType));
            localElementDictionary.Add(XName.Get("CarrierType", ""), typeof(CarrierType));
            localElementDictionary.Add(XName.Get("CommercialModelType", ""), typeof(CommercialModelType));
            localElementDictionary.Add(XName.Get("MusicalWorkRightsClaimType", ""), typeof(string));
            localElementDictionary.Add(XName.Get("RightsController", ""), typeof(RightsController));
            localElementDictionary.Add(XName.Get("ValidityPeriod", ""), typeof(Period));
            localElementDictionary.Add(XName.Get("PercentageUnknown", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("PercentageRate", ""), typeof(string));
            localElementDictionary.Add(XName.Get("TariffReference", ""), typeof(TariffReference));
            localElementDictionary.Add(XName.Get("LicenseStatus", ""), typeof(string));
            localElementDictionary.Add(XName.Get("HasFirstLicenseRefusal", ""), typeof(bool));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        private class RightShareReferenceLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "S[\\d\\-_a-zA-Z]+"}, 0, XmlSchemaWhiteSpace.Collapse));
            
            private RightShareReferenceLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing a list of RightShareCreationReferences.
    /// </para>
    /// <para>
    /// Regular expression: (RightShareWorkReference*, RightShareResourceReference*, RightShareReleaseReference*)
    /// </para>
    /// </summary>
    public partial class RightShareCreationReferenceList : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> RightShareWorkReferenceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> RightShareResourceReferenceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> RightShareReleaseReferenceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator RightShareCreationReferenceList(XElement xe) { return XTypedServices.ToXTypedElement<RightShareCreationReferenceList>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RightShareCreationReferenceList() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("RightShareWorkReference", "")), new NamedContentModelEntity(XName.Get("RightShareResourceReference", "")), new NamedContentModelEntity(XName.Get("RightShareReleaseReference", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a list of RightShareCreationReferences.
        /// </para>
        /// <para>
        /// Regular expression: (RightShareWorkReference*, RightShareResourceReference*, RightShareReleaseReference*)
        /// </para>
        /// </summary>
        public RightShareCreationReferenceList() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Reference for a ddex:Work (specific to this ddex:Message) that is part of the ddex:RightShare. This is a ddex:LocalMusicalWorkAnchorReference starting with the letter W.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (RightShareWorkReference*, RightShareResourceReference*, RightShareReleaseReference*)
        /// </para>
        /// </summary>
        public IList<string> RightShareWorkReference {
            get {
                if ((this.RightShareWorkReferenceField == null)) {
                    this.RightShareWorkReferenceField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype, XName.Get("RightShareWorkReference", ""));
                }
                return this.RightShareWorkReferenceField;
            }
            set {
                if ((value == null)) {
                    this.RightShareWorkReferenceField = null;
                }
                else {
                    if ((this.RightShareWorkReferenceField == null)) {
                        this.RightShareWorkReferenceField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype, value, XName.Get("RightShareWorkReference", ""));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.RightShareWorkReferenceField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Reference for a ddex:Resource (specific to this ddex:Message) that is part of the ddex:RightShare. This is a ddex:LocalResourceAnchorReference starting with the letter A. The ddex:RightShare covers the ddex:Works used in the Resource(s).
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (RightShareWorkReference*, RightShareResourceReference*, RightShareReleaseReference*)
        /// </para>
        /// </summary>
        public IList<string> RightShareResourceReference {
            get {
                if ((this.RightShareResourceReferenceField == null)) {
                    this.RightShareResourceReferenceField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype, XName.Get("RightShareResourceReference", ""));
                }
                return this.RightShareResourceReferenceField;
            }
            set {
                if ((value == null)) {
                    this.RightShareResourceReferenceField = null;
                }
                else {
                    if ((this.RightShareResourceReferenceField == null)) {
                        this.RightShareResourceReferenceField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype, value, XName.Get("RightShareResourceReference", ""));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.RightShareResourceReferenceField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Reference for a ddex:Release (specific to this ddex:Message) that is part of the ddex:RightShare. This is a ddex:LocalReleaseAnchorReference starting with the letter R. The ddex:RightShare covers the ddex:Works used in the Release(s).
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (RightShareWorkReference*, RightShareResourceReference*, RightShareReleaseReference*)
        /// </para>
        /// </summary>
        public IList<string> RightShareReleaseReference {
            get {
                if ((this.RightShareReleaseReferenceField == null)) {
                    this.RightShareReleaseReferenceField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype, XName.Get("RightShareReleaseReference", ""));
                }
                return this.RightShareReleaseReferenceField;
            }
            set {
                if ((value == null)) {
                    this.RightShareReleaseReferenceField = null;
                }
                else {
                    if ((this.RightShareReleaseReferenceField == null)) {
                        this.RightShareReleaseReferenceField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype, value, XName.Get("RightShareReleaseReference", ""));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.RightShareReleaseReferenceField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("RightShareCreationReferenceList", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RightShareCreationReferenceList>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("RightShareWorkReference", ""), typeof(string));
            localElementDictionary.Add(XName.Get("RightShareResourceReference", ""), typeof(string));
            localElementDictionary.Add(XName.Get("RightShareReleaseReference", ""), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class RightShareWorkReferenceLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "W[\\d\\-_a-zA-Z]+"}, 0, XmlSchemaWhiteSpace.Collapse));
            
            private RightShareWorkReferenceLocalType() {
            }
        }
        
        private class RightShareResourceReferenceLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "A[\\d\\-_a-zA-Z]+"}, 0, XmlSchemaWhiteSpace.Collapse));
            
            private RightShareResourceReferenceLocalType() {
            }
        }
        
        private class RightShareReleaseReferenceLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "R[\\d\\-_a-zA-Z]+"}, 0, XmlSchemaWhiteSpace.Collapse));
            
            private RightShareReleaseReferenceLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of ddex:Identifiers of a ddex:License, ddex:Claim, ddex:RightShare or contract.
    /// </para>
    /// <para>
    /// Regular expression: (MWLI*, ProprietaryId*)
    /// </para>
    /// </summary>
    public partial class RightsAgreementId : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> MWLIField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ProprietaryId> ProprietaryIdField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator RightsAgreementId(XElement xe) { return XTypedServices.ToXTypedElement<RightsAgreementId>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RightsAgreementId() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("MWLI", "")), new NamedContentModelEntity(XName.Get("ProprietaryId", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:Identifiers of a ddex:License, ddex:Claim, ddex:RightShare or contract.
        /// </para>
        /// <para>
        /// Regular expression: (MWLI*, ProprietaryId*)
        /// </para>
        /// </summary>
        public RightsAgreementId() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:MusicalWork ddex:License ddex:Identifier identifying a ddex:License. If the ddex:Composite is meant to describe a ddex:Claim, ddex:RightShare or contract, then the ddex:License relates to that ddex:Claim, ddex:RightShare or contract. A ddex:MWLI comprises four parts: one of the xs:strings 'M1' or 'M2' or 'M3' or 'M4', followed by five alphanumeric characters, ten alphanumeric characters and one alphanumeric check character.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (MWLI*, ProprietaryId*)
        /// </para>
        /// </summary>
        public IList<string> MWLI {
            get {
                if ((this.MWLIField == null)) {
                    this.MWLIField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("MWLI", ""));
                }
                return this.MWLIField;
            }
            set {
                if ((value == null)) {
                    this.MWLIField = null;
                }
                else {
                    if ((this.MWLIField == null)) {
                        this.MWLIField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("MWLI", ""));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.MWLIField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:ProprietaryIdentifier of the ddex:License, ddex:Claim, ddex:RightShare or contract.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (MWLI*, ProprietaryId*)
        /// </para>
        /// </summary>
        public IList<ProprietaryId> ProprietaryId {
            get {
                if ((this.ProprietaryIdField == null)) {
                    this.ProprietaryIdField = new XTypedList<ProprietaryId>(this, LinqToXsdTypeManager.Instance, XName.Get("ProprietaryId", ""));
                }
                return this.ProprietaryIdField;
            }
            set {
                if ((value == null)) {
                    this.ProprietaryIdField = null;
                }
                else {
                    if ((this.ProprietaryIdField == null)) {
                        this.ProprietaryIdField = XTypedList<ProprietaryId>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ProprietaryId", ""));
                    }
                    else {
                        XTypedServices.SetList<ProprietaryId>(this.ProprietaryIdField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("RightsAgreementId", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RightsAgreementId>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("MWLI", ""), typeof(string));
            localElementDictionary.Add(XName.Get("ProprietaryId", ""), typeof(ProprietaryId));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:RightsController. ddex:RightsControllers are typicallydescribed by ddex:Name, ddex:Identifier and role(s).
    /// </para>
    /// <para>
    /// Regular expression: ((PartyId | (PartyName+, PartyId?)), RightsControllerRole*, (RightShareUnknown | RightSharePercentage))
    /// </para>
    /// </summary>
    public partial class RightsController : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PartyId> PartyIdField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PartyName> PartyNameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> RightsControllerRoleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator RightsController(XElement xe) { return XTypedServices.ToXTypedElement<RightsController>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RightsController() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:RightsController. ddex:RightsControllers are typicallydescribed by ddex:Name, ddex:Identifier and role(s).
        /// </para>
        /// <para>
        /// Regular expression: ((PartyId | (PartyName+, PartyId?)), RightsControllerRole*, (RightShareUnknown | RightSharePercentage))
        /// </para>
        /// </summary>
        public RightsController() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:PartyId for the ddex:Party. If no ddex:Namespace is given, the ddex:Identifier is a ddex:DdexPartyId (DPID). Note that DPIDs are not normally used to identify ddex:Artists, ddex:Producers or other ddex:Creators.
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((PartyId | (PartyName+, PartyId?)), RightsControllerRole*, (RightShareUnknown | RightSharePercentage))
        /// </para>
        /// </summary>
        public IList<PartyId> PartyId {
            get {
                if ((this.PartyIdField == null)) {
                    this.PartyIdField = new XTypedList<PartyId>(this, LinqToXsdTypeManager.Instance, XName.Get("PartyId", ""));
                }
                return this.PartyIdField;
            }
            set {
                if ((value == null)) {
                    this.PartyIdField = null;
                }
                else {
                    if ((this.PartyIdField == null)) {
                        this.PartyIdField = XTypedList<PartyId>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("PartyId", ""));
                    }
                    else {
                        XTypedServices.SetList<PartyId>(this.PartyIdField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the PartyName(s).
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((PartyId | (PartyName+, PartyId?)), RightsControllerRole*, (RightShareUnknown | RightSharePercentage))
        /// </para>
        /// </summary>
        public IList<PartyName> PartyName {
            get {
                if ((this.PartyNameField == null)) {
                    this.PartyNameField = new XTypedList<PartyName>(this, LinqToXsdTypeManager.Instance, XName.Get("PartyName", ""));
                }
                return this.PartyNameField;
            }
            set {
                if ((value == null)) {
                    this.PartyNameField = null;
                }
                else {
                    if ((this.PartyNameField == null)) {
                        this.PartyNameField = XTypedList<PartyName>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("PartyName", ""));
                    }
                    else {
                        XTypedServices.SetList<PartyName>(this.PartyNameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A role that describes the ddex:Party involved in the administration of ddex:Rights.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((PartyId | (PartyName+, PartyId?)), RightsControllerRole*, (RightShareUnknown | RightSharePercentage))
        /// </para>
        /// </summary>
        public IList<string> RightsControllerRole {
            get {
                if ((this.RightsControllerRoleField == null)) {
                    this.RightsControllerRoleField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("RightsControllerRole", ""));
                }
                return this.RightsControllerRoleField;
            }
            set {
                if ((value == null)) {
                    this.RightsControllerRoleField = null;
                }
                else {
                    if ((this.RightsControllerRoleField == null)) {
                        this.RightsControllerRoleField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("RightsControllerRole", ""));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.RightsControllerRoleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether the ddex:RightSharePercentage is unknown (=True) or not (=False).
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((PartyId | (PartyName+, PartyId?)), RightsControllerRole*, (RightShareUnknown | RightSharePercentage))
        /// </para>
        /// </summary>
        public System.Nullable<bool> RightShareUnknown {
            get {
                XElement x = this.GetElement(XName.Get("RightShareUnknown", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("RightShareUnknown", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The share of the licensed Rights owned by the ddexC:RightsController. ddex:RightShare information is given as a xs:decimal value (e.g. '0.125' represents 12.5%). If no information is given, 100% is assumed.
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((PartyId | (PartyName+, PartyId?)), RightsControllerRole*, (RightShareUnknown | RightSharePercentage))
        /// </para>
        /// </summary>
        public string RightSharePercentage {
            get {
                XElement x = this.GetElement(XName.Get("RightSharePercentage", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("RightSharePercentage", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The number indicating the order of the ddexC:RightsController in a group of ddex:RightsControllers. This is represented in an XML schema as an XML ddex:Attribute. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> SequenceNumber {
            get {
                XAttribute x = this.Attribute(XName.Get("SequenceNumber", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("SequenceNumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("RightsController", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RightsController>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("PartyId", ""), typeof(PartyId));
            localElementDictionary.Add(XName.Get("PartyName", ""), typeof(PartyName));
            localElementDictionary.Add(XName.Get("RightsControllerRole", ""), typeof(string));
            localElementDictionary.Add(XName.Get("RightShareUnknown", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("RightSharePercentage", ""), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a RightsType.
    /// </para>
    /// </summary>
    public partial class RightsType : XTypedElement, IXMetaData {
        
         public static explicit operator RightsType(XElement xe) { return XTypedServices.ToXTypedElement<RightsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a RightsType.
        /// </para>
        /// </summary>
        public RightsType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.RightsCoverage.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Territory to which the ddexC:RightsType applies (represented by an ISO 3166-1 iso3166a2:TerritoryCode). The ddexC:RightsType is defined according to the jurisdiction of this ddex:Territory.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public object TerritoryCode {
            get {
                XAttribute x = this.Attribute(XName.Get("TerritoryCode", ""));
                return XTypedServices.ParseUnionValue(x, global::ddex_net.xml._20120404.ddexC.TerritoryCode.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "TerritoryCode", this, XName.Get("TerritoryCode", ""), global::ddex_net.xml._20120404.ddexC.TerritoryCode.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddexC:RightsType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UserDefined value of the ddexC:RightsType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserDefinedValue {
            get {
                XAttribute x = this.Attribute(XName.Get("UserDefinedValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserDefinedValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("RightsType", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RightsType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:RoyaltyAmount.
    /// </para>
    /// </summary>
    public partial class RoyaltyAmount : XTypedElement, IXMetaData {
        
         public static explicit operator RoyaltyAmount(XElement xe) { return XTypedServices.ToXTypedElement<RoyaltyAmount>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:RoyaltyAmount.
        /// </para>
        /// </summary>
        public RoyaltyAmount() {
        }
        
        public decimal TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Currency of the ddexC:RoyaltyAmount (represented by an ISO 4217 iso4217a:CurrencyCode). This is represented in an XML schema as an XML ddex:Attribute. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public object CurrencyCode {
            get {
                XAttribute x = this.Attribute(XName.Get("CurrencyCode", ""));
                return XTypedServices.ParseUnionValue(x, global::ddex_net.xml._20120404.ddexC.CurrencyCode.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "CurrencyCode", this, XName.Get("CurrencyCode", ""), global::ddex_net.xml._20120404.ddexC.CurrencyCode.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("RoyaltyAmount", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RoyaltyAmount>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:RoyaltyCode.
    /// </para>
    /// </summary>
    public partial class RoyaltyCode : XTypedElement, IXMetaData {
        
         public static explicit operator RoyaltyCode(XElement xe) { return XTypedServices.ToXTypedElement<RoyaltyCode>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:RoyaltyCode.
        /// </para>
        /// </summary>
        public RoyaltyCode() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddex:RoyaltyRateType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("RoyaltyCode", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RoyaltyCode>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:SalesReportingProxyReleaseId.
    /// </para>
    /// <para>
    /// Regular expression: (ReleaseId, Reason?, ReasonType)
    /// </para>
    /// </summary>
    public partial class SalesReportingProxyReleaseId : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator SalesReportingProxyReleaseId(XElement xe) { return XTypedServices.ToXTypedElement<SalesReportingProxyReleaseId>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SalesReportingProxyReleaseId() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ReleaseId", "")), new NamedContentModelEntity(XName.Get("Reason", "")), new NamedContentModelEntity(XName.Get("ReasonType", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:SalesReportingProxyReleaseId.
        /// </para>
        /// <para>
        /// Regular expression: (ReleaseId, Reason?, ReasonType)
        /// </para>
        /// </summary>
        public SalesReportingProxyReleaseId() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:ReleaseIds. If available, a ddex:GRid should always be used.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ReleaseId, Reason?, ReasonType)
        /// </para>
        /// </summary>
        public ReleaseId ReleaseId {
            get {
                XElement x = this.GetElement(XName.Get("ReleaseId", ""));
                return ((ReleaseId)(x));
            }
            set {
                this.SetElement(XName.Get("ReleaseId", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing the textual ddex:Description of the reason for the ddex:Identifier being used as a proxy.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ReleaseId, Reason?, ReasonType)
        /// </para>
        /// </summary>
        public Reason Reason {
            get {
                XElement x = this.GetElement(XName.Get("Reason", ""));
                return ((Reason)(x));
            }
            set {
                this.SetElement(XName.Get("Reason", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ReasonType.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ReleaseId, Reason?, ReasonType)
        /// </para>
        /// </summary>
        public ReasonType ReasonType {
            get {
                XElement x = this.GetElement(XName.Get("ReasonType", ""));
                return ((ReasonType)(x));
            }
            set {
                this.SetElement(XName.Get("ReasonType", ""), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SalesReportingProxyReleaseId", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SalesReportingProxyReleaseId>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ReleaseId", ""), typeof(ReleaseId));
            localElementDictionary.Add(XName.Get("Reason", ""), typeof(Reason));
            localElementDictionary.Add(XName.Get("ReasonType", ""), typeof(ReasonType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing a ddex:SamplingRate and a ddex:UnitOfMeasure.
    /// </para>
    /// </summary>
    public partial class SamplingRate : XTypedElement, IXMetaData {
        
         public static explicit operator SamplingRate(XElement xe) { return XTypedServices.ToXTypedElement<SamplingRate>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a ddex:SamplingRate and a ddex:UnitOfMeasure.
        /// </para>
        /// </summary>
        public SamplingRate() {
        }
        
        public decimal TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:UnitOfMeasure of the ddexC:SamplingRate. This is represented in an XML schema as an XML ddex:Attribute. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UnitOfMeasure {
            get {
                XAttribute x = this.Attribute(XName.Get("UnitOfMeasure", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UnitOfMeasure", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SamplingRate", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SamplingRate>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:SheetMusicCodecType.
    /// </para>
    /// </summary>
    public partial class SheetMusicCodecType : XTypedElement, IXMetaData {
        
         public static explicit operator SheetMusicCodecType(XElement xe) { return XTypedServices.ToXTypedElement<SheetMusicCodecType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:SheetMusicCodecType.
        /// </para>
        /// </summary>
        public SheetMusicCodecType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.SheetMusicCodecType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Identifier of the ddex:Version of the ddexC:SheetMusicCodecType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Version {
            get {
                XAttribute x = this.Attribute(XName.Get("Version", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Version", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddexC:SheetMusicCodecType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UserDefined value of the ddexC:SheetMusicCodecType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserDefinedValue {
            get {
                XAttribute x = this.Attribute(XName.Get("UserDefinedValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserDefinedValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SheetMusicCodecType", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SheetMusicCodecType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of ddex:Descriptors, Dates and other attributes of a ddex:SheetMusic which may vary according to ddex:Territory of release.
    /// </para>
    /// <para>
    /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, ResourceContributor*, IndirectResourceContributor*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?)
    /// </para>
    /// </summary>
    public partial class SheetMusicDetailsByTerritory : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<object> TerritoryCodeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<object> ExcludedTerritoryCodeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Title> TitleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ResourceContributor> ResourceContributorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<IndirectResourceContributor> IndirectResourceContributorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CLine> CLineField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator SheetMusicDetailsByTerritory(XElement xe) { return XTypedServices.ToXTypedElement<SheetMusicDetailsByTerritory>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SheetMusicDetailsByTerritory() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:Descriptors, Dates and other attributes of a ddex:SheetMusic which may vary according to ddex:Territory of release.
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, ResourceContributor*, IndirectResourceContributor*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?)
        /// </para>
        /// </summary>
        public SheetMusicDetailsByTerritory() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Territory to which the ddex:SheetMusic details apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:ExcludedTerritory shall be present, but not both.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, ResourceContributor*, IndirectResourceContributor*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?)
        /// </para>
        /// </summary>
        public IList<object> TerritoryCode {
            get {
                if ((this.TerritoryCodeField == null)) {
                    this.TerritoryCodeField = new XSimpleList<object>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, XName.Get("TerritoryCode", ""));
                }
                return this.TerritoryCodeField;
            }
            set {
                if ((value == null)) {
                    this.TerritoryCodeField = null;
                }
                else {
                    if ((this.TerritoryCodeField == null)) {
                        this.TerritoryCodeField = XSimpleList<object>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, value, XName.Get("TerritoryCode", ""));
                    }
                    else {
                        XTypedServices.SetList<System.Object>(this.TerritoryCodeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Territory to which the ddex:SheetMusic details do not apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:Territory shall be present, but not both.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, ResourceContributor*, IndirectResourceContributor*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?)
        /// </para>
        /// </summary>
        public IList<object> ExcludedTerritoryCode {
            get {
                if ((this.ExcludedTerritoryCodeField == null)) {
                    this.ExcludedTerritoryCodeField = new XSimpleList<object>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, XName.Get("ExcludedTerritoryCode", ""));
                }
                return this.ExcludedTerritoryCodeField;
            }
            set {
                if ((value == null)) {
                    this.ExcludedTerritoryCodeField = null;
                }
                else {
                    if ((this.ExcludedTerritoryCodeField == null)) {
                        this.ExcludedTerritoryCodeField = XSimpleList<object>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, value, XName.Get("ExcludedTerritoryCode", ""));
                    }
                    else {
                        XTypedServices.SetList<System.Object>(this.ExcludedTerritoryCodeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Title of the ddex:SheetMusic.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, ResourceContributor*, IndirectResourceContributor*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?)
        /// </para>
        /// </summary>
        public IList<Title> Title {
            get {
                if ((this.TitleField == null)) {
                    this.TitleField = new XTypedList<Title>(this, LinqToXsdTypeManager.Instance, XName.Get("Title", ""));
                }
                return this.TitleField;
            }
            set {
                if ((value == null)) {
                    this.TitleField = null;
                }
                else {
                    if ((this.TitleField == null)) {
                        this.TitleField = XTypedList<Title>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Title", ""));
                    }
                    else {
                        XTypedServices.SetList<Title>(this.TitleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Contributor to the ddex:SheetMusic.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, ResourceContributor*, IndirectResourceContributor*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?)
        /// </para>
        /// </summary>
        public IList<ResourceContributor> ResourceContributor {
            get {
                if ((this.ResourceContributorField == null)) {
                    this.ResourceContributorField = new XTypedList<ResourceContributor>(this, LinqToXsdTypeManager.Instance, XName.Get("ResourceContributor", ""));
                }
                return this.ResourceContributorField;
            }
            set {
                if ((value == null)) {
                    this.ResourceContributorField = null;
                }
                else {
                    if ((this.ResourceContributorField == null)) {
                        this.ResourceContributorField = XTypedList<ResourceContributor>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ResourceContributor", ""));
                    }
                    else {
                        XTypedServices.SetList<ResourceContributor>(this.ResourceContributorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of an indirect ddex:Contributor to the ddex:SheetMusic.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, ResourceContributor*, IndirectResourceContributor*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?)
        /// </para>
        /// </summary>
        public IList<IndirectResourceContributor> IndirectResourceContributor {
            get {
                if ((this.IndirectResourceContributorField == null)) {
                    this.IndirectResourceContributorField = new XTypedList<IndirectResourceContributor>(this, LinqToXsdTypeManager.Instance, XName.Get("IndirectResourceContributor", ""));
                }
                return this.IndirectResourceContributorField;
            }
            set {
                if ((value == null)) {
                    this.IndirectResourceContributorField = null;
                }
                else {
                    if ((this.IndirectResourceContributorField == null)) {
                        this.IndirectResourceContributorField = XTypedList<IndirectResourceContributor>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("IndirectResourceContributor", ""));
                    }
                    else {
                        XTypedServices.SetList<IndirectResourceContributor>(this.IndirectResourceContributorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:CLine for the ddex:SheetMusic.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, ResourceContributor*, IndirectResourceContributor*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?)
        /// </para>
        /// </summary>
        public IList<CLine> CLine {
            get {
                if ((this.CLineField == null)) {
                    this.CLineField = new XTypedList<CLine>(this, LinqToXsdTypeManager.Instance, XName.Get("CLine", ""));
                }
                return this.CLineField;
            }
            set {
                if ((value == null)) {
                    this.CLineField = null;
                }
                else {
                    if ((this.CLineField == null)) {
                        this.CLineField = XTypedList<CLine>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CLine", ""));
                    }
                    else {
                        XTypedServices.SetList<CLine>(this.CLineField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing an ddex:Annotation which acknowledges record companies and/or other Parties giving permission for ddex:Artists or others featured in the ddex:SheetMusic.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, ResourceContributor*, IndirectResourceContributor*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?)
        /// </para>
        /// </summary>
        public CourtesyLine CourtesyLine {
            get {
                XElement x = this.GetElement(XName.Get("CourtesyLine", ""));
                return ((CourtesyLine)(x));
            }
            set {
                this.SetElement(XName.Get("CourtesyLine", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ddex:SheetMusic was originally published, whether for physical or electronic/online distribution.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, ResourceContributor*, IndirectResourceContributor*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?)
        /// </para>
        /// </summary>
        public EventDate OriginalResourceReleaseDate {
            get {
                XElement x = this.GetElement(XName.Get("OriginalResourceReleaseDate", ""));
                return ((EventDate)(x));
            }
            set {
                this.SetElement(XName.Get("OriginalResourceReleaseDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the ddexC:SheetMusicDetailsByTerritory as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SheetMusicDetailsByTerritory", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SheetMusicDetailsByTerritory>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("TerritoryCode", ""), typeof(object));
            localElementDictionary.Add(XName.Get("ExcludedTerritoryCode", ""), typeof(object));
            localElementDictionary.Add(XName.Get("Title", ""), typeof(Title));
            localElementDictionary.Add(XName.Get("ResourceContributor", ""), typeof(ResourceContributor));
            localElementDictionary.Add(XName.Get("IndirectResourceContributor", ""), typeof(IndirectResourceContributor));
            localElementDictionary.Add(XName.Get("CLine", ""), typeof(CLine));
            localElementDictionary.Add(XName.Get("CourtesyLine", ""), typeof(CourtesyLine));
            localElementDictionary.Add(XName.Get("OriginalResourceReleaseDate", ""), typeof(EventDate));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of ddex:Identifiers of a ddex:SheetMusic.
    /// </para>
    /// <para>
    /// Regular expression: (ISMN?, ProprietaryId*)
    /// </para>
    /// </summary>
    public partial class SheetMusicId : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ProprietaryId> ProprietaryIdField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator SheetMusicId(XElement xe) { return XTypedServices.ToXTypedElement<SheetMusicId>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SheetMusicId() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ISMN", "")), new NamedContentModelEntity(XName.Get("ProprietaryId", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:Identifiers of a ddex:SheetMusic.
        /// </para>
        /// <para>
        /// Regular expression: (ISMN?, ProprietaryId*)
        /// </para>
        /// </summary>
        public SheetMusicId() {
        }
        
        /// <summary>
        /// <para>
        /// The ddex:ISMN (International Standard Music Number defined in ISO 10957) for the ddex:SheetMusic. An ddex:ISMN is a thirteen-digit number. Pre-2008 ddex:ISMNs, which had 10 characters and are now deprecated, are converted by replacing the initial letter ('M') with '979-0'.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ISMN?, ProprietaryId*)
        /// </para>
        /// </summary>
        public string ISMN {
            get {
                XElement x = this.GetElement(XName.Get("ISMN", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("ISMN", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:ProprietaryIdentifier of the ddex:SheetMusic.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ISMN?, ProprietaryId*)
        /// </para>
        /// </summary>
        public IList<ProprietaryId> ProprietaryId {
            get {
                if ((this.ProprietaryIdField == null)) {
                    this.ProprietaryIdField = new XTypedList<ProprietaryId>(this, LinqToXsdTypeManager.Instance, XName.Get("ProprietaryId", ""));
                }
                return this.ProprietaryIdField;
            }
            set {
                if ((value == null)) {
                    this.ProprietaryIdField = null;
                }
                else {
                    if ((this.ProprietaryIdField == null)) {
                        this.ProprietaryIdField = XTypedList<ProprietaryId>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ProprietaryId", ""));
                    }
                    else {
                        XTypedServices.SetList<ProprietaryId>(this.ProprietaryIdField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether this ddex:Identifier is old and has been replaced by a new one (=True) or not (=False). The ddex:Flag may only be set to True when the new ddex:Identifier is also provided. If the ddex:Flag is not set, this ddex:Identifier is deemed to be the current one.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsReplaced {
            get {
                XAttribute x = this.Attribute(XName.Get("IsReplaced", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("IsReplaced", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SheetMusicId", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SheetMusicId>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ISMN", ""), typeof(string));
            localElementDictionary.Add(XName.Get("ProprietaryId", ""), typeof(ProprietaryId));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:SheetMusicType.
    /// </para>
    /// </summary>
    public partial class SheetMusicType : XTypedElement, IXMetaData {
        
         public static explicit operator SheetMusicType(XElement xe) { return XTypedServices.ToXTypedElement<SheetMusicType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:SheetMusicType.
        /// </para>
        /// </summary>
        public SheetMusicType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.SheetMusicType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddexC:SheetMusicType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UserDefined value of the ddexC:SheetMusicType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserDefinedValue {
            get {
                XAttribute x = this.Attribute(XName.Get("UserDefinedValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserDefinedValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SheetMusicType", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SheetMusicType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a society affiliation.
    /// </para>
    /// <para>
    /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), MusicRightsSociety)
    /// </para>
    /// </summary>
    public partial class SocietyAffiliation : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<object> TerritoryCodeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<object> ExcludedTerritoryCodeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator SocietyAffiliation(XElement xe) { return XTypedServices.ToXTypedElement<SocietyAffiliation>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SocietyAffiliation() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a society affiliation.
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), MusicRightsSociety)
        /// </para>
        /// </summary>
        public SocietyAffiliation() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Territory to which the affiliation details apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:ExcludedTerritory shall be present, but not both. 
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), MusicRightsSociety)
        /// </para>
        /// </summary>
        public IList<object> TerritoryCode {
            get {
                if ((this.TerritoryCodeField == null)) {
                    this.TerritoryCodeField = new XSimpleList<object>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, XName.Get("TerritoryCode", ""));
                }
                return this.TerritoryCodeField;
            }
            set {
                if ((value == null)) {
                    this.TerritoryCodeField = null;
                }
                else {
                    if ((this.TerritoryCodeField == null)) {
                        this.TerritoryCodeField = XSimpleList<object>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, value, XName.Get("TerritoryCode", ""));
                    }
                    else {
                        XTypedServices.SetList<System.Object>(this.TerritoryCodeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Territory to which the affiliation details do not apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:Territory shall be present, but not both.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), MusicRightsSociety)
        /// </para>
        /// </summary>
        public IList<object> ExcludedTerritoryCode {
            get {
                if ((this.ExcludedTerritoryCodeField == null)) {
                    this.ExcludedTerritoryCodeField = new XSimpleList<object>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, XName.Get("ExcludedTerritoryCode", ""));
                }
                return this.ExcludedTerritoryCodeField;
            }
            set {
                if ((value == null)) {
                    this.ExcludedTerritoryCodeField = null;
                }
                else {
                    if ((this.ExcludedTerritoryCodeField == null)) {
                        this.ExcludedTerritoryCodeField = XSimpleList<object>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, value, XName.Get("ExcludedTerritoryCode", ""));
                    }
                    else {
                        XTypedServices.SetList<System.Object>(this.ExcludedTerritoryCodeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:MusicRightsSociety.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), MusicRightsSociety)
        /// </para>
        /// </summary>
        public PartyDescriptor MusicRightsSociety {
            get {
                XElement x = this.GetElement(XName.Get("MusicRightsSociety", ""));
                return ((PartyDescriptor)(x));
            }
            set {
                this.SetElement(XName.Get("MusicRightsSociety", ""), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SocietyAffiliation", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SocietyAffiliation>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("TerritoryCode", ""), typeof(object));
            localElementDictionary.Add(XName.Get("ExcludedTerritoryCode", ""), typeof(object));
            localElementDictionary.Add(XName.Get("MusicRightsSociety", ""), typeof(PartyDescriptor));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of ddex:Descriptors, Dates and other attributes of a ddex:Software application which may vary according to ddex:Territory of release.
    /// </para>
    /// <para>
    /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, PLine*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?)
    /// </para>
    /// </summary>
    public partial class SoftwareDetailsByTerritory : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<object> TerritoryCodeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<object> ExcludedTerritoryCodeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ResourceContributor> ResourceContributorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<IndirectResourceContributor> IndirectResourceContributorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PLine> PLineField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CLine> CLineField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator SoftwareDetailsByTerritory(XElement xe) { return XTypedServices.ToXTypedElement<SoftwareDetailsByTerritory>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SoftwareDetailsByTerritory() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:Descriptors, Dates and other attributes of a ddex:Software application which may vary according to ddex:Territory of release.
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, PLine*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?)
        /// </para>
        /// </summary>
        public SoftwareDetailsByTerritory() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Territory to which the ddex:Software details apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:ExcludedTerritory shall be present, but not both. 
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, PLine*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?)
        /// </para>
        /// </summary>
        public IList<object> TerritoryCode {
            get {
                if ((this.TerritoryCodeField == null)) {
                    this.TerritoryCodeField = new XSimpleList<object>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, XName.Get("TerritoryCode", ""));
                }
                return this.TerritoryCodeField;
            }
            set {
                if ((value == null)) {
                    this.TerritoryCodeField = null;
                }
                else {
                    if ((this.TerritoryCodeField == null)) {
                        this.TerritoryCodeField = XSimpleList<object>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, value, XName.Get("TerritoryCode", ""));
                    }
                    else {
                        XTypedServices.SetList<System.Object>(this.TerritoryCodeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Territory to which the ddex:Software details do not apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:Territory shall be present, but not both.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, PLine*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?)
        /// </para>
        /// </summary>
        public IList<object> ExcludedTerritoryCode {
            get {
                if ((this.ExcludedTerritoryCodeField == null)) {
                    this.ExcludedTerritoryCodeField = new XSimpleList<object>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, XName.Get("ExcludedTerritoryCode", ""));
                }
                return this.ExcludedTerritoryCodeField;
            }
            set {
                if ((value == null)) {
                    this.ExcludedTerritoryCodeField = null;
                }
                else {
                    if ((this.ExcludedTerritoryCodeField == null)) {
                        this.ExcludedTerritoryCodeField = XSimpleList<object>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, value, XName.Get("ExcludedTerritoryCode", ""));
                    }
                    else {
                        XTypedServices.SetList<System.Object>(this.ExcludedTerritoryCodeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Contributor to the ddex:Software.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, PLine*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?)
        /// </para>
        /// </summary>
        public IList<ResourceContributor> ResourceContributor {
            get {
                if ((this.ResourceContributorField == null)) {
                    this.ResourceContributorField = new XTypedList<ResourceContributor>(this, LinqToXsdTypeManager.Instance, XName.Get("ResourceContributor", ""));
                }
                return this.ResourceContributorField;
            }
            set {
                if ((value == null)) {
                    this.ResourceContributorField = null;
                }
                else {
                    if ((this.ResourceContributorField == null)) {
                        this.ResourceContributorField = XTypedList<ResourceContributor>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ResourceContributor", ""));
                    }
                    else {
                        XTypedServices.SetList<ResourceContributor>(this.ResourceContributorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of an indirect ddex:Contributor to the ddex:Software.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, PLine*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?)
        /// </para>
        /// </summary>
        public IList<IndirectResourceContributor> IndirectResourceContributor {
            get {
                if ((this.IndirectResourceContributorField == null)) {
                    this.IndirectResourceContributorField = new XTypedList<IndirectResourceContributor>(this, LinqToXsdTypeManager.Instance, XName.Get("IndirectResourceContributor", ""));
                }
                return this.IndirectResourceContributorField;
            }
            set {
                if ((value == null)) {
                    this.IndirectResourceContributorField = null;
                }
                else {
                    if ((this.IndirectResourceContributorField == null)) {
                        this.IndirectResourceContributorField = XTypedList<IndirectResourceContributor>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("IndirectResourceContributor", ""));
                    }
                    else {
                        XTypedServices.SetList<IndirectResourceContributor>(this.IndirectResourceContributorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:PLine for the ddex:Software.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, PLine*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?)
        /// </para>
        /// </summary>
        public IList<PLine> PLine {
            get {
                if ((this.PLineField == null)) {
                    this.PLineField = new XTypedList<PLine>(this, LinqToXsdTypeManager.Instance, XName.Get("PLine", ""));
                }
                return this.PLineField;
            }
            set {
                if ((value == null)) {
                    this.PLineField = null;
                }
                else {
                    if ((this.PLineField == null)) {
                        this.PLineField = XTypedList<PLine>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("PLine", ""));
                    }
                    else {
                        XTypedServices.SetList<PLine>(this.PLineField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:CLine for the ddex:Software.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, PLine*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?)
        /// </para>
        /// </summary>
        public IList<CLine> CLine {
            get {
                if ((this.CLineField == null)) {
                    this.CLineField = new XTypedList<CLine>(this, LinqToXsdTypeManager.Instance, XName.Get("CLine", ""));
                }
                return this.CLineField;
            }
            set {
                if ((value == null)) {
                    this.CLineField = null;
                }
                else {
                    if ((this.CLineField == null)) {
                        this.CLineField = XTypedList<CLine>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CLine", ""));
                    }
                    else {
                        XTypedServices.SetList<CLine>(this.CLineField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing an ddex:Annotation which acknowledges record companies and/or other Parties giving permission for ddex:Artists or others featured in the ddex:Software.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, PLine*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?)
        /// </para>
        /// </summary>
        public CourtesyLine CourtesyLine {
            get {
                XElement x = this.GetElement(XName.Get("CourtesyLine", ""));
                return ((CourtesyLine)(x));
            }
            set {
                this.SetElement(XName.Get("CourtesyLine", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ddex:Software was originally published, whether for physical or electronic/online distribution.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, PLine*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?)
        /// </para>
        /// </summary>
        public EventDate OriginalResourceReleaseDate {
            get {
                XElement x = this.GetElement(XName.Get("OriginalResourceReleaseDate", ""));
                return ((EventDate)(x));
            }
            set {
                this.SetElement(XName.Get("OriginalResourceReleaseDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the ddexC:SoftwareDetailsByTerritory as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SoftwareDetailsByTerritory", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SoftwareDetailsByTerritory>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("TerritoryCode", ""), typeof(object));
            localElementDictionary.Add(XName.Get("ExcludedTerritoryCode", ""), typeof(object));
            localElementDictionary.Add(XName.Get("ResourceContributor", ""), typeof(ResourceContributor));
            localElementDictionary.Add(XName.Get("IndirectResourceContributor", ""), typeof(IndirectResourceContributor));
            localElementDictionary.Add(XName.Get("PLine", ""), typeof(PLine));
            localElementDictionary.Add(XName.Get("CLine", ""), typeof(CLine));
            localElementDictionary.Add(XName.Get("CourtesyLine", ""), typeof(CourtesyLine));
            localElementDictionary.Add(XName.Get("OriginalResourceReleaseDate", ""), typeof(EventDate));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of ddex:Identifiers of a ddex:Software.
    /// </para>
    /// <para>
    /// Regular expression: (ProprietaryId+)
    /// </para>
    /// </summary>
    public partial class SoftwareId : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ProprietaryId> ProprietaryIdField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator SoftwareId(XElement xe) { return XTypedServices.ToXTypedElement<SoftwareId>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SoftwareId() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ProprietaryId", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:Identifiers of a ddex:Software.
        /// </para>
        /// <para>
        /// Regular expression: (ProprietaryId+)
        /// </para>
        /// </summary>
        public SoftwareId() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:ProprietaryIdentifier of the ddex:Software.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ProprietaryId+)
        /// </para>
        /// </summary>
        public IList<ProprietaryId> ProprietaryId {
            get {
                if ((this.ProprietaryIdField == null)) {
                    this.ProprietaryIdField = new XTypedList<ProprietaryId>(this, LinqToXsdTypeManager.Instance, XName.Get("ProprietaryId", ""));
                }
                return this.ProprietaryIdField;
            }
            set {
                if ((value == null)) {
                    this.ProprietaryIdField = null;
                }
                else {
                    if ((this.ProprietaryIdField == null)) {
                        this.ProprietaryIdField = XTypedList<ProprietaryId>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ProprietaryId", ""));
                    }
                    else {
                        XTypedServices.SetList<ProprietaryId>(this.ProprietaryIdField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether this ddex:Identifier is old and has been replaced by a new one (=True) or not (=False). The ddex:Flag may only be set to True when the new ddex:Identifier is also provided. If the ddex:Flag is not set, this ddex:Identifier is deemed to be the current one.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsReplaced {
            get {
                XAttribute x = this.Attribute(XName.Get("IsReplaced", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("IsReplaced", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SoftwareId", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SoftwareId>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ProprietaryId", ""), typeof(ProprietaryId));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:SoftwareType.
    /// </para>
    /// </summary>
    public partial class SoftwareType : XTypedElement, IXMetaData {
        
         public static explicit operator SoftwareType(XElement xe) { return XTypedServices.ToXTypedElement<SoftwareType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:SoftwareType.
        /// </para>
        /// </summary>
        public SoftwareType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.SoftwareType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddexC:SoftwareType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UserDefined value of the ddexC:SoftwareType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserDefinedValue {
            get {
                XAttribute x = this.Attribute(XName.Get("UserDefinedValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserDefinedValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SoftwareType", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SoftwareType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:SoundProcessorType.
    /// </para>
    /// </summary>
    public partial class SoundProcessorType : XTypedElement, IXMetaData {
        
         public static explicit operator SoundProcessorType(XElement xe) { return XTypedServices.ToXTypedElement<SoundProcessorType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:SoundProcessorType.
        /// </para>
        /// </summary>
        public SoundProcessorType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.SoundProcessorType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Identifier of the ddex:Version of the ddexC:SoundProcessorType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Version {
            get {
                XAttribute x = this.Attribute(XName.Get("Version", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Version", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddexC:SoundProcessorType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UserDefined value of the ddexC:SoundProcessorType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserDefinedValue {
            get {
                XAttribute x = this.Attribute(XName.Get("UserDefinedValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserDefinedValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SoundProcessorType", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SoundProcessorType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:SoundRecordingCollectionReference.
    /// </para>
    /// <para>
    /// Regular expression: (SequenceNumber?, SoundRecordingCollectionReference1, StartTime?, Duration?, EndTime?, ReleaseResourceType?)
    /// </para>
    /// </summary>
    public partial class SoundRecordingCollectionReference : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator SoundRecordingCollectionReference(XElement xe) { return XTypedServices.ToXTypedElement<SoundRecordingCollectionReference>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SoundRecordingCollectionReference() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("SequenceNumber", "")), new NamedContentModelEntity(XName.Get("SoundRecordingCollectionReference", "")), new NamedContentModelEntity(XName.Get("StartTime", "")), new NamedContentModelEntity(XName.Get("Duration", "")), new NamedContentModelEntity(XName.Get("EndTime", "")), new NamedContentModelEntity(XName.Get("ReleaseResourceType", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:SoundRecordingCollectionReference.
        /// </para>
        /// <para>
        /// Regular expression: (SequenceNumber?, SoundRecordingCollectionReference1, StartTime?, Duration?, EndTime?, ReleaseResourceType?)
        /// </para>
        /// </summary>
        public SoundRecordingCollectionReference() {
        }
        
        /// <summary>
        /// <para>
        /// The number indicating the order of the ddex:Collection in a group of ddex:Collections within a ddex:Medley, ddex:SoundRecording or other ddex:Collection.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SequenceNumber?, SoundRecordingCollectionReference1, StartTime?, Duration?, EndTime?, ReleaseResourceType?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> SequenceNumber {
            get {
                XElement x = this.GetElement(XName.Get("SequenceNumber", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElement(XName.Get("SequenceNumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Reference for a ddex:Collection (specific to this ddex:Message). This is a ddex:LocalCollectionAnchorReference starting with the letter X. The referenced ddex:Collection has to be of ddex:CollectionType ddex:Series, ddex:Season or ddex:Episode.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SequenceNumber?, SoundRecordingCollectionReference1, StartTime?, Duration?, EndTime?, ReleaseResourceType?)
        /// </para>
        /// </summary>
        public string SoundRecordingCollectionReference1 {
            get {
                XElement x = this.GetElement(XName.Get("SoundRecordingCollectionReference", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("SoundRecordingCollectionReference", ""), value, "SoundRecordingCollectionReference1", SoundRecordingCollectionReference1LocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The start time of the ddex:Creation, measured from the start of the ddex:Resource from which the ddex:CueSheet is referenced (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SequenceNumber?, SoundRecordingCollectionReference1, StartTime?, Duration?, EndTime?, ReleaseResourceType?)
        /// </para>
        /// </summary>
        public System.Nullable<System.TimeSpan> StartTime {
            get {
                XElement x = this.GetElement(XName.Get("StartTime", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
            set {
                this.SetElement(XName.Get("StartTime", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Duration of the use of the ddex:Creation that is referenced in the ddex:CueCreationReference (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SequenceNumber?, SoundRecordingCollectionReference1, StartTime?, Duration?, EndTime?, ReleaseResourceType?)
        /// </para>
        /// </summary>
        public System.Nullable<System.TimeSpan> Duration {
            get {
                XElement x = this.GetElement(XName.Get("Duration", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
            set {
                this.SetElement(XName.Get("Duration", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The end time of the ddex:Creation, measured from the start of the ddex:Resource from which the ddex:CueSheet is referenced (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SequenceNumber?, SoundRecordingCollectionReference1, StartTime?, Duration?, EndTime?, ReleaseResourceType?)
        /// </para>
        /// </summary>
        public System.Nullable<System.TimeSpan> EndTime {
            get {
                XElement x = this.GetElement(XName.Get("EndTime", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
            set {
                this.SetElement(XName.Get("EndTime", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Type of ddex:Collection in the context of a ddex:Video. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SequenceNumber?, SoundRecordingCollectionReference1, StartTime?, Duration?, EndTime?, ReleaseResourceType?)
        /// </para>
        /// </summary>
        public string ReleaseResourceType {
            get {
                XElement x = this.GetElement(XName.Get("ReleaseResourceType", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("ReleaseResourceType", ""), value, "ReleaseResourceType", global::ddex_net.xml._20120404.ddex.ReleaseResourceType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SoundRecordingCollectionReference", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SoundRecordingCollectionReference>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("SequenceNumber", ""), typeof(decimal));
            localElementDictionary.Add(XName.Get("SoundRecordingCollectionReference", ""), typeof(string));
            localElementDictionary.Add(XName.Get("StartTime", ""), typeof(System.TimeSpan));
            localElementDictionary.Add(XName.Get("Duration", ""), typeof(System.TimeSpan));
            localElementDictionary.Add(XName.Get("EndTime", ""), typeof(System.TimeSpan));
            localElementDictionary.Add(XName.Get("ReleaseResourceType", ""), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class SoundRecordingCollectionReference1LocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "X[\\d\\-_a-zA-Z]+"}, 0, XmlSchemaWhiteSpace.Collapse));
            
            private SoundRecordingCollectionReference1LocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing a list of ddex:SoundRecordingCollectionReferences.
    /// </para>
    /// <para>
    /// Regular expression: (NumberOfCollections?, SoundRecordingCollectionReference+)
    /// </para>
    /// </summary>
    public partial class SoundRecordingCollectionReferenceList : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SoundRecordingCollectionReference> SoundRecordingCollectionReferenceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator SoundRecordingCollectionReferenceList(XElement xe) { return XTypedServices.ToXTypedElement<SoundRecordingCollectionReferenceList>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SoundRecordingCollectionReferenceList() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("NumberOfCollections", "")), new NamedContentModelEntity(XName.Get("SoundRecordingCollectionReference", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a list of ddex:SoundRecordingCollectionReferences.
        /// </para>
        /// <para>
        /// Regular expression: (NumberOfCollections?, SoundRecordingCollectionReference+)
        /// </para>
        /// </summary>
        public SoundRecordingCollectionReferenceList() {
        }
        
        /// <summary>
        /// <para>
        /// The number of referenced ddexC:Collections (typically Chapters).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (NumberOfCollections?, SoundRecordingCollectionReference+)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> NumberOfCollections {
            get {
                XElement x = this.GetElement(XName.Get("NumberOfCollections", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElement(XName.Get("NumberOfCollections", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a ddex:SoundRecordingCollectionReference for a ddex:Collection (specific to this ddex:Message).
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (NumberOfCollections?, SoundRecordingCollectionReference+)
        /// </para>
        /// </summary>
        public IList<SoundRecordingCollectionReference> SoundRecordingCollectionReference {
            get {
                if ((this.SoundRecordingCollectionReferenceField == null)) {
                    this.SoundRecordingCollectionReferenceField = new XTypedList<SoundRecordingCollectionReference>(this, LinqToXsdTypeManager.Instance, XName.Get("SoundRecordingCollectionReference", ""));
                }
                return this.SoundRecordingCollectionReferenceField;
            }
            set {
                if ((value == null)) {
                    this.SoundRecordingCollectionReferenceField = null;
                }
                else {
                    if ((this.SoundRecordingCollectionReferenceField == null)) {
                        this.SoundRecordingCollectionReferenceField = XTypedList<SoundRecordingCollectionReference>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("SoundRecordingCollectionReference", ""));
                    }
                    else {
                        XTypedServices.SetList<SoundRecordingCollectionReference>(this.SoundRecordingCollectionReferenceField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SoundRecordingCollectionReferenceList", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SoundRecordingCollectionReferenceList>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("NumberOfCollections", ""), typeof(decimal));
            localElementDictionary.Add(XName.Get("SoundRecordingCollectionReference", ""), typeof(SoundRecordingCollectionReference));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of ddex:Descriptors and other attributes of a ddex:SoundRecording which may vary according to ddex:Territory of release. 
    /// </para>
    /// <para>
    /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*)
    /// </para>
    /// </summary>
    public partial class SoundRecordingDetailsByTerritory : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<object> TerritoryCodeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<object> ExcludedTerritoryCodeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Title> TitleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Artist> DisplayArtistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ResourceContributor> ResourceContributorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<IndirectResourceContributor> IndirectResourceContributorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LabelName> LabelNameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<RightsController> RightsControllerField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PLine> PLineField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator SoundRecordingDetailsByTerritory(XElement xe) { return XTypedServices.ToXTypedElement<SoundRecordingDetailsByTerritory>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SoundRecordingDetailsByTerritory() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:Descriptors and other attributes of a ddex:SoundRecording which may vary according to ddex:Territory of release. 
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*)
        /// </para>
        /// </summary>
        public SoundRecordingDetailsByTerritory() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Territory to which the ddex:SoundRecording details apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:ExcludedTerritory shall be present, but not both. 
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*)
        /// </para>
        /// </summary>
        public IList<object> TerritoryCode {
            get {
                if ((this.TerritoryCodeField == null)) {
                    this.TerritoryCodeField = new XSimpleList<object>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, XName.Get("TerritoryCode", ""));
                }
                return this.TerritoryCodeField;
            }
            set {
                if ((value == null)) {
                    this.TerritoryCodeField = null;
                }
                else {
                    if ((this.TerritoryCodeField == null)) {
                        this.TerritoryCodeField = XSimpleList<object>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, value, XName.Get("TerritoryCode", ""));
                    }
                    else {
                        XTypedServices.SetList<System.Object>(this.TerritoryCodeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Territory to which the ddex:SoundRecording details do not apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:Territory shall be present, but not both.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*)
        /// </para>
        /// </summary>
        public IList<object> ExcludedTerritoryCode {
            get {
                if ((this.ExcludedTerritoryCodeField == null)) {
                    this.ExcludedTerritoryCodeField = new XSimpleList<object>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, XName.Get("ExcludedTerritoryCode", ""));
                }
                return this.ExcludedTerritoryCodeField;
            }
            set {
                if ((value == null)) {
                    this.ExcludedTerritoryCodeField = null;
                }
                else {
                    if ((this.ExcludedTerritoryCodeField == null)) {
                        this.ExcludedTerritoryCodeField = XSimpleList<object>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, value, XName.Get("ExcludedTerritoryCode", ""));
                    }
                    else {
                        XTypedServices.SetList<System.Object>(this.ExcludedTerritoryCodeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Title of the ddex:SoundRecording.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*)
        /// </para>
        /// </summary>
        public IList<Title> Title {
            get {
                if ((this.TitleField == null)) {
                    this.TitleField = new XTypedList<Title>(this, LinqToXsdTypeManager.Instance, XName.Get("Title", ""));
                }
                return this.TitleField;
            }
            set {
                if ((value == null)) {
                    this.TitleField = null;
                }
                else {
                    if ((this.TitleField == null)) {
                        this.TitleField = XTypedList<Title>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Title", ""));
                    }
                    else {
                        XTypedServices.SetList<Title>(this.TitleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:DisplayArtist for the ddex:SoundRecording. The ddex:DisplayArtist may be described through ddex:Name, ddex:Identifier and Roles.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*)
        /// </para>
        /// </summary>
        public IList<Artist> DisplayArtist {
            get {
                if ((this.DisplayArtistField == null)) {
                    this.DisplayArtistField = new XTypedList<Artist>(this, LinqToXsdTypeManager.Instance, XName.Get("DisplayArtist", ""));
                }
                return this.DisplayArtistField;
            }
            set {
                if ((value == null)) {
                    this.DisplayArtistField = null;
                }
                else {
                    if ((this.DisplayArtistField == null)) {
                        this.DisplayArtistField = XTypedList<Artist>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("DisplayArtist", ""));
                    }
                    else {
                        XTypedServices.SetList<Artist>(this.DisplayArtistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Contributor to the ddex:SoundRecording.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*)
        /// </para>
        /// </summary>
        public IList<ResourceContributor> ResourceContributor {
            get {
                if ((this.ResourceContributorField == null)) {
                    this.ResourceContributorField = new XTypedList<ResourceContributor>(this, LinqToXsdTypeManager.Instance, XName.Get("ResourceContributor", ""));
                }
                return this.ResourceContributorField;
            }
            set {
                if ((value == null)) {
                    this.ResourceContributorField = null;
                }
                else {
                    if ((this.ResourceContributorField == null)) {
                        this.ResourceContributorField = XTypedList<ResourceContributor>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ResourceContributor", ""));
                    }
                    else {
                        XTypedServices.SetList<ResourceContributor>(this.ResourceContributorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of an indirect ddex:Contributor to the ddex:SoundRecording.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*)
        /// </para>
        /// </summary>
        public IList<IndirectResourceContributor> IndirectResourceContributor {
            get {
                if ((this.IndirectResourceContributorField == null)) {
                    this.IndirectResourceContributorField = new XTypedList<IndirectResourceContributor>(this, LinqToXsdTypeManager.Instance, XName.Get("IndirectResourceContributor", ""));
                }
                return this.IndirectResourceContributorField;
            }
            set {
                if ((value == null)) {
                    this.IndirectResourceContributorField = null;
                }
                else {
                    if ((this.IndirectResourceContributorField == null)) {
                        this.IndirectResourceContributorField = XTypedList<IndirectResourceContributor>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("IndirectResourceContributor", ""));
                    }
                    else {
                        XTypedServices.SetList<IndirectResourceContributor>(this.IndirectResourceContributorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:Identifiers of a ddex:License, ddex:Claim, ddex:RightShare or contract for the MusicalWork(s) used in the ddex:SoundRecording.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*)
        /// </para>
        /// </summary>
        public RightsAgreementId RightsAgreementId {
            get {
                XElement x = this.GetElement(XName.Get("RightsAgreementId", ""));
                return ((RightsAgreementId)(x));
            }
            set {
                this.SetElement(XName.Get("RightsAgreementId", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing the ddex:Name of the ddex:Label under which the ddex:Release is to be marketed.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*)
        /// </para>
        /// </summary>
        public IList<LabelName> LabelName {
            get {
                if ((this.LabelNameField == null)) {
                    this.LabelNameField = new XTypedList<LabelName>(this, LinqToXsdTypeManager.Instance, XName.Get("LabelName", ""));
                }
                return this.LabelNameField;
            }
            set {
                if ((value == null)) {
                    this.LabelNameField = null;
                }
                else {
                    if ((this.LabelNameField == null)) {
                        this.LabelNameField = XTypedList<LabelName>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("LabelName", ""));
                    }
                    else {
                        XTypedServices.SetList<LabelName>(this.LabelNameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:RightsController of Rights in the ddex:SoundRecording.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*)
        /// </para>
        /// </summary>
        public IList<RightsController> RightsController {
            get {
                if ((this.RightsControllerField == null)) {
                    this.RightsControllerField = new XTypedList<RightsController>(this, LinqToXsdTypeManager.Instance, XName.Get("RightsController", ""));
                }
                return this.RightsControllerField;
            }
            set {
                if ((value == null)) {
                    this.RightsControllerField = null;
                }
                else {
                    if ((this.RightsControllerField == null)) {
                        this.RightsControllerField = XTypedList<RightsController>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("RightsController", ""));
                    }
                    else {
                        XTypedServices.SetList<RightsController>(this.RightsControllerField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ddex:SoundRecording was re-mastered (usually digitally).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*)
        /// </para>
        /// </summary>
        public EventDate RemasteredDate {
            get {
                XElement x = this.GetElement(XName.Get("RemasteredDate", ""));
                return ((EventDate)(x));
            }
            set {
                this.SetElement(XName.Get("RemasteredDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ddex:SoundRecording was originally published, whether for physical or electronic/online distribution.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*)
        /// </para>
        /// </summary>
        public EventDate OriginalResourceReleaseDate {
            get {
                XElement x = this.GetElement(XName.Get("OriginalResourceReleaseDate", ""));
                return ((EventDate)(x));
            }
            set {
                this.SetElement(XName.Get("OriginalResourceReleaseDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:PLine for the ddex:SoundRecording.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*)
        /// </para>
        /// </summary>
        public IList<PLine> PLine {
            get {
                if ((this.PLineField == null)) {
                    this.PLineField = new XTypedList<PLine>(this, LinqToXsdTypeManager.Instance, XName.Get("PLine", ""));
                }
                return this.PLineField;
            }
            set {
                if ((value == null)) {
                    this.PLineField = null;
                }
                else {
                    if ((this.PLineField == null)) {
                        this.PLineField = XTypedList<PLine>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("PLine", ""));
                    }
                    else {
                        XTypedServices.SetList<PLine>(this.PLineField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the ddexC:SoundRecordingDetailsByTerritory as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SoundRecordingDetailsByTerritory", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SoundRecordingDetailsByTerritory>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("TerritoryCode", ""), typeof(object));
            localElementDictionary.Add(XName.Get("ExcludedTerritoryCode", ""), typeof(object));
            localElementDictionary.Add(XName.Get("Title", ""), typeof(Title));
            localElementDictionary.Add(XName.Get("DisplayArtist", ""), typeof(Artist));
            localElementDictionary.Add(XName.Get("ResourceContributor", ""), typeof(ResourceContributor));
            localElementDictionary.Add(XName.Get("IndirectResourceContributor", ""), typeof(IndirectResourceContributor));
            localElementDictionary.Add(XName.Get("RightsAgreementId", ""), typeof(RightsAgreementId));
            localElementDictionary.Add(XName.Get("LabelName", ""), typeof(LabelName));
            localElementDictionary.Add(XName.Get("RightsController", ""), typeof(RightsController));
            localElementDictionary.Add(XName.Get("RemasteredDate", ""), typeof(EventDate));
            localElementDictionary.Add(XName.Get("OriginalResourceReleaseDate", ""), typeof(EventDate));
            localElementDictionary.Add(XName.Get("PLine", ""), typeof(PLine));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of ddex:SoundRecordingIds.
    /// </para>
    /// <para>
    /// Regular expression: (ISRC?, CatalogNumber?, ProprietaryId*)
    /// </para>
    /// </summary>
    public partial class SoundRecordingId : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ProprietaryId> ProprietaryIdField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator SoundRecordingId(XElement xe) { return XTypedServices.ToXTypedElement<SoundRecordingId>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SoundRecordingId() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ISRC", "")), new NamedContentModelEntity(XName.Get("CatalogNumber", "")), new NamedContentModelEntity(XName.Get("ProprietaryId", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:SoundRecordingIds.
        /// </para>
        /// <para>
        /// Regular expression: (ISRC?, CatalogNumber?, ProprietaryId*)
        /// </para>
        /// </summary>
        public SoundRecordingId() {
        }
        
        /// <summary>
        /// <para>
        /// The ddex:ISRC (International Standard ddex:Recording Code as defined in  ISO 3901) for the ddex:SoundRecording. An ddex:ISRC comprises four parts: two characters, followed by three alphanumeric characters, then two digits and five digits. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ISRC?, CatalogNumber?, ProprietaryId*)
        /// </para>
        /// </summary>
        public string ISRC {
            get {
                XElement x = this.GetElement(XName.Get("ISRC", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("ISRC", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:CatalogNumber of the ddex:SoundRecording.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ISRC?, CatalogNumber?, ProprietaryId*)
        /// </para>
        /// </summary>
        public CatalogNumber CatalogNumber {
            get {
                XElement x = this.GetElement(XName.Get("CatalogNumber", ""));
                return ((CatalogNumber)(x));
            }
            set {
                this.SetElement(XName.Get("CatalogNumber", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:ProprietaryIdentifier of the ddex:SoundRecording (usually one per society involved in the messaging).
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ISRC?, CatalogNumber?, ProprietaryId*)
        /// </para>
        /// </summary>
        public IList<ProprietaryId> ProprietaryId {
            get {
                if ((this.ProprietaryIdField == null)) {
                    this.ProprietaryIdField = new XTypedList<ProprietaryId>(this, LinqToXsdTypeManager.Instance, XName.Get("ProprietaryId", ""));
                }
                return this.ProprietaryIdField;
            }
            set {
                if ((value == null)) {
                    this.ProprietaryIdField = null;
                }
                else {
                    if ((this.ProprietaryIdField == null)) {
                        this.ProprietaryIdField = XTypedList<ProprietaryId>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ProprietaryId", ""));
                    }
                    else {
                        XTypedServices.SetList<ProprietaryId>(this.ProprietaryIdField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether this ddex:Identifier is old and has been replaced by a new one (=True) or not (=False). The ddex:Flag may only be set to True when the new ddex:Identifier is also provided. If the ddex:Flag is not set, this ddex:Identifier is deemed to be the current one.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsReplaced {
            get {
                XAttribute x = this.Attribute(XName.Get("IsReplaced", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("IsReplaced", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SoundRecordingId", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SoundRecordingId>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ISRC", ""), typeof(string));
            localElementDictionary.Add(XName.Get("CatalogNumber", ""), typeof(CatalogNumber));
            localElementDictionary.Add(XName.Get("ProprietaryId", ""), typeof(ProprietaryId));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:SoundRecordingType.
    /// </para>
    /// </summary>
    public partial class SoundRecordingType : XTypedElement, IXMetaData {
        
         public static explicit operator SoundRecordingType(XElement xe) { return XTypedServices.ToXTypedElement<SoundRecordingType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:SoundRecordingType.
        /// </para>
        /// </summary>
        public SoundRecordingType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.SoundRecordingType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddexC:SoundRecordingType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UserDefined value of the ddexC:SoundRecordingType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserDefinedValue {
            get {
                XAttribute x = this.Attribute(XName.Get("UserDefinedValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserDefinedValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SoundRecordingType", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SoundRecordingType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:StoreLocationDescriptor.
    /// </para>
    /// </summary>
    public partial class StoreLocationDescriptor : XTypedElement, IXMetaData {
        
         public static explicit operator StoreLocationDescriptor(XElement xe) { return XTypedServices.ToXTypedElement<StoreLocationDescriptor>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:StoreLocationDescriptor.
        /// </para>
        /// </summary>
        public StoreLocationDescriptor() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script of the ddexC:StoreLocationDescriptor as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("StoreLocationDescriptor", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StoreLocationDescriptor>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:SubTitle, including ddex:Titles of ddex:Versions used to differentiate different versions of the same ddex:Title, as required by the ddex:GRid and ddex:ISRC ddex:ReferenceDescriptiveMetadataSets.
    /// </para>
    /// </summary>
    public partial class SubTitle : XTypedElement, IXMetaData {
        
         public static explicit operator SubTitle(XElement xe) { return XTypedServices.ToXTypedElement<SubTitle>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:SubTitle, including ddex:Titles of ddex:Versions used to differentiate different versions of the same ddex:Title, as required by the ddex:GRid and ddex:ISRC ddex:ReferenceDescriptiveMetadataSets.
        /// </para>
        /// </summary>
        public SubTitle() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script of the ddexC:SubTitle as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SubTitle", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SubTitle>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:SupplyChainStatus.
    /// </para>
    /// </summary>
    public partial class SupplyChainStatus : XTypedElement, IXMetaData {
        
         public static explicit operator SupplyChainStatus(XElement xe) { return XTypedServices.ToXTypedElement<SupplyChainStatus>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:SupplyChainStatus.
        /// </para>
        /// </summary>
        public SupplyChainStatus() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.SupplyChainStatus.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddex:SupplyChainStatus. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UserDefined value of the ddex:SupplyChainStatus. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserDefinedValue {
            get {
                XAttribute x = this.Attribute(XName.Get("UserDefinedValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserDefinedValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SupplyChainStatus", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SupplyChainStatus>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:Synopsis.
    /// </para>
    /// </summary>
    public partial class Synopsis : XTypedElement, IXMetaData {
        
         public static explicit operator Synopsis(XElement xe) { return XTypedServices.ToXTypedElement<Synopsis>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Synopsis.
        /// </para>
        /// </summary>
        public Synopsis() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script of the ddexC:Synopsis as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Synopsis", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Synopsis>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:Reference to a ddex:TextDocument containing details of a ddex:Tariff.
    /// </para>
    /// </summary>
    public partial class TariffReference : XTypedElement, IXMetaData {
        
         public static explicit operator TariffReference(XElement xe) { return XTypedServices.ToXTypedElement<TariffReference>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Reference to a ddex:TextDocument containing details of a ddex:Tariff.
        /// </para>
        /// </summary>
        public TariffReference() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script of the ddexC:TariffReference (and the ddex:TariffSubReference if applicable) as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Reference to a ddex:TextDocument containing more specific details of a ddex:Tariff. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string TariffSubReference {
            get {
                XAttribute x = this.Attribute(XName.Get("TariffSubReference", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("TariffSubReference", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("TariffReference", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TariffReference>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:Tax.
    /// </para>
    /// </summary>
    public partial class Tax : XTypedElement, IXMetaData {
        
         public static explicit operator Tax(XElement xe) { return XTypedServices.ToXTypedElement<Tax>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Tax.
        /// </para>
        /// </summary>
        public Tax() {
        }
        
        public decimal TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Currency of the ddexC:Tax (represented by an ISO 4217 iso4217a:CurrencyCode). This is represented in an XML schema as an XML ddex:Attribute. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public object CurrencyCode {
            get {
                XAttribute x = this.Attribute(XName.Get("CurrencyCode", ""));
                return XTypedServices.ParseUnionValue(x, global::ddex_net.xml._20120404.ddexC.CurrencyCode.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "CurrencyCode", this, XName.Get("CurrencyCode", ""), global::ddex_net.xml._20120404.ddexC.CurrencyCode.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Tax", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Tax>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:TaxRate.
    /// </para>
    /// <para>
    /// Regular expression: (Rate, TaxType+, TaxScope+)
    /// </para>
    /// </summary>
    public partial class TaxRate : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TaxType> TaxTypeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TaxScope> TaxScopeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator TaxRate(XElement xe) { return XTypedServices.ToXTypedElement<TaxRate>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TaxRate() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Rate", "")), new NamedContentModelEntity(XName.Get("TaxType", "")), new NamedContentModelEntity(XName.Get("TaxScope", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:TaxRate.
        /// </para>
        /// <para>
        /// Regular expression: (Rate, TaxType+, TaxScope+)
        /// </para>
        /// </summary>
        public TaxRate() {
        }
        
        /// <summary>
        /// <para>
        /// The ddexC:TaxRate as a percentage.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Rate, TaxType+, TaxScope+)
        /// </para>
        /// </summary>
        public decimal Rate {
            get {
                XElement x = this.GetElement(XName.Get("Rate", ""));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElement(XName.Get("Rate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:Type of ddex:Tax.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Rate, TaxType+, TaxScope+)
        /// </para>
        /// </summary>
        public IList<TaxType> TaxType {
            get {
                if ((this.TaxTypeField == null)) {
                    this.TaxTypeField = new XTypedList<TaxType>(this, LinqToXsdTypeManager.Instance, XName.Get("TaxType", ""));
                }
                return this.TaxTypeField;
            }
            set {
                if ((value == null)) {
                    this.TaxTypeField = null;
                }
                else {
                    if ((this.TaxTypeField == null)) {
                        this.TaxTypeField = XTypedList<TaxType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("TaxType", ""));
                    }
                    else {
                        XTypedServices.SetList<TaxType>(this.TaxTypeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:Type of ddex:Tax according to its scope.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Rate, TaxType+, TaxScope+)
        /// </para>
        /// </summary>
        public IList<TaxScope> TaxScope {
            get {
                if ((this.TaxScopeField == null)) {
                    this.TaxScopeField = new XTypedList<TaxScope>(this, LinqToXsdTypeManager.Instance, XName.Get("TaxScope", ""));
                }
                return this.TaxScopeField;
            }
            set {
                if ((value == null)) {
                    this.TaxScopeField = null;
                }
                else {
                    if ((this.TaxScopeField == null)) {
                        this.TaxScopeField = XTypedList<TaxScope>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("TaxScope", ""));
                    }
                    else {
                        XTypedServices.SetList<TaxScope>(this.TaxScopeField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("TaxRate", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TaxRate>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Rate", ""), typeof(decimal));
            localElementDictionary.Add(XName.Get("TaxType", ""), typeof(TaxType));
            localElementDictionary.Add(XName.Get("TaxScope", ""), typeof(TaxScope));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:TaxScope.
    /// </para>
    /// </summary>
    public partial class TaxScope : XTypedElement, IXMetaData {
        
         public static explicit operator TaxScope(XElement xe) { return XTypedServices.ToXTypedElement<TaxScope>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:TaxScope.
        /// </para>
        /// </summary>
        public TaxScope() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.TaxScope.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddexC:TaxScope. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UserDefined value of the ddexC:TaxScope. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserDefinedValue {
            get {
                XAttribute x = this.Attribute(XName.Get("UserDefinedValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserDefinedValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("TaxScope", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TaxScope>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:TaxType.
    /// </para>
    /// </summary>
    public partial class TaxType : XTypedElement, IXMetaData {
        
         public static explicit operator TaxType(XElement xe) { return XTypedServices.ToXTypedElement<TaxType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:TaxType.
        /// </para>
        /// </summary>
        public TaxType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.TaxType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddexC:TaxType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UserDefined value of the ddexC:TaxType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserDefinedValue {
            get {
                XAttribute x = this.Attribute(XName.Get("UserDefinedValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserDefinedValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("TaxType", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TaxType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing technical details of a ddex:Release.
    /// </para>
    /// <para>
    /// Regular expression: (DrmEnforcementType?, VideoDefinitionType?, CodingType?, BitRate?)
    /// </para>
    /// </summary>
    public partial class TechnicalInstantiation : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator TechnicalInstantiation(XElement xe) { return XTypedServices.ToXTypedElement<TechnicalInstantiation>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TechnicalInstantiation() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("DrmEnforcementType", "")), new NamedContentModelEntity(XName.Get("VideoDefinitionType", "")), new NamedContentModelEntity(XName.Get("CodingType", "")), new NamedContentModelEntity(XName.Get("BitRate", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing technical details of a ddex:Release.
        /// </para>
        /// <para>
        /// Regular expression: (DrmEnforcementType?, VideoDefinitionType?, CodingType?, BitRate?)
        /// </para>
        /// </summary>
        public TechnicalInstantiation() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Type of DRM enforcement.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DrmEnforcementType?, VideoDefinitionType?, CodingType?, BitRate?)
        /// </para>
        /// </summary>
        public string DrmEnforcementType {
            get {
                XElement x = this.GetElement(XName.Get("DrmEnforcementType", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("DrmEnforcementType", ""), value, "DrmEnforcementType", global::ddex_net.xml._20120404.ddex.DrmEnforcementType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Type of resolution (or definition) in which a ddex:Video is provided.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DrmEnforcementType?, VideoDefinitionType?, CodingType?, BitRate?)
        /// </para>
        /// </summary>
        public string VideoDefinitionType {
            get {
                XElement x = this.GetElement(XName.Get("VideoDefinitionType", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("VideoDefinitionType", ""), value, "VideoDefinitionType", global::ddex_net.xml._20120404.ddex.VideoDefinitionType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Type of coding used to encode a ddex:Resource.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DrmEnforcementType?, VideoDefinitionType?, CodingType?, BitRate?)
        /// </para>
        /// </summary>
        public string CodingType {
            get {
                XElement x = this.GetElement(XName.Get("CodingType", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("CodingType", ""), value, "CodingType", global::ddex_net.xml._20120404.ddex.CodingType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing the ddex:BitRate for the audio data and a ddex:UnitOfMeasure (the default is ddex:kbps).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DrmEnforcementType?, VideoDefinitionType?, CodingType?, BitRate?)
        /// </para>
        /// </summary>
        public BitRate BitRate {
            get {
                XElement x = this.GetElement(XName.Get("BitRate", ""));
                return ((BitRate)(x));
            }
            set {
                this.SetElement(XName.Get("BitRate", ""), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("TechnicalInstantiation", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TechnicalInstantiation>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("DrmEnforcementType", ""), typeof(string));
            localElementDictionary.Add(XName.Get("VideoDefinitionType", ""), typeof(string));
            localElementDictionary.Add(XName.Get("CodingType", ""), typeof(string));
            localElementDictionary.Add(XName.Get("BitRate", ""), typeof(BitRate));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:TextCodecType.
    /// </para>
    /// </summary>
    public partial class TextCodecType : XTypedElement, IXMetaData {
        
         public static explicit operator TextCodecType(XElement xe) { return XTypedServices.ToXTypedElement<TextCodecType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:TextCodecType.
        /// </para>
        /// </summary>
        public TextCodecType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.TextCodecType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Identifier of the ddex:Version of the ddexC:TextCodecType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Version {
            get {
                XAttribute x = this.Attribute(XName.Get("Version", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Version", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddexC:TextCodecType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UserDefined value of the ddexC:TextCodecType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserDefinedValue {
            get {
                XAttribute x = this.Attribute(XName.Get("UserDefinedValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserDefinedValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("TextCodecType", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TextCodecType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of ddex:Descriptors, Dates and other attributes of a ddex:Text which may vary according to ddex:Territory of release.
    /// </para>
    /// <para>
    /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?)
    /// </para>
    /// </summary>
    public partial class TextDetailsByTerritory : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<object> TerritoryCodeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<object> ExcludedTerritoryCodeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ResourceContributor> ResourceContributorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<IndirectResourceContributor> IndirectResourceContributorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CLine> CLineField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator TextDetailsByTerritory(XElement xe) { return XTypedServices.ToXTypedElement<TextDetailsByTerritory>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TextDetailsByTerritory() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:Descriptors, Dates and other attributes of a ddex:Text which may vary according to ddex:Territory of release.
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?)
        /// </para>
        /// </summary>
        public TextDetailsByTerritory() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Territory to which the ddex:Text details apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:ExcludedTerritory shall be present, but not both.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?)
        /// </para>
        /// </summary>
        public IList<object> TerritoryCode {
            get {
                if ((this.TerritoryCodeField == null)) {
                    this.TerritoryCodeField = new XSimpleList<object>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, XName.Get("TerritoryCode", ""));
                }
                return this.TerritoryCodeField;
            }
            set {
                if ((value == null)) {
                    this.TerritoryCodeField = null;
                }
                else {
                    if ((this.TerritoryCodeField == null)) {
                        this.TerritoryCodeField = XSimpleList<object>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, value, XName.Get("TerritoryCode", ""));
                    }
                    else {
                        XTypedServices.SetList<System.Object>(this.TerritoryCodeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Territory to which the ddex:Text details do not apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:Territory shall be present, but not both.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?)
        /// </para>
        /// </summary>
        public IList<object> ExcludedTerritoryCode {
            get {
                if ((this.ExcludedTerritoryCodeField == null)) {
                    this.ExcludedTerritoryCodeField = new XSimpleList<object>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, XName.Get("ExcludedTerritoryCode", ""));
                }
                return this.ExcludedTerritoryCodeField;
            }
            set {
                if ((value == null)) {
                    this.ExcludedTerritoryCodeField = null;
                }
                else {
                    if ((this.ExcludedTerritoryCodeField == null)) {
                        this.ExcludedTerritoryCodeField = XSimpleList<object>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, value, XName.Get("ExcludedTerritoryCode", ""));
                    }
                    else {
                        XTypedServices.SetList<System.Object>(this.ExcludedTerritoryCodeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Contributor to the ddex:Text.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?)
        /// </para>
        /// </summary>
        public IList<ResourceContributor> ResourceContributor {
            get {
                if ((this.ResourceContributorField == null)) {
                    this.ResourceContributorField = new XTypedList<ResourceContributor>(this, LinqToXsdTypeManager.Instance, XName.Get("ResourceContributor", ""));
                }
                return this.ResourceContributorField;
            }
            set {
                if ((value == null)) {
                    this.ResourceContributorField = null;
                }
                else {
                    if ((this.ResourceContributorField == null)) {
                        this.ResourceContributorField = XTypedList<ResourceContributor>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ResourceContributor", ""));
                    }
                    else {
                        XTypedServices.SetList<ResourceContributor>(this.ResourceContributorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of an indirect ddex:Contributor to the ddex:Text.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?)
        /// </para>
        /// </summary>
        public IList<IndirectResourceContributor> IndirectResourceContributor {
            get {
                if ((this.IndirectResourceContributorField == null)) {
                    this.IndirectResourceContributorField = new XTypedList<IndirectResourceContributor>(this, LinqToXsdTypeManager.Instance, XName.Get("IndirectResourceContributor", ""));
                }
                return this.IndirectResourceContributorField;
            }
            set {
                if ((value == null)) {
                    this.IndirectResourceContributorField = null;
                }
                else {
                    if ((this.IndirectResourceContributorField == null)) {
                        this.IndirectResourceContributorField = XTypedList<IndirectResourceContributor>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("IndirectResourceContributor", ""));
                    }
                    else {
                        XTypedServices.SetList<IndirectResourceContributor>(this.IndirectResourceContributorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:CLine for the ddex:Text.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?)
        /// </para>
        /// </summary>
        public IList<CLine> CLine {
            get {
                if ((this.CLineField == null)) {
                    this.CLineField = new XTypedList<CLine>(this, LinqToXsdTypeManager.Instance, XName.Get("CLine", ""));
                }
                return this.CLineField;
            }
            set {
                if ((value == null)) {
                    this.CLineField = null;
                }
                else {
                    if ((this.CLineField == null)) {
                        this.CLineField = XTypedList<CLine>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CLine", ""));
                    }
                    else {
                        XTypedServices.SetList<CLine>(this.CLineField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing an ddex:Annotation which acknowledges record companies and/or other Parties giving permission for ddex:Artists or others featured in the ddex:Text.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?)
        /// </para>
        /// </summary>
        public CourtesyLine CourtesyLine {
            get {
                XElement x = this.GetElement(XName.Get("CourtesyLine", ""));
                return ((CourtesyLine)(x));
            }
            set {
                this.SetElement(XName.Get("CourtesyLine", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ddex:Text was originally published, whether for physical or electronic/online distribution.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, CLine*, CourtesyLine?, OriginalResourceReleaseDate?)
        /// </para>
        /// </summary>
        public EventDate OriginalResourceReleaseDate {
            get {
                XElement x = this.GetElement(XName.Get("OriginalResourceReleaseDate", ""));
                return ((EventDate)(x));
            }
            set {
                this.SetElement(XName.Get("OriginalResourceReleaseDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the ddexC:TextDetailsByTerritory as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("TextDetailsByTerritory", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TextDetailsByTerritory>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("TerritoryCode", ""), typeof(object));
            localElementDictionary.Add(XName.Get("ExcludedTerritoryCode", ""), typeof(object));
            localElementDictionary.Add(XName.Get("ResourceContributor", ""), typeof(ResourceContributor));
            localElementDictionary.Add(XName.Get("IndirectResourceContributor", ""), typeof(IndirectResourceContributor));
            localElementDictionary.Add(XName.Get("CLine", ""), typeof(CLine));
            localElementDictionary.Add(XName.Get("CourtesyLine", ""), typeof(CourtesyLine));
            localElementDictionary.Add(XName.Get("OriginalResourceReleaseDate", ""), typeof(EventDate));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of ddex:Identifiers of a ddex:Text.
    /// </para>
    /// <para>
    /// Regular expression: (ISBN?, ISSN?, SICI?, ProprietaryId*)
    /// </para>
    /// </summary>
    public partial class TextId : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ProprietaryId> ProprietaryIdField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator TextId(XElement xe) { return XTypedServices.ToXTypedElement<TextId>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TextId() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ISBN", "")), new NamedContentModelEntity(XName.Get("ISSN", "")), new NamedContentModelEntity(XName.Get("SICI", "")), new NamedContentModelEntity(XName.Get("ProprietaryId", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:Identifiers of a ddex:Text.
        /// </para>
        /// <para>
        /// Regular expression: (ISBN?, ISSN?, SICI?, ProprietaryId*)
        /// </para>
        /// </summary>
        public TextId() {
        }
        
        /// <summary>
        /// <para>
        /// The ddex:ISBN (International Standard Book Number defined in ISO 2108) for the ddex:Text. An ddex:ISBN is a 13-digit number. Pre-2007, ddex:ISBNs, which had 10-digits and are now deprecated, are converted by adding the prefix '978' and re-calculating the check character.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ISBN?, ISSN?, SICI?, ProprietaryId*)
        /// </para>
        /// </summary>
        public string ISBN {
            get {
                XElement x = this.GetElement(XName.Get("ISBN", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("ISBN", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:ISSN (International Standard Serial Number defined in ISO 3297) identifying the ddex:Text. An ddex:ISSN comprises two groups of four digits, separated by a hyphen and a control digit.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ISBN?, ISSN?, SICI?, ProprietaryId*)
        /// </para>
        /// </summary>
        public string ISSN {
            get {
                XElement x = this.GetElement(XName.Get("ISSN", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("ISSN", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:SICI (Serial Item and Contribution ddex:Identifier defined in ANSI/NISO Z39.56-199)  for the ddex:Text.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ISBN?, ISSN?, SICI?, ProprietaryId*)
        /// </para>
        /// </summary>
        public string SICI {
            get {
                XElement x = this.GetElement(XName.Get("SICI", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("SICI", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:ProprietaryIdentifier of the ddex:Text (usually one per society involved in the messaging).
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ISBN?, ISSN?, SICI?, ProprietaryId*)
        /// </para>
        /// </summary>
        public IList<ProprietaryId> ProprietaryId {
            get {
                if ((this.ProprietaryIdField == null)) {
                    this.ProprietaryIdField = new XTypedList<ProprietaryId>(this, LinqToXsdTypeManager.Instance, XName.Get("ProprietaryId", ""));
                }
                return this.ProprietaryIdField;
            }
            set {
                if ((value == null)) {
                    this.ProprietaryIdField = null;
                }
                else {
                    if ((this.ProprietaryIdField == null)) {
                        this.ProprietaryIdField = XTypedList<ProprietaryId>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ProprietaryId", ""));
                    }
                    else {
                        XTypedServices.SetList<ProprietaryId>(this.ProprietaryIdField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether this ddex:Identifier is old and has been replaced by a new one (=True) or not (=False). The ddex:Flag may only be set to True when the new ddex:Identifier is also provided. If the ddex:Flag is not set, this ddex:Identifier is deemed to be the current one.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsReplaced {
            get {
                XAttribute x = this.Attribute(XName.Get("IsReplaced", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("IsReplaced", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("TextId", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TextId>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ISBN", ""), typeof(string));
            localElementDictionary.Add(XName.Get("ISSN", ""), typeof(string));
            localElementDictionary.Add(XName.Get("SICI", ""), typeof(string));
            localElementDictionary.Add(XName.Get("ProprietaryId", ""), typeof(ProprietaryId));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:TextType.
    /// </para>
    /// </summary>
    public partial class TextType : XTypedElement, IXMetaData {
        
         public static explicit operator TextType(XElement xe) { return XTypedServices.ToXTypedElement<TextType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:TextType.
        /// </para>
        /// </summary>
        public TextType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.TextType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddexC:TextType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UserDefined value of the ddexC:TextType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserDefinedValue {
            get {
                XAttribute x = this.Attribute(XName.Get("UserDefinedValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserDefinedValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("TextType", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TextType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:Title.
    /// </para>
    /// <para>
    /// Regular expression: (TitleText, SubTitle*)
    /// </para>
    /// </summary>
    public partial class Title : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TypedSubTitle> SubTitleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Title(XElement xe) { return XTypedServices.ToXTypedElement<Title>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Title() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("TitleText", "")), new NamedContentModelEntity(XName.Get("SubTitle", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Title.
        /// </para>
        /// <para>
        /// Regular expression: (TitleText, SubTitle*)
        /// </para>
        /// </summary>
        public Title() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing the text of the ddexC:Title.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TitleText, SubTitle*)
        /// </para>
        /// </summary>
        public TitleText TitleText {
            get {
                XElement x = this.GetElement(XName.Get("TitleText", ""));
                return ((TitleText)(x));
            }
            set {
                this.SetElement(XName.Get("TitleText", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:SubTitle of the ddexC:Title, including ddex:Titles of ddex:Versions used to differentiate different versions of the same ddex:Title, as required by the ddex:GRid and ddex:ISRC ddex:ReferenceDescriptiveMetadataSets.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (TitleText, SubTitle*)
        /// </para>
        /// </summary>
        public IList<TypedSubTitle> SubTitle {
            get {
                if ((this.SubTitleField == null)) {
                    this.SubTitleField = new XTypedList<TypedSubTitle>(this, LinqToXsdTypeManager.Instance, XName.Get("SubTitle", ""));
                }
                return this.SubTitleField;
            }
            set {
                if ((value == null)) {
                    this.SubTitleField = null;
                }
                else {
                    if ((this.SubTitleField == null)) {
                        this.SubTitleField = XTypedList<TypedSubTitle>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("SubTitle", ""));
                    }
                    else {
                        XTypedServices.SetList<TypedSubTitle>(this.SubTitleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the ddexC:Title as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Type of the ddexC:Title which defines its origin or the function it fulfils in relation to a ddex:Creation. Note: A ddexC:Title may fulfil more than one role. Example: 'Help' may be both the ddex:OriginalTitle and the ddex:DisplayTitle for the well-known Beatles song. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string TitleType {
            get {
                XAttribute x = this.Attribute(XName.Get("TitleType", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("TitleType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Title", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Title>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("TitleText", ""), typeof(TitleText));
            localElementDictionary.Add(XName.Get("SubTitle", ""), typeof(TypedSubTitle));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:TitleText.
    /// </para>
    /// </summary>
    public partial class TitleText : XTypedElement, IXMetaData {
        
         public static explicit operator TitleText(XElement xe) { return XTypedServices.ToXTypedElement<TitleText>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:TitleText.
        /// </para>
        /// </summary>
        public TitleText() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script of the ddexC:TitleText as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("TitleText", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TitleText>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a total ddex:RoyaltyAmount.
    /// </para>
    /// <para>
    /// Regular expression: (ReleaseType*, RightsType*, RoyaltyAmount)
    /// </para>
    /// </summary>
    public partial class TotalRoyaltyAmount : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ReleaseType> ReleaseTypeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<RightsType> RightsTypeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator TotalRoyaltyAmount(XElement xe) { return XTypedServices.ToXTypedElement<TotalRoyaltyAmount>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TotalRoyaltyAmount() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ReleaseType", "")), new NamedContentModelEntity(XName.Get("RightsType", "")), new NamedContentModelEntity(XName.Get("RoyaltyAmount", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a total ddex:RoyaltyAmount.
        /// </para>
        /// <para>
        /// Regular expression: (ReleaseType*, RightsType*, RoyaltyAmount)
        /// </para>
        /// </summary>
        public TotalRoyaltyAmount() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:ReleaseType for which the ddex:RoyaltyAmount is calculated.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ReleaseType*, RightsType*, RoyaltyAmount)
        /// </para>
        /// </summary>
        public IList<ReleaseType> ReleaseType {
            get {
                if ((this.ReleaseTypeField == null)) {
                    this.ReleaseTypeField = new XTypedList<ReleaseType>(this, LinqToXsdTypeManager.Instance, XName.Get("ReleaseType", ""));
                }
                return this.ReleaseTypeField;
            }
            set {
                if ((value == null)) {
                    this.ReleaseTypeField = null;
                }
                else {
                    if ((this.ReleaseTypeField == null)) {
                        this.ReleaseTypeField = XTypedList<ReleaseType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ReleaseType", ""));
                    }
                    else {
                        XTypedServices.SetList<ReleaseType>(this.ReleaseTypeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the RightsType for which the ddex:RoyaltyAmount is calculated.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ReleaseType*, RightsType*, RoyaltyAmount)
        /// </para>
        /// </summary>
        public IList<RightsType> RightsType {
            get {
                if ((this.RightsTypeField == null)) {
                    this.RightsTypeField = new XTypedList<RightsType>(this, LinqToXsdTypeManager.Instance, XName.Get("RightsType", ""));
                }
                return this.RightsTypeField;
            }
            set {
                if ((value == null)) {
                    this.RightsTypeField = null;
                }
                else {
                    if ((this.RightsTypeField == null)) {
                        this.RightsTypeField = XTypedList<RightsType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("RightsType", ""));
                    }
                    else {
                        XTypedServices.SetList<RightsType>(this.RightsTypeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:RoyaltyAmount due.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ReleaseType*, RightsType*, RoyaltyAmount)
        /// </para>
        /// </summary>
        public RoyaltyAmount RoyaltyAmount {
            get {
                XElement x = this.GetElement(XName.Get("RoyaltyAmount", ""));
                return ((RoyaltyAmount)(x));
            }
            set {
                this.SetElement(XName.Get("RoyaltyAmount", ""), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("TotalRoyaltyAmount", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TotalRoyaltyAmount>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ReleaseType", ""), typeof(ReleaseType));
            localElementDictionary.Add(XName.Get("RightsType", ""), typeof(RightsType));
            localElementDictionary.Add(XName.Get("RoyaltyAmount", ""), typeof(RoyaltyAmount));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:SubTitle, including ddex:Titles of ddex:Versions used to differentiate different versions of the same ddex:Title, as required by the ddex:GRid and ddex:ISRC ddex:ReferenceDescriptiveMetadataSets.
    /// </para>
    /// </summary>
    public partial class TypedSubTitle : XTypedElement, IXMetaData {
        
         public static explicit operator TypedSubTitle(XElement xe) { return XTypedServices.ToXTypedElement<TypedSubTitle>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:SubTitle, including ddex:Titles of ddex:Versions used to differentiate different versions of the same ddex:Title, as required by the ddex:GRid and ddex:ISRC ddex:ReferenceDescriptiveMetadataSets.
        /// </para>
        /// </summary>
        public TypedSubTitle() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script of the ddexC:SubTitle as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Type of the ddexC:SubTitle which defines its origin or the function it fulfils. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string SubTitleType {
            get {
                XAttribute x = this.Attribute(XName.Get("SubTitleType", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("SubTitleType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("TypedSubTitle", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TypedSubTitle>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing ddex:Types and number of Usages of a ddex:Release.
    /// </para>
    /// <para>
    /// Regular expression: (UseType+, UserInterfaceType*, DistributionChannelType*, CarrierType*, TechnicalInstantiation?, NumberOfUsages?)
    /// </para>
    /// </summary>
    public partial class Usage : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UseType> UseTypeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UserInterfaceType> UserInterfaceTypeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DistributionChannelType> DistributionChannelTypeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CarrierType> CarrierTypeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Usage(XElement xe) { return XTypedServices.ToXTypedElement<Usage>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Usage() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("UseType", "")), new NamedContentModelEntity(XName.Get("UserInterfaceType", "")), new NamedContentModelEntity(XName.Get("DistributionChannelType", "")), new NamedContentModelEntity(XName.Get("CarrierType", "")), new NamedContentModelEntity(XName.Get("TechnicalInstantiation", "")), new NamedContentModelEntity(XName.Get("NumberOfUsages", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing ddex:Types and number of Usages of a ddex:Release.
        /// </para>
        /// <para>
        /// Regular expression: (UseType+, UserInterfaceType*, DistributionChannelType*, CarrierType*, TechnicalInstantiation?, NumberOfUsages?)
        /// </para>
        /// </summary>
        public Usage() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a nature of a ddex:Service, or a ddex:Release, as used by a ddex:Consumer.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (UseType+, UserInterfaceType*, DistributionChannelType*, CarrierType*, TechnicalInstantiation?, NumberOfUsages?)
        /// </para>
        /// </summary>
        public IList<UseType> UseType {
            get {
                if ((this.UseTypeField == null)) {
                    this.UseTypeField = new XTypedList<UseType>(this, LinqToXsdTypeManager.Instance, XName.Get("UseType", ""));
                }
                return this.UseTypeField;
            }
            set {
                if ((value == null)) {
                    this.UseTypeField = null;
                }
                else {
                    if ((this.UseTypeField == null)) {
                        this.UseTypeField = XTypedList<UseType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("UseType", ""));
                    }
                    else {
                        XTypedServices.SetList<UseType>(this.UseTypeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a physical interface by which a ddex:Consumer is intended to use a ddex:Service or ddex:Release.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (UseType+, UserInterfaceType*, DistributionChannelType*, CarrierType*, TechnicalInstantiation?, NumberOfUsages?)
        /// </para>
        /// </summary>
        public IList<UserInterfaceType> UserInterfaceType {
            get {
                if ((this.UserInterfaceTypeField == null)) {
                    this.UserInterfaceTypeField = new XTypedList<UserInterfaceType>(this, LinqToXsdTypeManager.Instance, XName.Get("UserInterfaceType", ""));
                }
                return this.UserInterfaceTypeField;
            }
            set {
                if ((value == null)) {
                    this.UserInterfaceTypeField = null;
                }
                else {
                    if ((this.UserInterfaceTypeField == null)) {
                        this.UserInterfaceTypeField = XTypedList<UserInterfaceType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("UserInterfaceType", ""));
                    }
                    else {
                        XTypedServices.SetList<UserInterfaceType>(this.UserInterfaceTypeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a distribution channel intended to be used to disseminate a ddex:Service or ddex:Release to a ddex:Consumer.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (UseType+, UserInterfaceType*, DistributionChannelType*, CarrierType*, TechnicalInstantiation?, NumberOfUsages?)
        /// </para>
        /// </summary>
        public IList<DistributionChannelType> DistributionChannelType {
            get {
                if ((this.DistributionChannelTypeField == null)) {
                    this.DistributionChannelTypeField = new XTypedList<DistributionChannelType>(this, LinqToXsdTypeManager.Instance, XName.Get("DistributionChannelType", ""));
                }
                return this.DistributionChannelTypeField;
            }
            set {
                if ((value == null)) {
                    this.DistributionChannelTypeField = null;
                }
                else {
                    if ((this.DistributionChannelTypeField == null)) {
                        this.DistributionChannelTypeField = XTypedList<DistributionChannelType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("DistributionChannelType", ""));
                    }
                    else {
                        XTypedServices.SetList<DistributionChannelType>(this.DistributionChannelTypeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Carrier.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (UseType+, UserInterfaceType*, DistributionChannelType*, CarrierType*, TechnicalInstantiation?, NumberOfUsages?)
        /// </para>
        /// </summary>
        public IList<CarrierType> CarrierType {
            get {
                if ((this.CarrierTypeField == null)) {
                    this.CarrierTypeField = new XTypedList<CarrierType>(this, LinqToXsdTypeManager.Instance, XName.Get("CarrierType", ""));
                }
                return this.CarrierTypeField;
            }
            set {
                if ((value == null)) {
                    this.CarrierTypeField = null;
                }
                else {
                    if ((this.CarrierTypeField == null)) {
                        this.CarrierTypeField = XTypedList<CarrierType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CarrierType", ""));
                    }
                    else {
                        XTypedServices.SetList<CarrierType>(this.CarrierTypeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing technical details of the ddex:Release.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (UseType+, UserInterfaceType*, DistributionChannelType*, CarrierType*, TechnicalInstantiation?, NumberOfUsages?)
        /// </para>
        /// </summary>
        public TechnicalInstantiation TechnicalInstantiation {
            get {
                XElement x = this.GetElement(XName.Get("TechnicalInstantiation", ""));
                return ((TechnicalInstantiation)(x));
            }
            set {
                this.SetElement(XName.Get("TechnicalInstantiation", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The number of times a ddex:Release can be used under the terms of the ddex:Deal.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (UseType+, UserInterfaceType*, DistributionChannelType*, CarrierType*, TechnicalInstantiation?, NumberOfUsages?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> NumberOfUsages {
            get {
                XElement x = this.GetElement(XName.Get("NumberOfUsages", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElement(XName.Get("NumberOfUsages", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Usage", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Usage>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("UseType", ""), typeof(UseType));
            localElementDictionary.Add(XName.Get("UserInterfaceType", ""), typeof(UserInterfaceType));
            localElementDictionary.Add(XName.Get("DistributionChannelType", ""), typeof(DistributionChannelType));
            localElementDictionary.Add(XName.Get("CarrierType", ""), typeof(CarrierType));
            localElementDictionary.Add(XName.Get("TechnicalInstantiation", ""), typeof(TechnicalInstantiation));
            localElementDictionary.Add(XName.Get("NumberOfUsages", ""), typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:UseType.
    /// </para>
    /// </summary>
    public partial class UseType : XTypedElement, IXMetaData {
        
         public static explicit operator UseType(XElement xe) { return XTypedServices.ToXTypedElement<UseType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:UseType.
        /// </para>
        /// </summary>
        public UseType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.UseType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddexC:UseType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UserDefined value of the ddexC:UseType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserDefinedValue {
            get {
                XAttribute x = this.Attribute(XName.Get("UserDefinedValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserDefinedValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("UseType", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<UseType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of ddex:Descriptors, Dates and other attributes of a ddex:UserDefinedResource application which may vary according to ddex:Territory of release.
    /// </para>
    /// <para>
    /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, UserDefinedValue*, PLine*, CLine*, OriginalResourceReleaseDate?)
    /// </para>
    /// </summary>
    public partial class UserDefinedResourceDetailsByTerritory : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<object> TerritoryCodeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<object> ExcludedTerritoryCodeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ResourceContributor> ResourceContributorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<IndirectResourceContributor> IndirectResourceContributorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UserDefinedValue> UserDefinedValueField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PLine> PLineField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CLine> CLineField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator UserDefinedResourceDetailsByTerritory(XElement xe) { return XTypedServices.ToXTypedElement<UserDefinedResourceDetailsByTerritory>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static UserDefinedResourceDetailsByTerritory() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:Descriptors, Dates and other attributes of a ddex:UserDefinedResource application which may vary according to ddex:Territory of release.
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, UserDefinedValue*, PLine*, CLine*, OriginalResourceReleaseDate?)
        /// </para>
        /// </summary>
        public UserDefinedResourceDetailsByTerritory() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Territory to which the ddex:UserDefinedResource details apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:ExcludedTerritory shall be present, but not both. 
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, UserDefinedValue*, PLine*, CLine*, OriginalResourceReleaseDate?)
        /// </para>
        /// </summary>
        public IList<object> TerritoryCode {
            get {
                if ((this.TerritoryCodeField == null)) {
                    this.TerritoryCodeField = new XSimpleList<object>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, XName.Get("TerritoryCode", ""));
                }
                return this.TerritoryCodeField;
            }
            set {
                if ((value == null)) {
                    this.TerritoryCodeField = null;
                }
                else {
                    if ((this.TerritoryCodeField == null)) {
                        this.TerritoryCodeField = XSimpleList<object>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, value, XName.Get("TerritoryCode", ""));
                    }
                    else {
                        XTypedServices.SetList<System.Object>(this.TerritoryCodeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Territory to which the ddex:UserDefinedResource details do not apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:Territory shall be present, but not both.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, UserDefinedValue*, PLine*, CLine*, OriginalResourceReleaseDate?)
        /// </para>
        /// </summary>
        public IList<object> ExcludedTerritoryCode {
            get {
                if ((this.ExcludedTerritoryCodeField == null)) {
                    this.ExcludedTerritoryCodeField = new XSimpleList<object>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, XName.Get("ExcludedTerritoryCode", ""));
                }
                return this.ExcludedTerritoryCodeField;
            }
            set {
                if ((value == null)) {
                    this.ExcludedTerritoryCodeField = null;
                }
                else {
                    if ((this.ExcludedTerritoryCodeField == null)) {
                        this.ExcludedTerritoryCodeField = XSimpleList<object>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, value, XName.Get("ExcludedTerritoryCode", ""));
                    }
                    else {
                        XTypedServices.SetList<System.Object>(this.ExcludedTerritoryCodeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Contributor to the ddex:UserDefinedResource.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, UserDefinedValue*, PLine*, CLine*, OriginalResourceReleaseDate?)
        /// </para>
        /// </summary>
        public IList<ResourceContributor> ResourceContributor {
            get {
                if ((this.ResourceContributorField == null)) {
                    this.ResourceContributorField = new XTypedList<ResourceContributor>(this, LinqToXsdTypeManager.Instance, XName.Get("ResourceContributor", ""));
                }
                return this.ResourceContributorField;
            }
            set {
                if ((value == null)) {
                    this.ResourceContributorField = null;
                }
                else {
                    if ((this.ResourceContributorField == null)) {
                        this.ResourceContributorField = XTypedList<ResourceContributor>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ResourceContributor", ""));
                    }
                    else {
                        XTypedServices.SetList<ResourceContributor>(this.ResourceContributorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of an indirect ddex:Contributor to the ddex:UserDefinedResource.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, UserDefinedValue*, PLine*, CLine*, OriginalResourceReleaseDate?)
        /// </para>
        /// </summary>
        public IList<IndirectResourceContributor> IndirectResourceContributor {
            get {
                if ((this.IndirectResourceContributorField == null)) {
                    this.IndirectResourceContributorField = new XTypedList<IndirectResourceContributor>(this, LinqToXsdTypeManager.Instance, XName.Get("IndirectResourceContributor", ""));
                }
                return this.IndirectResourceContributorField;
            }
            set {
                if ((value == null)) {
                    this.IndirectResourceContributorField = null;
                }
                else {
                    if ((this.IndirectResourceContributorField == null)) {
                        this.IndirectResourceContributorField = XTypedList<IndirectResourceContributor>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("IndirectResourceContributor", ""));
                    }
                    else {
                        XTypedServices.SetList<IndirectResourceContributor>(this.IndirectResourceContributorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:UserDefinedValue.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, UserDefinedValue*, PLine*, CLine*, OriginalResourceReleaseDate?)
        /// </para>
        /// </summary>
        public IList<UserDefinedValue> UserDefinedValue {
            get {
                if ((this.UserDefinedValueField == null)) {
                    this.UserDefinedValueField = new XTypedList<UserDefinedValue>(this, LinqToXsdTypeManager.Instance, XName.Get("UserDefinedValue", ""));
                }
                return this.UserDefinedValueField;
            }
            set {
                if ((value == null)) {
                    this.UserDefinedValueField = null;
                }
                else {
                    if ((this.UserDefinedValueField == null)) {
                        this.UserDefinedValueField = XTypedList<UserDefinedValue>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("UserDefinedValue", ""));
                    }
                    else {
                        XTypedServices.SetList<UserDefinedValue>(this.UserDefinedValueField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:PLine for the ddex:UserDefinedResource.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, UserDefinedValue*, PLine*, CLine*, OriginalResourceReleaseDate?)
        /// </para>
        /// </summary>
        public IList<PLine> PLine {
            get {
                if ((this.PLineField == null)) {
                    this.PLineField = new XTypedList<PLine>(this, LinqToXsdTypeManager.Instance, XName.Get("PLine", ""));
                }
                return this.PLineField;
            }
            set {
                if ((value == null)) {
                    this.PLineField = null;
                }
                else {
                    if ((this.PLineField == null)) {
                        this.PLineField = XTypedList<PLine>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("PLine", ""));
                    }
                    else {
                        XTypedServices.SetList<PLine>(this.PLineField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:CLine for the ddex:UserDefinedResource.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, UserDefinedValue*, PLine*, CLine*, OriginalResourceReleaseDate?)
        /// </para>
        /// </summary>
        public IList<CLine> CLine {
            get {
                if ((this.CLineField == null)) {
                    this.CLineField = new XTypedList<CLine>(this, LinqToXsdTypeManager.Instance, XName.Get("CLine", ""));
                }
                return this.CLineField;
            }
            set {
                if ((value == null)) {
                    this.CLineField = null;
                }
                else {
                    if ((this.CLineField == null)) {
                        this.CLineField = XTypedList<CLine>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CLine", ""));
                    }
                    else {
                        XTypedServices.SetList<CLine>(this.CLineField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ddex:UserDefinedResource was originally published, whether for physical or electronic/online distribution.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), ResourceContributor*, IndirectResourceContributor*, UserDefinedValue*, PLine*, CLine*, OriginalResourceReleaseDate?)
        /// </para>
        /// </summary>
        public EventDate OriginalResourceReleaseDate {
            get {
                XElement x = this.GetElement(XName.Get("OriginalResourceReleaseDate", ""));
                return ((EventDate)(x));
            }
            set {
                this.SetElement(XName.Get("OriginalResourceReleaseDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the ddexC:UserDefinedResourceDetailsByTerritory as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("UserDefinedResourceDetailsByTerritory", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<UserDefinedResourceDetailsByTerritory>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("TerritoryCode", ""), typeof(object));
            localElementDictionary.Add(XName.Get("ExcludedTerritoryCode", ""), typeof(object));
            localElementDictionary.Add(XName.Get("ResourceContributor", ""), typeof(ResourceContributor));
            localElementDictionary.Add(XName.Get("IndirectResourceContributor", ""), typeof(IndirectResourceContributor));
            localElementDictionary.Add(XName.Get("UserDefinedValue", ""), typeof(UserDefinedValue));
            localElementDictionary.Add(XName.Get("PLine", ""), typeof(PLine));
            localElementDictionary.Add(XName.Get("CLine", ""), typeof(CLine));
            localElementDictionary.Add(XName.Get("OriginalResourceReleaseDate", ""), typeof(EventDate));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of ddex:Identifiers of a ddex:UserDefinedResource.
    /// </para>
    /// <para>
    /// Regular expression: (ProprietaryId+)
    /// </para>
    /// </summary>
    public partial class UserDefinedResourceId : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ProprietaryId> ProprietaryIdField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator UserDefinedResourceId(XElement xe) { return XTypedServices.ToXTypedElement<UserDefinedResourceId>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static UserDefinedResourceId() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ProprietaryId", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:Identifiers of a ddex:UserDefinedResource.
        /// </para>
        /// <para>
        /// Regular expression: (ProprietaryId+)
        /// </para>
        /// </summary>
        public UserDefinedResourceId() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:ProprietaryIdentifier of the ddex:UserDefinedResource.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ProprietaryId+)
        /// </para>
        /// </summary>
        public IList<ProprietaryId> ProprietaryId {
            get {
                if ((this.ProprietaryIdField == null)) {
                    this.ProprietaryIdField = new XTypedList<ProprietaryId>(this, LinqToXsdTypeManager.Instance, XName.Get("ProprietaryId", ""));
                }
                return this.ProprietaryIdField;
            }
            set {
                if ((value == null)) {
                    this.ProprietaryIdField = null;
                }
                else {
                    if ((this.ProprietaryIdField == null)) {
                        this.ProprietaryIdField = XTypedList<ProprietaryId>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ProprietaryId", ""));
                    }
                    else {
                        XTypedServices.SetList<ProprietaryId>(this.ProprietaryIdField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether this ddex:Identifier is old and has been replaced by a new one (=True) or not (=False). The ddex:Flag may only be set to True when the new ddex:Identifier is also provided. If the ddex:Flag is not set, this ddex:Identifier is deemed to be the current one.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsReplaced {
            get {
                XAttribute x = this.Attribute(XName.Get("IsReplaced", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("IsReplaced", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("UserDefinedResourceId", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<UserDefinedResourceId>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ProprietaryId", ""), typeof(ProprietaryId));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:UserDefinedResourceType.
    /// </para>
    /// </summary>
    public partial class UserDefinedResourceType : XTypedElement, IXMetaData {
        
         public static explicit operator UserDefinedResourceType(XElement xe) { return XTypedServices.ToXTypedElement<UserDefinedResourceType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:UserDefinedResourceType.
        /// </para>
        /// </summary>
        public UserDefinedResourceType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddexC:UserDefinedResourceType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("UserDefinedResourceType", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<UserDefinedResourceType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:UserDefinedValue.
    /// </para>
    /// </summary>
    public partial class UserDefinedValue : XTypedElement, IXMetaData {
        
         public static explicit operator UserDefinedValue(XElement xe) { return XTypedServices.ToXTypedElement<UserDefinedValue>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:UserDefinedValue.
        /// </para>
        /// </summary>
        public UserDefinedValue() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddexC:UserDefinedValue. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A textual ddex:Description of the ddex:Type or function of the ddexC:UserDefinedValue. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Description {
            get {
                XAttribute x = this.Attribute(XName.Get("Description", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Description", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script of the ddex:Description as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("UserDefinedValue", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<UserDefinedValue>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:UserInterfaceType.
    /// </para>
    /// </summary>
    public partial class UserInterfaceType : XTypedElement, IXMetaData {
        
         public static explicit operator UserInterfaceType(XElement xe) { return XTypedServices.ToXTypedElement<UserInterfaceType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:UserInterfaceType.
        /// </para>
        /// </summary>
        public UserInterfaceType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.UserInterfaceType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddexC:UserInterfaceType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UserDefined value of the ddexC:UserInterfaceType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserDefinedValue {
            get {
                XAttribute x = this.Attribute(XName.Get("UserDefinedValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserDefinedValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("UserInterfaceType", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<UserInterfaceType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:VideoCodecType.
    /// </para>
    /// </summary>
    public partial class VideoCodecType : XTypedElement, IXMetaData {
        
         public static explicit operator VideoCodecType(XElement xe) { return XTypedServices.ToXTypedElement<VideoCodecType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:VideoCodecType.
        /// </para>
        /// </summary>
        public VideoCodecType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.VideoCodecType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Identifier of the ddex:Version of the ddexC:VideoCodecType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Version {
            get {
                XAttribute x = this.Attribute(XName.Get("Version", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Version", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddexC:VideoCodecType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UserDefined value of the ddexC:VideoCodecType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserDefinedValue {
            get {
                XAttribute x = this.Attribute(XName.Get("UserDefinedValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserDefinedValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("VideoCodecType", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<VideoCodecType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing a ddex:VideoCueSheetReference.
    /// </para>
    /// <para>
    /// Regular expression: (VideoCueSheetReference1)
    /// </para>
    /// </summary>
    public partial class VideoCueSheetReference : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator VideoCueSheetReference(XElement xe) { return XTypedServices.ToXTypedElement<VideoCueSheetReference>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static VideoCueSheetReference() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("VideoCueSheetReference", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a ddex:VideoCueSheetReference.
        /// </para>
        /// <para>
        /// Regular expression: (VideoCueSheetReference1)
        /// </para>
        /// </summary>
        public VideoCueSheetReference() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Reference for a ddex:CueSheet (specific to this ddex:Message). This is a ddex:LocalCueSheetAnchorReference starting with the letter Q.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (VideoCueSheetReference1)
        /// </para>
        /// </summary>
        public string VideoCueSheetReference1 {
            get {
                XElement x = this.GetElement(XName.Get("VideoCueSheetReference", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("VideoCueSheetReference", ""), value, "VideoCueSheetReference1", VideoCueSheetReference1LocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("VideoCueSheetReference", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<VideoCueSheetReference>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("VideoCueSheetReference", ""), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class VideoCueSheetReference1LocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "Q[\\d\\-_a-zA-Z]+"}, 0, XmlSchemaWhiteSpace.Collapse));
            
            private VideoCueSheetReference1LocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing a list of ddex:VideoCueSheetReferences.
    /// </para>
    /// <para>
    /// Regular expression: (VideoCueSheetReference+)
    /// </para>
    /// </summary>
    public partial class VideoCueSheetReferenceList : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> VideoCueSheetReferenceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator VideoCueSheetReferenceList(XElement xe) { return XTypedServices.ToXTypedElement<VideoCueSheetReferenceList>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static VideoCueSheetReferenceList() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("VideoCueSheetReference", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing a list of ddex:VideoCueSheetReferences.
        /// </para>
        /// <para>
        /// Regular expression: (VideoCueSheetReference+)
        /// </para>
        /// </summary>
        public VideoCueSheetReferenceList() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Reference for a ddex:CueSheet (specific to this ddex:Message). This is a ddex:LocalCueSheetAnchorReference starting with the letter Q.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (VideoCueSheetReference+)
        /// </para>
        /// </summary>
        public IList<string> VideoCueSheetReference {
            get {
                if ((this.VideoCueSheetReferenceField == null)) {
                    this.VideoCueSheetReferenceField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype, XName.Get("VideoCueSheetReference", ""));
                }
                return this.VideoCueSheetReferenceField;
            }
            set {
                if ((value == null)) {
                    this.VideoCueSheetReferenceField = null;
                }
                else {
                    if ((this.VideoCueSheetReferenceField == null)) {
                        this.VideoCueSheetReferenceField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype, value, XName.Get("VideoCueSheetReference", ""));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.VideoCueSheetReferenceField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("VideoCueSheetReferenceList", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<VideoCueSheetReferenceList>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("VideoCueSheetReference", ""), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class VideoCueSheetReferenceLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "Q[\\d\\-_a-zA-Z]+"}, 0, XmlSchemaWhiteSpace.Collapse));
            
            private VideoCueSheetReferenceLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of ddex:Descriptors and other attributes of a ddex:Video which may vary according to ddex:Territory of release. 
    /// </para>
    /// <para>
    /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CLine*)
    /// </para>
    /// </summary>
    public partial class VideoDetailsByTerritory : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<object> TerritoryCodeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<object> ExcludedTerritoryCodeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Title> TitleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Artist> DisplayArtistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ResourceContributor> ResourceContributorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<IndirectResourceContributor> IndirectResourceContributorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LabelName> LabelNameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<RightsController> RightsControllerField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PLine> PLineField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CLine> CLineField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator VideoDetailsByTerritory(XElement xe) { return XTypedServices.ToXTypedElement<VideoDetailsByTerritory>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static VideoDetailsByTerritory() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:Descriptors and other attributes of a ddex:Video which may vary according to ddex:Territory of release. 
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CLine*)
        /// </para>
        /// </summary>
        public VideoDetailsByTerritory() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Territory to which the ddex:SoundRecording details apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:ExcludedTerritory shall be present, but not both. 
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CLine*)
        /// </para>
        /// </summary>
        public IList<object> TerritoryCode {
            get {
                if ((this.TerritoryCodeField == null)) {
                    this.TerritoryCodeField = new XSimpleList<object>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, XName.Get("TerritoryCode", ""));
                }
                return this.TerritoryCodeField;
            }
            set {
                if ((value == null)) {
                    this.TerritoryCodeField = null;
                }
                else {
                    if ((this.TerritoryCodeField == null)) {
                        this.TerritoryCodeField = XSimpleList<object>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, value, XName.Get("TerritoryCode", ""));
                    }
                    else {
                        XTypedServices.SetList<System.Object>(this.TerritoryCodeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Territory to which the ddex:SoundRecording details do not apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:Territory shall be present, but not both.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CLine*)
        /// </para>
        /// </summary>
        public IList<object> ExcludedTerritoryCode {
            get {
                if ((this.ExcludedTerritoryCodeField == null)) {
                    this.ExcludedTerritoryCodeField = new XSimpleList<object>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, XName.Get("ExcludedTerritoryCode", ""));
                }
                return this.ExcludedTerritoryCodeField;
            }
            set {
                if ((value == null)) {
                    this.ExcludedTerritoryCodeField = null;
                }
                else {
                    if ((this.ExcludedTerritoryCodeField == null)) {
                        this.ExcludedTerritoryCodeField = XSimpleList<object>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype, value, XName.Get("ExcludedTerritoryCode", ""));
                    }
                    else {
                        XTypedServices.SetList<System.Object>(this.ExcludedTerritoryCodeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Title of the ddex:SoundRecording.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CLine*)
        /// </para>
        /// </summary>
        public IList<Title> Title {
            get {
                if ((this.TitleField == null)) {
                    this.TitleField = new XTypedList<Title>(this, LinqToXsdTypeManager.Instance, XName.Get("Title", ""));
                }
                return this.TitleField;
            }
            set {
                if ((value == null)) {
                    this.TitleField = null;
                }
                else {
                    if ((this.TitleField == null)) {
                        this.TitleField = XTypedList<Title>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Title", ""));
                    }
                    else {
                        XTypedServices.SetList<Title>(this.TitleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:DisplayArtist for the ddex:SoundRecording. The ddex:DisplayArtist may be described through ddex:Name, ddex:Identifier and Roles.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CLine*)
        /// </para>
        /// </summary>
        public IList<Artist> DisplayArtist {
            get {
                if ((this.DisplayArtistField == null)) {
                    this.DisplayArtistField = new XTypedList<Artist>(this, LinqToXsdTypeManager.Instance, XName.Get("DisplayArtist", ""));
                }
                return this.DisplayArtistField;
            }
            set {
                if ((value == null)) {
                    this.DisplayArtistField = null;
                }
                else {
                    if ((this.DisplayArtistField == null)) {
                        this.DisplayArtistField = XTypedList<Artist>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("DisplayArtist", ""));
                    }
                    else {
                        XTypedServices.SetList<Artist>(this.DisplayArtistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:Contributor to the ddex:SoundRecording.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CLine*)
        /// </para>
        /// </summary>
        public IList<ResourceContributor> ResourceContributor {
            get {
                if ((this.ResourceContributorField == null)) {
                    this.ResourceContributorField = new XTypedList<ResourceContributor>(this, LinqToXsdTypeManager.Instance, XName.Get("ResourceContributor", ""));
                }
                return this.ResourceContributorField;
            }
            set {
                if ((value == null)) {
                    this.ResourceContributorField = null;
                }
                else {
                    if ((this.ResourceContributorField == null)) {
                        this.ResourceContributorField = XTypedList<ResourceContributor>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ResourceContributor", ""));
                    }
                    else {
                        XTypedServices.SetList<ResourceContributor>(this.ResourceContributorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of an indirect ddex:Contributor to the ddex:SoundRecording.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CLine*)
        /// </para>
        /// </summary>
        public IList<IndirectResourceContributor> IndirectResourceContributor {
            get {
                if ((this.IndirectResourceContributorField == null)) {
                    this.IndirectResourceContributorField = new XTypedList<IndirectResourceContributor>(this, LinqToXsdTypeManager.Instance, XName.Get("IndirectResourceContributor", ""));
                }
                return this.IndirectResourceContributorField;
            }
            set {
                if ((value == null)) {
                    this.IndirectResourceContributorField = null;
                }
                else {
                    if ((this.IndirectResourceContributorField == null)) {
                        this.IndirectResourceContributorField = XTypedList<IndirectResourceContributor>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("IndirectResourceContributor", ""));
                    }
                    else {
                        XTypedServices.SetList<IndirectResourceContributor>(this.IndirectResourceContributorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:Identifiers of a ddex:License, ddex:Claim, ddex:RightShare or contract for the MusicalWork(s) used in the ddex:SoundRecording.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CLine*)
        /// </para>
        /// </summary>
        public RightsAgreementId RightsAgreementId {
            get {
                XElement x = this.GetElement(XName.Get("RightsAgreementId", ""));
                return ((RightsAgreementId)(x));
            }
            set {
                this.SetElement(XName.Get("RightsAgreementId", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing the ddex:Name of the ddex:Label under which the ddex:Release is to be marketed.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CLine*)
        /// </para>
        /// </summary>
        public IList<LabelName> LabelName {
            get {
                if ((this.LabelNameField == null)) {
                    this.LabelNameField = new XTypedList<LabelName>(this, LinqToXsdTypeManager.Instance, XName.Get("LabelName", ""));
                }
                return this.LabelNameField;
            }
            set {
                if ((value == null)) {
                    this.LabelNameField = null;
                }
                else {
                    if ((this.LabelNameField == null)) {
                        this.LabelNameField = XTypedList<LabelName>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("LabelName", ""));
                    }
                    else {
                        XTypedServices.SetList<LabelName>(this.LabelNameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:RightsController of Rights in the ddex:SoundRecording.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CLine*)
        /// </para>
        /// </summary>
        public IList<RightsController> RightsController {
            get {
                if ((this.RightsControllerField == null)) {
                    this.RightsControllerField = new XTypedList<RightsController>(this, LinqToXsdTypeManager.Instance, XName.Get("RightsController", ""));
                }
                return this.RightsControllerField;
            }
            set {
                if ((value == null)) {
                    this.RightsControllerField = null;
                }
                else {
                    if ((this.RightsControllerField == null)) {
                        this.RightsControllerField = XTypedList<RightsController>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("RightsController", ""));
                    }
                    else {
                        XTypedServices.SetList<RightsController>(this.RightsControllerField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ddex:SoundRecording was re-mastered (usually digitally).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CLine*)
        /// </para>
        /// </summary>
        public EventDate RemasteredDate {
            get {
                XElement x = this.GetElement(XName.Get("RemasteredDate", ""));
                return ((EventDate)(x));
            }
            set {
                this.SetElement(XName.Get("RemasteredDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ddex:SoundRecording was originally published, whether for physical or electronic/online distribution.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CLine*)
        /// </para>
        /// </summary>
        public EventDate OriginalResourceReleaseDate {
            get {
                XElement x = this.GetElement(XName.Get("OriginalResourceReleaseDate", ""));
                return ((EventDate)(x));
            }
            set {
                this.SetElement(XName.Get("OriginalResourceReleaseDate", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:PLine for the ddex:SoundRecording.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CLine*)
        /// </para>
        /// </summary>
        public IList<PLine> PLine {
            get {
                if ((this.PLineField == null)) {
                    this.PLineField = new XTypedList<PLine>(this, LinqToXsdTypeManager.Instance, XName.Get("PLine", ""));
                }
                return this.PLineField;
            }
            set {
                if ((value == null)) {
                    this.PLineField = null;
                }
                else {
                    if ((this.PLineField == null)) {
                        this.PLineField = XTypedList<PLine>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("PLine", ""));
                    }
                    else {
                        XTypedServices.SetList<PLine>(this.PLineField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:CLine for the ddex:Video.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TerritoryCode+ | ExcludedTerritoryCode+), Title*, DisplayArtist*, ResourceContributor*, IndirectResourceContributor*, RightsAgreementId?, LabelName*, RightsController*, RemasteredDate?, OriginalResourceReleaseDate?, PLine*, CLine*)
        /// </para>
        /// </summary>
        public IList<CLine> CLine {
            get {
                if ((this.CLineField == null)) {
                    this.CLineField = new XTypedList<CLine>(this, LinqToXsdTypeManager.Instance, XName.Get("CLine", ""));
                }
                return this.CLineField;
            }
            set {
                if ((value == null)) {
                    this.CLineField = null;
                }
                else {
                    if ((this.CLineField == null)) {
                        this.CLineField = XTypedList<CLine>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CLine", ""));
                    }
                    else {
                        XTypedServices.SetList<CLine>(this.CLineField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the ddexC:SoundRecordingDetailsByTerritory as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("VideoDetailsByTerritory", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<VideoDetailsByTerritory>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("TerritoryCode", ""), typeof(object));
            localElementDictionary.Add(XName.Get("ExcludedTerritoryCode", ""), typeof(object));
            localElementDictionary.Add(XName.Get("Title", ""), typeof(Title));
            localElementDictionary.Add(XName.Get("DisplayArtist", ""), typeof(Artist));
            localElementDictionary.Add(XName.Get("ResourceContributor", ""), typeof(ResourceContributor));
            localElementDictionary.Add(XName.Get("IndirectResourceContributor", ""), typeof(IndirectResourceContributor));
            localElementDictionary.Add(XName.Get("RightsAgreementId", ""), typeof(RightsAgreementId));
            localElementDictionary.Add(XName.Get("LabelName", ""), typeof(LabelName));
            localElementDictionary.Add(XName.Get("RightsController", ""), typeof(RightsController));
            localElementDictionary.Add(XName.Get("RemasteredDate", ""), typeof(EventDate));
            localElementDictionary.Add(XName.Get("OriginalResourceReleaseDate", ""), typeof(EventDate));
            localElementDictionary.Add(XName.Get("PLine", ""), typeof(PLine));
            localElementDictionary.Add(XName.Get("CLine", ""), typeof(CLine));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of ddex:Identifiers of a ddex:Video.
    /// </para>
    /// <para>
    /// Regular expression: (ISRC?, ISAN?, VISAN?, CatalogNumber?, ProprietaryId*)
    /// </para>
    /// </summary>
    public partial class VideoId : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ProprietaryId> ProprietaryIdField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator VideoId(XElement xe) { return XTypedServices.ToXTypedElement<VideoId>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static VideoId() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ISRC", "")), new NamedContentModelEntity(XName.Get("ISAN", "")), new NamedContentModelEntity(XName.Get("VISAN", "")), new NamedContentModelEntity(XName.Get("CatalogNumber", "")), new NamedContentModelEntity(XName.Get("ProprietaryId", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:Identifiers of a ddex:Video.
        /// </para>
        /// <para>
        /// Regular expression: (ISRC?, ISAN?, VISAN?, CatalogNumber?, ProprietaryId*)
        /// </para>
        /// </summary>
        public VideoId() {
        }
        
        /// <summary>
        /// <para>
        /// The ddex:ISRC (International Standard ddex:Recording Code as defined in  ISO 3901) for the ddex:Video. An ddex:ISRC comprises four parts: two characters, followed by three alphanumeric characters, then two digits and five digits. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ISRC?, ISAN?, VISAN?, CatalogNumber?, ProprietaryId*)
        /// </para>
        /// </summary>
        public string ISRC {
            get {
                XElement x = this.GetElement(XName.Get("ISRC", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("ISRC", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:ISAN (International Standard Audiovisual Number as defined in ISO 15706) for the ddex:Video. An ddex:ISAN comprises four blocks of four hexadecimal charaters followed by a check character.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ISRC?, ISAN?, VISAN?, CatalogNumber?, ProprietaryId*)
        /// </para>
        /// </summary>
        public string ISAN {
            get {
                XElement x = this.GetElement(XName.Get("ISAN", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("ISAN", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The V-ISAN (Version ddex:Identifier of a International Standard Audiovisual Number as defined in ISO 15706-2) for the ddex:Video. A V-ISAN comprises four blocks of four hexadecimal charaters followed by a check character, followed by two further blocks of four hexadecimal characters, followed by a further check character.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ISRC?, ISAN?, VISAN?, CatalogNumber?, ProprietaryId*)
        /// </para>
        /// </summary>
        public string VISAN {
            get {
                XElement x = this.GetElement(XName.Get("VISAN", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("VISAN", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:CatalogNumber of the ddex:Video.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ISRC?, ISAN?, VISAN?, CatalogNumber?, ProprietaryId*)
        /// </para>
        /// </summary>
        public CatalogNumber CatalogNumber {
            get {
                XElement x = this.GetElement(XName.Get("CatalogNumber", ""));
                return ((CatalogNumber)(x));
            }
            set {
                this.SetElement(XName.Get("CatalogNumber", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:ProprietaryIdentifier of the ddex:Video (usually one per society involved in the messaging).
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ISRC?, ISAN?, VISAN?, CatalogNumber?, ProprietaryId*)
        /// </para>
        /// </summary>
        public IList<ProprietaryId> ProprietaryId {
            get {
                if ((this.ProprietaryIdField == null)) {
                    this.ProprietaryIdField = new XTypedList<ProprietaryId>(this, LinqToXsdTypeManager.Instance, XName.Get("ProprietaryId", ""));
                }
                return this.ProprietaryIdField;
            }
            set {
                if ((value == null)) {
                    this.ProprietaryIdField = null;
                }
                else {
                    if ((this.ProprietaryIdField == null)) {
                        this.ProprietaryIdField = XTypedList<ProprietaryId>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ProprietaryId", ""));
                    }
                    else {
                        XTypedServices.SetList<ProprietaryId>(this.ProprietaryIdField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Flag indicating whether this ddex:Identifier is old and has been replaced by a new one (=True) or not (=False). The ddex:Flag may only be set to True when the new ddex:Identifier is also provided. If the ddex:Flag is not set, this ddex:Identifier is deemed to be the current one.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> IsReplaced {
            get {
                XAttribute x = this.Attribute(XName.Get("IsReplaced", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("IsReplaced", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("VideoId", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<VideoId>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ISRC", ""), typeof(string));
            localElementDictionary.Add(XName.Get("ISAN", ""), typeof(string));
            localElementDictionary.Add(XName.Get("VISAN", ""), typeof(string));
            localElementDictionary.Add(XName.Get("CatalogNumber", ""), typeof(CatalogNumber));
            localElementDictionary.Add(XName.Get("ProprietaryId", ""), typeof(ProprietaryId));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:VideoType.
    /// </para>
    /// </summary>
    public partial class VideoType : XTypedElement, IXMetaData {
        
         public static explicit operator VideoType(XElement xe) { return XTypedServices.ToXTypedElement<VideoType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:VideoType.
        /// </para>
        /// </summary>
        public VideoType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.VideoType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddexC:VideoType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UserDefined value of the ddexC:VideoType. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserDefinedValue {
            get {
                XAttribute x = this.Attribute(XName.Get("UserDefinedValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserDefinedValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("VideoType", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<VideoType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:WebPage.
    /// </para>
    /// <para>
    /// Regular expression: (PartyId*, ReleaseId*, PageName?, URL?, UserName?, Password?)
    /// </para>
    /// </summary>
    public partial class WebPage : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PartyId> PartyIdField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ReleaseId> ReleaseIdField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator WebPage(XElement xe) { return XTypedServices.ToXTypedElement<WebPage>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static WebPage() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("PartyId", "")), new NamedContentModelEntity(XName.Get("ReleaseId", "")), new NamedContentModelEntity(XName.Get("PageName", "")), new NamedContentModelEntity(XName.Get("URL", "")), new NamedContentModelEntity(XName.Get("UserName", "")), new NamedContentModelEntity(XName.Get("Password", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:WebPage.
        /// </para>
        /// <para>
        /// Regular expression: (PartyId*, ReleaseId*, PageName?, URL?, UserName?, Password?)
        /// </para>
        /// </summary>
        public WebPage() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of the ddex:PartyId for a ddex:Party owning the ddexC:WebPage. If no ddex:Namespace is given, the ddex:Identifier is a ddex:DdexPartyId (DPID). Note that DPIDs are not normally used to identify ddex:Artists, ddex:Producers or other ddex:Creators.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (PartyId*, ReleaseId*, PageName?, URL?, UserName?, Password?)
        /// </para>
        /// </summary>
        public IList<PartyId> PartyId {
            get {
                if ((this.PartyIdField == null)) {
                    this.PartyIdField = new XTypedList<PartyId>(this, LinqToXsdTypeManager.Instance, XName.Get("PartyId", ""));
                }
                return this.PartyIdField;
            }
            set {
                if ((value == null)) {
                    this.PartyIdField = null;
                }
                else {
                    if ((this.PartyIdField == null)) {
                        this.PartyIdField = XTypedList<PartyId>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("PartyId", ""));
                    }
                    else {
                        XTypedServices.SetList<PartyId>(this.PartyIdField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of ddex:ReleaseIds. If available, a ddex:GRid should always be used.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (PartyId*, ReleaseId*, PageName?, URL?, UserName?, Password?)
        /// </para>
        /// </summary>
        public IList<ReleaseId> ReleaseId {
            get {
                if ((this.ReleaseIdField == null)) {
                    this.ReleaseIdField = new XTypedList<ReleaseId>(this, LinqToXsdTypeManager.Instance, XName.Get("ReleaseId", ""));
                }
                return this.ReleaseIdField;
            }
            set {
                if ((value == null)) {
                    this.ReleaseIdField = null;
                }
                else {
                    if ((this.ReleaseIdField == null)) {
                        this.ReleaseIdField = XTypedList<ReleaseId>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ReleaseId", ""));
                    }
                    else {
                        XTypedServices.SetList<ReleaseId>(this.ReleaseIdField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing the ddex:Name of the ddex:WebPage.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PartyId*, ReleaseId*, PageName?, URL?, UserName?, Password?)
        /// </para>
        /// </summary>
        public Name PageName {
            get {
                XElement x = this.GetElement(XName.Get("PageName", ""));
                return ((Name)(x));
            }
            set {
                this.SetElement(XName.Get("PageName", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:URL of the ddex:WebPage.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PartyId*, ReleaseId*, PageName?, URL?, UserName?, Password?)
        /// </para>
        /// </summary>
        public string URL {
            get {
                XElement x = this.GetElement(XName.Get("URL", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("URL", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// An ddex:Identifier of a computer user who is granted maintenance access to the ddex:WebPage.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PartyId*, ReleaseId*, PageName?, URL?, UserName?, Password?)
        /// </para>
        /// </summary>
        public string UserName {
            get {
                XElement x = this.GetElement(XName.Get("UserName", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("UserName", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Password needed to grant a user maintenance access to the ddex:WebPage in combination with the ddex:UserName.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PartyId*, ReleaseId*, PageName?, URL?, UserName?, Password?)
        /// </para>
        /// </summary>
        public string Password {
            get {
                XElement x = this.GetElement(XName.Get("Password", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Password", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("WebPage", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<WebPage>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("PartyId", ""), typeof(PartyId));
            localElementDictionary.Add(XName.Get("ReleaseId", ""), typeof(ReleaseId));
            localElementDictionary.Add(XName.Get("PageName", ""), typeof(Name));
            localElementDictionary.Add(XName.Get("URL", ""), typeof(string));
            localElementDictionary.Add(XName.Get("UserName", ""), typeof(string));
            localElementDictionary.Add(XName.Get("Password", ""), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of one or more ddex:Works.
    /// </para>
    /// <para>
    /// Regular expression: (MusicalWork+)
    /// </para>
    /// </summary>
    public partial class WorkList : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<MusicalWork> MusicalWorkField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator WorkList(XElement xe) { return XTypedServices.ToXTypedElement<WorkList>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static WorkList() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("MusicalWork", "")));
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of one or more ddex:Works.
        /// </para>
        /// <para>
        /// Regular expression: (MusicalWork+)
        /// </para>
        /// </summary>
        public WorkList() {
        }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:MusicalWork contained in a ddex:Resource.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (MusicalWork+)
        /// </para>
        /// </summary>
        public IList<MusicalWork> MusicalWork {
            get {
                if ((this.MusicalWorkField == null)) {
                    this.MusicalWorkField = new XTypedList<MusicalWork>(this, LinqToXsdTypeManager.Instance, XName.Get("MusicalWork", ""));
                }
                return this.MusicalWorkField;
            }
            set {
                if ((value == null)) {
                    this.MusicalWorkField = null;
                }
                else {
                    if ((this.MusicalWorkField == null)) {
                        this.MusicalWorkField = XTypedList<MusicalWork>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("MusicalWork", ""));
                    }
                    else {
                        XTypedServices.SetList<MusicalWork>(this.MusicalWorkField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Language and script for the ddex:Elements of the ddexC:WorkList as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LanguageAndScriptCode {
            get {
                XAttribute x = this.Attribute(XName.Get("LanguageAndScriptCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LanguageAndScriptCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("WorkList", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<WorkList>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("MusicalWork", ""), typeof(MusicalWork));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Composite containing details of a ddex:WsMessageStatus.
    /// </para>
    /// </summary>
    public partial class WsMessageStatus : XTypedElement, IXMetaData {
        
         public static explicit operator WsMessageStatus(XElement xe) { return XTypedServices.ToXTypedElement<WsMessageStatus>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A ddex:Composite containing details of a ddex:WsMessageStatus.
        /// </para>
        /// </summary>
        public WsMessageStatus() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::ddex_net.xml._20120404.ddex.WsMessageStatus.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The ddex:Namespace of the ddex:WsMessageStatus. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A ddex:UserDefined value of the ddex:WsMessageStatus. This is represented in an XML schema as an XML ddex:Attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserDefinedValue {
            get {
                XAttribute x = this.Attribute(XName.Get("UserDefinedValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserDefinedValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("WsMessageStatus", "http://ddex.net/xml/20120404/ddexC");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<WsMessageStatus>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A code representing a ddex:Currency.
    /// </para>
    /// </summary>
    public sealed class CurrencyCode {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    ddex_net.xml._20120404.iso4217a.CurrencyCode.TypeDefinition,
                    ddex_net.xml._20120404.ddex.DeprecatedCurrencyCode.TypeDefinition});
        
        private CurrencyCode() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code representing a ddex:Territory. This includes ISO 3166-1 two-letter codes plus a code for ddex:Worldwide.
    /// </para>
    /// </summary>
    public sealed class TerritoryCode {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    ddex_net.xml._20120404.iso3166a2.TerritoryCode.TypeDefinition,
                    ddex_net.xml._20120404.ddex.NonIsoTerritoryCode.TypeDefinition});
        
        private TerritoryCode() {
        }
    }
}
namespace ddex_net.xml._20120404.ddex {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    using ddex_net.xml.ern._341;
    
    
    /// <summary>
    /// <para>
    /// A ddex:Type of limitation on the access of a site.
    /// </para>
    /// </summary>
    public sealed class AccessLimitation {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "NoLimitation",
                        "PrivateAccessOnly"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private AccessLimitation() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A role played by a ddex:Party responsible for administering Rights in a ddex:Resource or a ddex:Release.
    /// </para>
    /// </summary>
    public sealed class AdministratingRecordCompanyRole {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "DesignatedDsrMessageRecipient",
                        "RightsAdministrator",
                        "RoyaltyAdministrator",
                        "Unknown",
                        "UserDefined"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private AdministratingRecordCompanyRole() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A role of a principal ddex:Contributor in relation to a ddex:Performance or a ddex:Fixation.
    /// </para>
    /// </summary>
    public sealed class ArtistRole {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Actor",
                        "Adapter",
                        "Architect",
                        "Arranger",
                        "Artist",
                        "AssociatedPerformer",
                        "Author",
                        "Band",
                        "Cartoonist",
                        "Choir",
                        "Choreographer",
                        "Composer",
                        "ComposerLyricist",
                        "ComputerGraphicCreator",
                        "Conductor",
                        "Contributor",
                        "Dancer",
                        "Designer",
                        "Director",
                        "Ensemble",
                        "FeaturedArtist",
                        "FilmDirector",
                        "GraphicArtist",
                        "GraphicDesigner",
                        "Journalist",
                        "Librettist",
                        "Lyricist",
                        "MainArtist",
                        "MusicPublisher",
                        "NonLyricAuthor",
                        "Orchestra",
                        "OriginalPublisher",
                        "Painter",
                        "Photographer",
                        "PhotographyDirector",
                        "Playwright",
                        "PrimaryMusician",
                        "Producer",
                        "Programmer",
                        "ScreenplayAuthor",
                        "Soloist",
                        "StudioMusician",
                        "StudioPersonnel",
                        "SubArranger",
                        "SubPublisher",
                        "SubstitutedPublisher",
                        "Translator",
                        "Unknown",
                        "UserDefined"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ArtistRole() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of ddex:AudioCodec.
    /// </para>
    /// </summary>
    public sealed class AudioCodecType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "AAC",
                        "ADPCM",
                        "ALaw",
                        "AMR-NB",
                        "AMR-WB",
                        "FLAC",
                        "MP2",
                        "MP3",
                        "MuLaw",
                        "PCM",
                        "PDM",
                        "QCELP",
                        "RealAudio",
                        "Shockwave",
                        "Unknown",
                        "UserDefined",
                        "Vorbis",
                        "WMA"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private AudioCodecType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of ddex:Calculation used to determine an actual ddex:Amount paid.
    /// </para>
    /// </summary>
    public sealed class CalculationType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private CalculationType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of ddex:Carrier used for a ddex:Fixation.
    /// </para>
    /// </summary>
    public sealed class CarrierType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "12InchDiscoSingleRemix",
                        "33rpm10InchLP",
                        "33rpm10InchSingle",
                        "33rpm12InchLP",
                        "33rpm12InchLp20Tracks",
                        "33rpm12InchMaxiSingle",
                        "33rpm12InchSingle",
                        "33rpm7InchLP",
                        "33rpm7InchSingle",
                        "45rpm10InchLP",
                        "45rpm10InchMaxiSingle",
                        "45rpm10InchSingle",
                        "45rpm12InchLP",
                        "45rpm12InchMaxiSingle",
                        "45rpm12InchSingle",
                        "45rpm7InchEP",
                        "45rpm7InchSingle",
                        "7InchMaxiSingleRemix",
                        "BluRay",
                        "CD",
                        "CdCompilation",
                        "CdEp",
                        "CdEpEnhanced",
                        "CdExtraCompilation",
                        "CdExtraEP",
                        "CdExtraLP",
                        "CdExtraMaxiRemix",
                        "CdExtraMaxiSingle",
                        "CdExtraSingle",
                        "CdExtraSingle2Tracks",
                        "CdLp",
                        "CdLp5Inch",
                        "CdLpEnhanced",
                        "CdLpPlusCdVideo",
                        "CdLpPlusDvdAudio",
                        "CdLpPlusDvdVideo",
                        "CdLpPlusWeb",
                        "CdMaxiSingle",
                        "CdMaxiSingle3Inch",
                        "CdMaxiSingleEnhanced",
                        "CdMaxiSingleRemix",
                        "CdPlusCdBonus",
                        "CdPlusDvdBonus",
                        "CdRom",
                        "CdSingle",
                        "CdSingle3Inch",
                        "CdSingle5Inch",
                        "CdVideo5LpNTSC",
                        "CdVideo5LpPAL",
                        "CdVideoAudioCompatible",
                        "CombiPack",
                        "DCC",
                        "DccCompilation",
                        "DualDisc",
                        "DVD",
                        "DvdAudio",
                        "DvdAudio5MaxiSingle",
                        "DvdAudioLP",
                        "DvdAudioSingle",
                        "DvdRom",
                        "DvdSingle",
                        "DvdVideo",
                        "DvdVideo5MaxiSingleNTSC",
                        "DvdVideo5MaxiSinglePAL",
                        "DvdVideo5SingleNTSC",
                        "DvdVideo5SinglePAL",
                        "DvdVideoLpNTSC",
                        "DvdVideoLpPAL",
                        "DvdVideoLpPlusCdLpOrCdSingle",
                        "FanPack",
                        "HdDvdVideoLp",
                        "LaserDiscLp12InchNTSC",
                        "LpCompIdenticalToCdComp",
                        "LpCompilation",
                        "LpIdenticalToCD",
                        "MC",
                        "McCompIdenticalToCdComp",
                        "McCompilation",
                        "McDoubleLP",
                        "McEP",
                        "McIdenticalToCD",
                        "McLP",
                        "McMaxiSingle",
                        "McRemix",
                        "McSingle",
                        "McSingleIdenticalToCDS",
                        "MemoryDeviceAudioLP",
                        "MemoryDeviceMixLP",
                        "MemoryDeviceVideoLP",
                        "Merchandise",
                        "MiniDisc",
                        "MiniDiscCompilation",
                        "MiniDiscEP",
                        "MiniDiscMaxiRemix",
                        "MiniDiscSingleMaxiSingle",
                        "PrePaidCard",
                        "SACD",
                        "SacdCompilation",
                        "SacdLpStereo",
                        "SacdLpStereoCdAudio",
                        "SacdLpStereoSurround",
                        "SacdLpStereoSurroundCdAudio",
                        "SacdLpSurroundCdAudio",
                        "SacdPlusDvdVideo",
                        "VhsNTSC",
                        "VhsPAL",
                        "VhsPlusCdLp",
                        "VhsSECAM"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private CarrierType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of ddex:CD protection.
    /// </para>
    /// </summary>
    public sealed class CdProtectionType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "CDS100",
                        "CDS200",
                        "CDS300",
                        "Key2Audio",
                        "MediaMaxCD3",
                        "NotProtected",
                        "Unknown",
                        "UserDefined"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private CdProtectionType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of coding used to encode a ddex:Resource.
    /// </para>
    /// </summary>
    public sealed class CodingType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Lossless",
                        "Lossy"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private CodingType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of ddex:Collection.
    /// </para>
    /// </summary>
    public sealed class CollectionType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "AudioChapter",
                        "Episode",
                        "MedleySegment",
                        "PotpourriSegment",
                        "Season",
                        "Series",
                        "VideoChapter"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private CollectionType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of ddex:CommercialModel (e.g. ddex:SubscriptionModel and ddex:PayAsYouGoModel). The ddex:CommercialModelType indicates how a ddex:Consumer pays for a ddex:Service or ddex:Release.
    /// </para>
    /// </summary>
    public sealed class CommercialModelType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "AdvertisementSupportedModel",
                        "AsPerContract",
                        "DeviceFeeModel",
                        "FreeOfChargeModel",
                        "PayAsYouGoModel",
                        "PerformanceRoyaltiesModel",
                        "SubscriptionModel",
                        "Unknown",
                        "UserDefined"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private CommercialModelType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of ddex:Compilation.
    /// </para>
    /// </summary>
    public sealed class CompilationType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "InternalCompilation",
                        "NonInternalCompilation",
                        "NotCompiled"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private CompilationType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of container according to its ddex:FileFormat.
    /// </para>
    /// </summary>
    public sealed class ContainerFormat {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "AIFF",
                        "AVI",
                        "MP4",
                        "Ogg",
                        "QuickTime",
                        "RealMedia",
                        "RMF",
                        "UserDefined",
                        "WAV"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ContainerFormat() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of ddex:Creation.
    /// </para>
    /// </summary>
    public sealed class CreationType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "MusicalWork",
                        "Release",
                        "Resource"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private CreationType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of ddex:Cue according to its origin.
    /// </para>
    /// </summary>
    public sealed class CueOrigin {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "LibraryMusic",
                        "PreexistingMusic",
                        "SpeciallyCommissionedMusic",
                        "Unknown",
                        "UserDefined"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private CueOrigin() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of ddex:CueSheet.
    /// </para>
    /// </summary>
    public sealed class CueSheetType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "AverageCueSheet",
                        "CompositeCueSheet",
                        "StandardCueSheet",
                        "SummarisedCueSheet",
                        "SurrogateCueSheet"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private CueSheetType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of use of a ddex:Cue.
    /// </para>
    /// </summary>
    public sealed class CueUseType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "AudioLogo",
                        "Background",
                        "Bumper",
                        "EssentialPart",
                        "FilmTheme",
                        "IndistinguishableBackground",
                        "OnScreenMusic",
                        "RolledUpCue",
                        "Theme",
                        "UserDefined"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private CueUseType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of action that is a response to a ddex:DataMismatch.
    /// </para>
    /// </summary>
    public sealed class DataMismatchResponseType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "AdditionalInformationOnly",
                        "DataMismatchConfirmation",
                        "DataMismatchOutOfScope",
                        "DataMismatchRaisedCommercialDispute",
                        "NoReaction",
                        "UserDefined"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private DataMismatchResponseType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A status of a ddex:DataMismatch.
    /// </para>
    /// </summary>
    public sealed class DataMismatchStatus {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "AdditionalInformationOnly",
                        "Corrected",
                        "Fatal",
                        "NotCorrected",
                        "UserDefined"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private DataMismatchStatus() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of ddex:DataMismatch.
    /// </para>
    /// </summary>
    public sealed class DataMismatchType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "AdditionalInformationOnly",
                        "ChoreographyConflict",
                        "ContradictoryData",
                        "DuplicatedData",
                        "IdentifierSyntaxMismatch",
                        "MathematicalInconsistency",
                        "MissingContractuallyMandatoryInformation",
                        "MissingMandatoryInformation",
                        "MissingReferencedMusicalWorkInformation",
                        "MissingReferencedReleaseInformation",
                        "MissingReferencedResourceInformation",
                        "MissingReferencedTechnicalResourceDetailInformation",
                        "MissingResourceFile",
                        "TypographicMismatch",
                        "UnexpectedAllowedValue",
                        "UnexpectedMessageIntermediary",
                        "UnexpectedMessageRecipient",
                        "UnexpectedMessageSender",
                        "UserDefined",
                        "XmlFormatError",
                        "XmlRangeError"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private DataMismatchType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of ddex:DeductionRate.
    /// </para>
    /// </summary>
    public sealed class DeductionRateType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "PennyRate",
                        "PercentageRate",
                        "UserDefined"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private DeductionRateType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of action requested for deliveries.
    /// </para>
    /// </summary>
    public sealed class DeliveryActionType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "ChangeDeliveryLimits",
                        "RestartDeliveryWithLimits",
                        "RestartDeliveryWithPreviousLimits",
                        "StopDelivery"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private DeliveryActionType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of delivery ddex:Message.
    /// </para>
    /// </summary>
    public sealed class DeliveryMessageType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "NewReleaseMessage",
                        "NonDdexMessage",
                        "Unknown"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private DeliveryMessageType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A CurrencyCode which is not valid anymore.
    /// </para>
    /// </summary>
    public sealed class DeprecatedCurrencyCode {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "CYP",
                        "MTL",
                        "ROL",
                        "SIT",
                        "SKK"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private DeprecatedCurrencyCode() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Digitization mode of a ddex:Resource.
    /// </para>
    /// </summary>
    public sealed class DigitizationMode {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "AAD",
                        "ADD",
                        "DDD",
                        "Unknown"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private DigitizationMode() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of ddex:DistributionChannel used to disseminate a ddex:Service or ddex:Release to a ddex:Consumer.
    /// </para>
    /// </summary>
    public sealed class DistributionChannelType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "AsPerContract",
                        "Broadcast",
                        "Cable",
                        "Internet",
                        "InternetAndMobile",
                        "IPTV",
                        "MobileTelephone",
                        "Narrowcast",
                        "OnDemandStream",
                        "PeerToPeer",
                        "Physical",
                        "Satellite",
                        "Simulcast",
                        "Unknown",
                        "UserDefined",
                        "Webcast"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private DistributionChannelType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of DRM enforcement.
    /// </para>
    /// </summary>
    public sealed class DrmEnforcementType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "DrmEnforced",
                        "NotDrmEnforced"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private DrmEnforcementType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of ddex:DrmPlatform.
    /// </para>
    /// </summary>
    public sealed class DrmPlatformType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "3Day",
                        "Fairplay",
                        "OMA",
                        "Unknown",
                        "UserDefined",
                        "WindowsMediaDRM"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private DrmPlatformType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of ddex:Message in the Sales Reporting Message Suite Standard.
    /// </para>
    /// </summary>
    public sealed class DsrMessageType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "SalesReportToRecordCompanyMessage",
                        "SalesReportToSocietyMessage"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private DsrMessageType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of ddex:Message in the Release Notification Message Suite Standard.
    /// </para>
    /// </summary>
    public sealed class ErnMessageType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "NewReleaseMessage"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ErnMessageType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of expression indicating how it should be perceived.
    /// </para>
    /// </summary>
    public sealed class ExpressionType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Informative",
                        "Instructive"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ExpressionType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of ddex:Resource pointed to by an ddex:ExternalLink.
    /// </para>
    /// </summary>
    public sealed class ExternallyLinkedResourceType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "AdditionalMetadata",
                        "Logo",
                        "PromotionalImage",
                        "PromotionalInformation",
                        "PromotionalItem",
                        "Unknown",
                        "UserDefined"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ExternallyLinkedResourceType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A status of a ddex:File in terms of its validity.
    /// </para>
    /// </summary>
    public sealed class FileStatus {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "FileMissing",
                        "FileOK",
                        "HashSumWrong",
                        "SignatureWrong"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private FileStatus() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of FingerprintAlgorithm.
    /// </para>
    /// </summary>
    public sealed class FingerprintAlgorithmType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "UserDefined"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private FingerprintAlgorithmType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of governing agreement.
    /// </para>
    /// </summary>
    public sealed class GoverningAgreementType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "UserDefined"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private GoverningAgreementType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of ddex:HashSumAlgorithm.
    /// </para>
    /// </summary>
    public sealed class HashSumAlgorithmType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "MD4",
                        "MD5",
                        "SHA",
                        "SHA1",
                        "UserDefined"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private HashSumAlgorithmType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of ddex:ImageCodec.
    /// </para>
    /// </summary>
    public sealed class ImageCodecType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "GIF",
                        "JPEG",
                        "JPEG2000",
                        "PNG",
                        "TIFF",
                        "Unknown",
                        "UserDefined"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ImageCodecType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of ddex:Image.
    /// </para>
    /// </summary>
    public sealed class ImageType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "BackCoverImage",
                        "BookletBackImage",
                        "BookletFrontImage",
                        "DocumentImage",
                        "FrontCoverImage",
                        "Icon",
                        "Logo",
                        "Photograph",
                        "Poster",
                        "TrayImage",
                        "Unknown",
                        "UserDefined",
                        "VideoScreenCapture",
                        "Wallpaper"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ImageType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A status of the availability of a invoice.
    /// </para>
    /// </summary>
    public sealed class InvoiceAvailabilityStatus {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "InvoiceAvailable",
                        "InvoiceNotAvailable"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private InvoiceAvailabilityStatus() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of reason for a refusing a ddex:License or ddex:Claim.
    /// </para>
    /// </summary>
    public sealed class LicenseOrClaimRefusalReason {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "AgreementOfAdditionalProvisionsRequired",
                        "CorrectionOfAdvancePaymentRequired",
                        "CorrectionOfGuaranteeRequired",
                        "CorrectionOfLicenseeRequired",
                        "CorrectionOfMostFavoredNationClauseRequired",
                        "CorrectionOfNumberOfResourcesRequired",
                        "CorrectionOfPlayingTimeRequired",
                        "CorrectionOfPublisherInformationRequired",
                        "CorrectionOfPublisherPercentageRequired",
                        "CorrectionOfRateRequired",
                        "CorrectionOfReleaseCreatorInformationRequired",
                        "CorrectionOfReleaseDateRequired",
                        "CorrectionOfReleaseTitleRequired",
                        "CorrectionOfWorkContributorRequired",
                        "CorrectionOfWorkTitleRequired",
                        "DealExpired",
                        "DifferentWork",
                        "DirectLicense",
                        "DuplicateLicense",
                        "DuplicateRequest",
                        "ImportLicenseExists",
                        "IncorrectClaim",
                        "IncorrectControlledCompositionRate",
                        "InHouseLicenseExists",
                        "InsufficientInformation",
                        "MedleyRequest",
                        "NoOptIn",
                        "NoPublisherClaim",
                        "OwnershipUnconfirmed",
                        "ProductUnavailable",
                        "PublisherNotRepresented",
                        "ReleaseWithdrawn",
                        "RelinquishedClaim",
                        "UserDefined",
                        "WorkDeletedFromRelease",
                        "WorkIncorrectlyIdentified",
                        "WorkInPublicDomain",
                        "WorkNotUsed"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private LicenseOrClaimRefusalReason() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of reason for a updating a ddex:License request.
    /// </para>
    /// </summary>
    public sealed class LicenseOrClaimRequestUpdateReason {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "AdditionalInformationProvided",
                        "AdditionalInformationProvidedAsRequested",
                        "UserDefined"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private LicenseOrClaimRequestUpdateReason() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of reason for a updating a ddex:License.
    /// </para>
    /// </summary>
    public sealed class LicenseOrClaimUpdateReason {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "NewLicenseIssued",
                        "NewRightShareIdentified",
                        "NewRightsholderIdentified",
                        "NewWorkIdentified",
                        "Revoked",
                        "UserDefined"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private LicenseOrClaimUpdateReason() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A legal status of a ddex:License for a ddex:Claim.
    /// </para>
    /// </summary>
    public sealed class LicenseStatus {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Active",
                        "Pending",
                        "Revoked"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private LicenseStatus() {
        }
    }
    
    /// <summary>
    /// <para>
    /// An operational status of a licensing process.
    /// </para>
    /// </summary>
    public sealed class LicensingProcessStatus {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Pending",
                        "Processed",
                        "ThirdPartyInformationRequested"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private LicensingProcessStatus() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of membership.
    /// </para>
    /// </summary>
    public sealed class MembershipType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "NationalMember",
                        "RegionalMember",
                        "WorldwideMember"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private MembershipType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of action requested in a ddex:Message.
    /// </para>
    /// </summary>
    public sealed class MessageActionType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "BackCatalogDelivery",
                        "HighPriorityDelivery",
                        "NewReleaseDelivery",
                        "ReDelivery",
                        "TakeDown",
                        "UserDefined"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private MessageActionType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of revenue to which the content of the ddex:Message relates.
    /// </para>
    /// </summary>
    public sealed class MessageContentRevenueType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "NonTransactionalRevenue",
                        "TransactionalRevenue",
                        "UserDefined"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private MessageContentRevenueType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of ddex:Message according to its operational status.
    /// </para>
    /// </summary>
    public sealed class MessageControlType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "LiveMessage",
                        "TestMessage"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private MessageControlType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of ddex:MIDI.
    /// </para>
    /// </summary>
    public sealed class MidiType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "MonophonicMidi",
                        "PolyphonicMidi",
                        "Unknown",
                        "UserDefined"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private MidiType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of ddex:Message in the Music Licensing Company Message Suite.
    /// </para>
    /// </summary>
    public sealed class MlcMessageType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "DeclarationOfSoundRecordingRightsClaimMessage",
                        "RequestSoundRecordingInformationMessage",
                        "RevokeSoundRecordingRightsClaimMessage",
                        "SalesReportMessage",
                        "DeclarationOfRevenueMessage"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private MlcMessageType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A role played by a ddex:Contributor in relation to a ddex:MusicalWork.
    /// </para>
    /// </summary>
    public sealed class MusicalWorkContributorRole {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Adapter",
                        "Arranger",
                        "AssociatedPerformer",
                        "Author",
                        "Composer",
                        "ComposerLyricist",
                        "Contributor",
                        "Librettist",
                        "Lyricist",
                        "MusicPublisher",
                        "NonLyricAuthor",
                        "OriginalPublisher",
                        "SubArranger",
                        "SubPublisher",
                        "SubstitutedPublisher",
                        "Translator",
                        "Unknown",
                        "UserDefined"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private MusicalWorkContributorRole() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of ddex:RightsClaim related to a ddex:MusicalWork.
    /// </para>
    /// </summary>
    public sealed class MusicalWorkRightsClaimType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "CopyrightControl",
                        "NonMemberClaim",
                        "PublicDomain",
                        "SocietyClaim",
                        "Unknown"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private MusicalWorkRightsClaimType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of ddex:MusicalWork.
    /// </para>
    /// </summary>
    public sealed class MusicalWorkType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "AdaptedInOriginalLanguage",
                        "AdaptedInstrumentalWork",
                        "AdaptedWithNewLyrics",
                        "ArrangedWithNewMusic",
                        "CompositeMusicalWork",
                        "DramaticoMusicalWork",
                        "LyricRemoval",
                        "LyricReplacement",
                        "LyricTranslation",
                        "Mashup",
                        "Medley",
                        "MultimediaProductionWork",
                        "MusicalWorkMovement",
                        "MusicalWorkWithSamples",
                        "MusicArrangement",
                        "MusicArrangementOfText",
                        "OriginalLyricsArrangement",
                        "OriginalMusicAdaptation",
                        "OriginalMusicalWork",
                        "Potpourri",
                        "ProductionMusicLibraryWork",
                        "RadioProductionWork",
                        "TheaterProductionWork",
                        "TvProductionWork",
                        "Unknown",
                        "UnspecifiedArrangement",
                        "UnspecifiedMusicalWorkExcerpt",
                        "UserDefined",
                        "VideoProductionWork"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private MusicalWorkType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of ddex:Message in a batch in the Choreography for the Mechanical Licensing of Musical Works in Canada.
    /// </para>
    /// </summary>
    public sealed class MwlCaCMessageInBatchType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "LicenseOrClaimRequestMessage",
                        "LicenseOrClaimMessage",
                        "LicensingInformationRequestMessage",
                        "LicenseOrClaimConfirmationMessage",
                        "NewReleaseMessage",
                        "ContractDeliveryMessage",
                        "ProductDeletionMessage"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private MwlCaCMessageInBatchType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A status of a ern:NewReleaseMessage.
    /// </para>
    /// </summary>
    public sealed class NewReleaseMessageStatus {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "NewReleaseMessageNotProvided",
                        "NewReleaseMessageProvided"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private NewReleaseMessageStatus() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A TerritoryId which is not a TerritoryId according to the ISO 3166-1 standard.
    /// </para>
    /// </summary>
    public sealed class NonIsoTerritoryCode {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Worldwide"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private NonIsoTerritoryCode() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of ddex:OperatingSystem.
    /// </para>
    /// </summary>
    public sealed class OperatingSystemType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "MacOS",
                        "MsWindows",
                        "Symbian",
                        "Unknown"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private OperatingSystemType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of order.
    /// </para>
    /// </summary>
    public sealed class OrderType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "BackCatalogOrder",
                        "ExpressOrder",
                        "HardDiskOrder",
                        "MetadataOnlyOrder",
                        "NewReleaseOrder",
                        "OffCycleRushOrder",
                        "PreOrder",
                        "ReDeliveryOrder",
                        "TakeDownOrder",
                        "UserDefined"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private OrderType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of ddex:PLine.
    /// </para>
    /// </summary>
    public sealed class PLineType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "OriginalPLine",
                        "RemasteringPLine"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private PLineType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of ddex:Creation according to advice which it carries about the level of explicitness or offensiveness of its content.
    /// </para>
    /// </summary>
    public sealed class ParentalWarningType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Explicit",
                        "ExplicitContentEdited",
                        "NoAdviceAvailable",
                        "NotExplicit",
                        "Unknown",
                        "UserDefined"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ParentalWarningType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of ddex:PercentageRate.
    /// </para>
    /// </summary>
    public sealed class PercentageType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "PercentageOfFreeGoodsPermitted",
                        "PercentageOfGrossRevenue",
                        "PercentageOfNetRevenue",
                        "PercentageOfNetSales",
                        "PercentageOfPriceConsumerPaid",
                        "PercentageOfStatutoryRoyaltyRate"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private PercentageType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of ddex:Price according to its value range.
    /// </para>
    /// </summary>
    public sealed class PriceRangeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private PriceRangeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of ddex:Price.
    /// </para>
    /// </summary>
    public sealed class PriceType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private PriceType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of priority.
    /// </para>
    /// </summary>
    public sealed class Priority {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "High",
                        "Low",
                        "Normal"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private Priority() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of ddex:Product.
    /// </para>
    /// </summary>
    public sealed class ProductType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "AudioProduct",
                        "GraphicsProduct",
                        "MixedMediaBundleProduct",
                        "MobileProduct",
                        "UserDefined",
                        "VideoProduct"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ProductType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of use that is the purpose of an action.
    /// </para>
    /// </summary>
    public sealed class Purpose {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "BackgroundMusic",
                        "ChannelTrailerMusic",
                        "Extract",
                        "FilmTrailerMusic",
                        "ForegroundMusic",
                        "TrailerMusic",
                        "UserDefined"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private Purpose() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A type of a rate modification.
    /// </para>
    /// </summary>
    public sealed class RateModificationType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "MultipleDiscProvision",
                        "OtherProvision",
                        "SalesVolumeProvision",
                        "VideoProvision"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private RateModificationType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// An ddex:Organization that issues ParentalWarnings.
    /// </para>
    /// </summary>
    public sealed class RatingAgency {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "AFR",
                        "BBFC",
                        "BFCO",
                        "BFSC",
                        "BMUKK",
                        "CBFC",
                        "CCC",
                        "CCE",
                        "CHVRS",
                        "CNC",
                        "DJCTQ",
                        "Eirin",
                        "FCB",
                        "Filmtilsynet",
                        "FPB",
                        "FSK",
                        "IFCO",
                        "INCAA",
                        "KMRB",
                        "KR",
                        "KRRIT",
                        "LSF",
                        "MBU",
                        "MDA",
                        "MDCB",
                        "MFCB",
                        "MIC",
                        "MPAA",
                        "MTRCB",
                        "NBC",
                        "NFVCB",
                        "NICAM",
                        "NKC",
                        "OFLC",
                        "OFLC-NZ",
                        "OFRB",
                        "RDCQ",
                        "RTC",
                        "SBB",
                        "Smais",
                        "SPIO-JK",
                        "TELA",
                        "UserDefined",
                        "VET"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private RatingAgency() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of reason.
    /// </para>
    /// </summary>
    public sealed class ReasonType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "ChartReporting",
                        "RoyaltyReporting",
                        "UserDefined"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ReasonType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of revenue according to the recipient of the payment.
    /// </para>
    /// </summary>
    public sealed class RecipientRevenueType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "PerformerAndProducerRevenue",
                        "PerformerRevenue",
                        "ProducerRevenue"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private RecipientRevenueType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A mode of a ddex:Recording.
    /// </para>
    /// </summary>
    public sealed class RecordingMode {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Mono",
                        "MultichannelAudio",
                        "Stereo",
                        "Unknown"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private RecordingMode() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A reason for a redelivery.
    /// </para>
    /// </summary>
    public sealed class RedeliveryReasonType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "BinaryCorrupted",
                        "MetadataInadequate",
                        "PackageIncomplete",
                        "ProcessingErrorAtReleaseDistributor",
                        "UserDefined"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private RedeliveryReasonType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A unit to which a ddex:Quantity refers.
    /// </para>
    /// </summary>
    public sealed class ReferenceUnit {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "PerLicense",
                        "PerUse"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ReferenceUnit() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Relator between two ddex:Entities expressing a measurable relationship.
    /// </para>
    /// </summary>
    public sealed class RelationalRelator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "EqualTo",
                        "LessThan",
                        "LessThanOrEqualTo",
                        "MoreThan",
                        "MoreThanOrEqualTo",
                        "NotEqualTo"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private RelationalRelator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A status of the availability of a ddex:Release.
    /// </para>
    /// </summary>
    public sealed class ReleaseAvailabilityStatus {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "AvailableForDSP",
                        "NotAvailableForDSP",
                        "NotClearedForDSP",
                        "NotClearedForTerritory",
                        "NotYetPrepared",
                        "UserDefined"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ReleaseAvailabilityStatus() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of relationship between two ddex:Releases.
    /// </para>
    /// </summary>
    public sealed class ReleaseRelationshipType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "HasArtistFromEnsemble",
                        "HasArtistFromSameEnsemble",
                        "HasEnsembleWithArtist",
                        "HasSameArtist",
                        "HasSameRecordingProject",
                        "HasSimilarContent",
                        "IsDigitalEquivalentToPhysical",
                        "IsEquivalentToAudio",
                        "IsEquivalentToVideo",
                        "IsExtendedFromAlbum",
                        "IsFromAudio",
                        "IsFromVideo",
                        "IsParentRelease",
                        "IsPhysicalEquivalentToDigital",
                        "IsReleaseFromRelease",
                        "IsShortenedFromAlbum",
                        "Unknown",
                        "UserDefined"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ReleaseRelationshipType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of ddex:Resource in the context of a ddex:Release.
    /// </para>
    /// </summary>
    public sealed class ReleaseResourceType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "PrimaryResource",
                        "SecondaryResource"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ReleaseResourceType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of ddex:Release according to its content, ddex:Duration and/or number of components. Note: a ddex:ReleaseType is the form in which a ddex:ReleaseCreator anticipates offering a ddex:Release to ddex:Consumers.
    /// </para>
    /// </summary>
    public sealed class ReleaseType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "AdvertisementVideo",
                        "Album",
                        "AlertToneRelease",
                        "Animation",
                        "AsPerContract",
                        "AudioBookRelease",
                        "AudioClipRelease",
                        "BackCoverImageRelease",
                        "BookletBackImageRelease",
                        "BookletFrontImageRelease",
                        "BookletRelease",
                        "Bundle",
                        "ClassicalAlbum",
                        "ConcertVideo",
                        "CorporateFilm",
                        "DigitalBoxSetRelease",
                        "Documentary",
                        "DocumentImageRelease",
                        "EBookRelease",
                        "Episode",
                        "FeatureFilm",
                        "FrontCoverImageRelease",
                        "IconRelease",
                        "InfomercialVideo",
                        "InteractiveBookletRelease",
                        "KaraokeRelease",
                        "LiveEventVideo",
                        "LogoRelease",
                        "LongFormMusicalWorkVideoRelease",
                        "LongFormNonMusicalWorkVideoRelease",
                        "LyricSheetRelease",
                        "MusicalWorkBasedGameRelease",
                        "MusicalWorkClipRelease",
                        "MusicalWorkReadalongVideoRelease",
                        "MusicalWorkTrailerRelease",
                        "MusicalWorkVideoChapterRelease",
                        "News",
                        "NonMusicalWorkBasedGameRelease",
                        "NonMusicalWorkClipRelease",
                        "NonMusicalWorkReadalongVideoRelease",
                        "NonMusicalWorkTrailerRelease",
                        "NonMusicalWorkVideoChapterRelease",
                        "NonSerialAudioVisualRecording",
                        "PhotographRelease",
                        "RingbackToneRelease",
                        "RingtoneRelease",
                        "ScreensaverRelease",
                        "Season",
                        "Series",
                        "SheetMusicRelease",
                        "ShortFormMusicalWorkVideoRelease",
                        "ShortFormNonMusicalWorkVideoRelease",
                        "Single",
                        "SingleResourceRelease",
                        "TrackRelease",
                        "TrailerVideo",
                        "TrayImageRelease",
                        "Unknown",
                        "UserDefined",
                        "VideoAlbum",
                        "VideoChapterRelease",
                        "VideoClipRelease",
                        "VideoScreenCaptureRelease",
                        "VideoSingle",
                        "VideoTrackRelease",
                        "WallpaperRelease"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ReleaseType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of report according to its ddex:FileFormat.
    /// </para>
    /// </summary>
    public sealed class ReportFormat {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "ASCII",
                        "CSV",
                        "Excel2000",
                        "Excel2007",
                        "Excel2010",
                        "UserDefined",
                        "XML"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ReportFormat() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of report.
    /// </para>
    /// </summary>
    public sealed class ReportType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "DeliveryFrequencyRequestCall",
                        "InformationAboutDeliveredAndAvailableReleasesCall",
                        "OrderedReleasesInQueueRequestCall",
                        "RedeliveryRequestCall",
                        "ReleaseAvailabilityCall",
                        "ReleaseAvailabilityRequestCall",
                        "ReleaseStatusInformationCall",
                        "ReleaseStatusRequestCall",
                        "ReleaseSupplyChainRequestCall",
                        "ReportDeliveryCall",
                        "ReportRequestCall",
                        "SupplyChainStatusCall",
                        "UserDefined"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ReportType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of action requested.
    /// </para>
    /// </summary>
    public sealed class RequestedActionType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "AdditionalInformationOnly",
                        "CorrectAndInform",
                        "CorrectAndResend",
                        "NoAction",
                        "UserDefined"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private RequestedActionType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A role played by a ddex:Contributor in relation to a ddex:Fixation of an abstract ddex:Creation.
    /// </para>
    /// </summary>
    public sealed class ResourceContributorRole {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Actor",
                        "Architect",
                        "Artist",
                        "AssociatedPerformer",
                        "Band",
                        "BookPublisher",
                        "Cartoonist",
                        "Choir",
                        "Choreographer",
                        "ComputerGraphicCreator",
                        "Conductor",
                        "Contributor",
                        "CostumeDesigner",
                        "Designer",
                        "Ensemble",
                        "FeaturedArtist",
                        "FilmDirector",
                        "FilmDistributor",
                        "FilmEditor",
                        "FilmProducer",
                        "FilmSoundEngineer",
                        "GraphicArtist",
                        "GraphicDesigner",
                        "Journalist",
                        "MainArtist",
                        "NewspaperPublisher",
                        "Orchestra",
                        "Painter",
                        "PeriodicalPublisher",
                        "Photographer",
                        "PhotographyDirector",
                        "PrimaryMusician",
                        "Producer",
                        "Programmer",
                        "RightsControllerOnProduct",
                        "ScreenplayAuthor",
                        "SetDesigner",
                        "Soloist",
                        "StageDirector",
                        "StudioPersonnel",
                        "SubtitlesEditor",
                        "SubtitlesTranslator",
                        "Unknown",
                        "UserDefined"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ResourceContributorRole() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of reason for a omitting a ddex:Resource.
    /// </para>
    /// </summary>
    public sealed class ResourceOmissionReason {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "PassportServiceRelease",
                        "PreRelease",
                        "UserDefined",
                        "VirtualRelease"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ResourceOmissionReason() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of ddex:Resource.
    /// </para>
    /// </summary>
    public sealed class ResourceType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Image",
                        "MIDI",
                        "SheetMusic",
                        "Software",
                        "SoundRecording",
                        "Text",
                        "UserDefinedResource",
                        "Video"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ResourceType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of revenue earned by the ddex:SoundRecording, according to the way the revenue is generated.
    /// </para>
    /// </summary>
    public sealed class RevenueSourceType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "FinancialRevenue",
                        "IndemnityRevenue",
                        "RoyaltyRevenue"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private RevenueSourceType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of rights claim policy.
    /// </para>
    /// </summary>
    public sealed class RightsClaimPolicyType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "ReportUsage",
                        "BlockAccess"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private RightsClaimPolicyType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A role of a ddex:RightsController.
    /// </para>
    /// </summary>
    public sealed class RightsControllerRole {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "AdministratingRecordCompany",
                        "RightsAdministrator",
                        "RightsController",
                        "RoyaltyAdministrator",
                        "Unknown"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private RightsControllerRole() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of ddex:Right which is covered.
    /// </para>
    /// </summary>
    public sealed class RightsCoverage {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "MakeAvailableRight",
                        "MechanicalRight",
                        "PerformingRight",
                        "ReproductionRight",
                        "SynchronizationRight"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private RightsCoverage() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of ddex:RoyaltyRate according to the calculation method.
    /// </para>
    /// </summary>
    public sealed class RoyaltyRateCalculationType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "ControlledCompositionRoyaltyRate",
                        "ControlledShareRoyaltyRate",
                        "MinimumStatutoryRoyaltyRate",
                        "NegotiatedRoyaltyRate",
                        "ReducedRoyaltyRate",
                        "ReducedStatutoryRoyaltyRate",
                        "StatutoryRoyaltyRate"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private RoyaltyRateCalculationType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of ddex:RoyaltyRate.
    /// </para>
    /// </summary>
    public sealed class RoyaltyRateType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "PennyRate",
                        "PercentageRoyaltyRate",
                        "UserDefined"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private RoyaltyRateType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A status of the availability of a sales report.
    /// </para>
    /// </summary>
    public sealed class SalesReportAvailabilityStatus {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "SalesReportAvailable",
                        "SalesReportNotAvailable"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private SalesReportAvailabilityStatus() {
        }
    }
    
    /// <summary>
    /// <para>
    /// The biological sex of a being.
    /// </para>
    /// </summary>
    public sealed class Sex {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Female",
                        "Male",
                        "Unknown"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private Sex() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of SheetMusicCodec.
    /// </para>
    /// </summary>
    public sealed class SheetMusicCodecType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private SheetMusicCodecType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of ddex:SheetMusic.
    /// </para>
    /// </summary>
    public sealed class SheetMusicType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private SheetMusicType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of ddex:Software.
    /// </para>
    /// </summary>
    public sealed class SoftwareType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "InteractiveBooklet",
                        "MusicalWorkBasedGame",
                        "NonMusicalWorkBasedGame",
                        "Screensaver",
                        "Unknown",
                        "UserDefined"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private SoftwareType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of sound processor.
    /// </para>
    /// </summary>
    public sealed class SoundProcessorType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "MidiProcessor",
                        "SMAF-MA2",
                        "SMAF-MA3",
                        "Unknown",
                        "UserDefined"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private SoundProcessorType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of ddex:SoundRecording.
    /// </para>
    /// </summary>
    public sealed class SoundRecordingType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "MusicalWorkReadalongSoundRecording",
                        "MusicalWorkSoundRecording",
                        "NonMusicalWorkReadalongSoundRecording",
                        "NonMusicalWorkSoundRecording",
                        "Unknown",
                        "UserDefined"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private SoundRecordingType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A status of a ddex:Release in a supply chain.
    /// </para>
    /// </summary>
    public sealed class SupplyChainStatus {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "DeliveredToReleaseDistributor",
                        "InDeliveryToReleaseDistributor",
                        "InPreparationForDeliveryToReleaseDistributor",
                        "OrderPlacedForReleaseDistributor",
                        "ProcessingErrorAtReleaseCreator",
                        "ProcessingErrorAtReleaseDistributor",
                        "ReleaseMadeAvailableToConsumers",
                        "ReleaseNotAvailable",
                        "ReleaseReceivedByReleaseDistributor",
                        "ReleaseStagedForPublication",
                        "SuccessfullyIngestedByReleaseDistributor",
                        "UserDefined"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private SupplyChainStatus() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of ddex:Tax according to its scope.
    /// </para>
    /// </summary>
    public sealed class TaxScope {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "CombinedTax",
                        "FederalTax",
                        "LocalTax",
                        "ProvincialTax",
                        "StateTax",
                        "UserDefined"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private TaxScope() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of ddex:Tax.
    /// </para>
    /// </summary>
    public sealed class TaxType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "CombinedTax",
                        "SalesTax",
                        "ServiceTax",
                        "SourceTax",
                        "UserDefined"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private TaxType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of ddex:TextCodec.
    /// </para>
    /// </summary>
    public sealed class TextCodecType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "ASCII",
                        "HTML",
                        "PDF",
                        "PostScript",
                        "RTF",
                        "Unknown",
                        "UserDefined"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private TextCodecType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of ddex:Text.
    /// </para>
    /// </summary>
    public sealed class TextType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "EBook",
                        "LinerNotes",
                        "LyricText",
                        "NonInteractiveBooklet",
                        "TextDocument",
                        "Unknown",
                        "UserDefined"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private TextType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of ddex:Theme.
    /// </para>
    /// </summary>
    public sealed class ThemeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "ClosingTheme",
                        "MainTheme",
                        "OpeningTheme",
                        "SegmentTheme",
                        "TitleTheme",
                        "UserDefined"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ThemeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of ddex:Title which defines its origin, form or the function it fulfils in relation to a ddex:Creation. Note: A ddex:Title may fulfil more than one role. Example: 'Help' may be both the ddex:OriginalTitle and the ddex:DisplayTitle for the well-known Beatles song.  
    /// </para>
    /// </summary>
    public sealed class TitleType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "AbbreviatedDisplayTitle",
                        "AlternativeTitle",
                        "DisplayTitle",
                        "FirstLineOfText",
                        "FormalTitle",
                        "GroupingTitle",
                        "IncorrectTitle",
                        "MisspelledTitle",
                        "OriginalTitle",
                        "SearchTitle",
                        "SortingTitle",
                        "TitleAsPart",
                        "TitleWithoutPunctuation",
                        "TranslatedTitle",
                        "Unknown",
                        "UserDefined"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private TitleType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:UnitOfMeasure for a ddex:BitRate.
    /// </para>
    /// </summary>
    public sealed class UnitOfBitRate {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "bps",
                        "Gbps",
                        "kbps",
                        "Mbps"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private UnitOfBitRate() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:UnitOfMeasure for a condition value.
    /// </para>
    /// </summary>
    public sealed class UnitOfConditionValue {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Millisecond",
                        "Minute",
                        "Percent",
                        "Pixel",
                        "Second"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private UnitOfConditionValue() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:UnitOfMeasure for an ddex:Extent.
    /// </para>
    /// </summary>
    public sealed class UnitOfExtent {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "cm",
                        "Inch",
                        "mm",
                        "PercentOfScreen",
                        "Pixel"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private UnitOfExtent() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:UnitOfMeasure for a ddex:FrameRate.
    /// </para>
    /// </summary>
    public sealed class UnitOfFrameRate {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Hz(interlaced)",
                        "Hz(non-interlaced)"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private UnitOfFrameRate() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:UnitOfMeasure for a frequency.
    /// </para>
    /// </summary>
    public sealed class UnitOfFrequency {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "GHz",
                        "Hz",
                        "kHz",
                        "MHz"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private UnitOfFrequency() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of ddex:Message according to whether the ddex:Message contains original data or updates to previously sent data.
    /// </para>
    /// </summary>
    public sealed class UpdateIndicator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "OriginalMessage",
                        "UpdateMessage"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private UpdateIndicator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of a nature of a ddex:Service, or a ddex:Release, as used by a ddex:Consumer.
    /// </para>
    /// </summary>
    public sealed class UseType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "AsPerContract",
                        "Broadcast",
                        "ConditionalDownload",
                        "ContentInfluencedStream",
                        "Display",
                        "Download",
                        "KioskDownload",
                        "Narrowcast",
                        "NonInteractiveStream",
                        "OnDemandStream",
                        "PerformInPublic",
                        "PermanentDownload",
                        "Playback",
                        "PlayInPublic",
                        "Podcast",
                        "Print",
                        "PrivateCopy",
                        "Rent",
                        "Simulcast",
                        "Stream",
                        "TetheredDownload",
                        "TimeInfluencedStream",
                        "Unknown",
                        "UseAsAlertTone",
                        "UseAsDevice",
                        "UseAsKaraoke",
                        "UseAsRingbackTone",
                        "UseAsRingbackTune",
                        "UseAsRingtone",
                        "UseAsRingtune",
                        "UseAsScreensaver",
                        "UseAsVoiceMail",
                        "UserDefined",
                        "UserMakeAvailableLabelProvided",
                        "UserMakeAvailableUserProvided",
                        "Webcast"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private UseType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of physical interface by which a ddex:Consumer uses a ddex:Service or ddex:Release.
    /// </para>
    /// </summary>
    public sealed class UserInterfaceType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "AsPerContract",
                        "ConnectedDevice",
                        "GameConsole",
                        "Jukebox",
                        "KaraokeMachine",
                        "Kiosk",
                        "LocalStorageJukebox",
                        "PersonalComputer",
                        "PhysicalMediaWriter",
                        "PortableDevice",
                        "RemoteStorageJukebox",
                        "Unknown",
                        "UserDefined"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private UserInterfaceType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of ddex:RoyaltyRate.
    /// </para>
    /// </summary>
    public sealed class ValueType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Calculated",
                        "Maximum",
                        "Minimum"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ValueType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of ddex:VideoCodec.
    /// </para>
    /// </summary>
    public sealed class VideoCodecType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "AVC",
                        "H.261",
                        "H.263",
                        "MPEG-1",
                        "MPEG-2",
                        "MPEG-4",
                        "QuickTime",
                        "RealVideo",
                        "Shockwave",
                        "Unknown",
                        "UserDefined",
                        "WMV"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private VideoCodecType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of resolution (or definition) in which a ddex:Video is provided.
    /// </para>
    /// </summary>
    public sealed class VideoDefinitionType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "HighDefinition",
                        "StandardDefinition"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private VideoDefinitionType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of ddex:Video.
    /// </para>
    /// </summary>
    public sealed class VideoType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "AdvertisementVideo",
                        "Animation",
                        "ConcertClip",
                        "ConcertVideo",
                        "CorporateFilm",
                        "Documentary",
                        "Episode",
                        "FeatureFilm",
                        "InfomercialVideo",
                        "Karaoke",
                        "LiveEventVideo",
                        "LongFormMusicalWorkVideo",
                        "LongFormNonMusicalWorkVideo",
                        "Menu",
                        "MusicalWorkClip",
                        "MusicalWorkReadalongVideo",
                        "MusicalWorkTrailer",
                        "MusicalWorkVideoChapter",
                        "News",
                        "NonMusicalWorkClip",
                        "NonMusicalWorkReadalongVideo",
                        "NonMusicalWorkTrailer",
                        "NonMusicalWorkVideoChapter",
                        "NonSerialAudioVisualRecording",
                        "Season",
                        "Series",
                        "ShortFormMusicalWorkVideo",
                        "ShortFormNonMusicalWorkVideo",
                        "TrailerVideo",
                        "Unknown",
                        "UserDefined",
                        "VideoChapter"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private VideoType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of ddex:MusicalCreation according to how it is experienced in an audio-visual Creation.
    /// </para>
    /// </summary>
    public sealed class VisualPerceptionType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Background",
                        "UserDefined",
                        "Visual"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private VisualPerceptionType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:Type of a ddex:MusicalCreation according to the occurrence of vocals.
    /// </para>
    /// </summary>
    public sealed class VocalType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Instrumental",
                        "UserDefined",
                        "Vocal"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private VocalType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A status of a ddex:WsMessage.
    /// </para>
    /// </summary>
    public sealed class WsMessageStatus {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "BackendProcessingError",
                        "NoValidMessageReceived",
                        "ValidMessageQueuedForProcessing",
                        "ValidMessageReceived"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private WsMessageStatus() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:LocalAnchorReference which acts as a reference to a local ddex:Identifier of a ddex:Collection. This ddex:LocalAnchorReference is a xs:string starting with the letter X.
    /// </para>
    /// </summary>
    public sealed class LocalCollectionAnchorReference {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "X[\\d\\-_a-zA-Z]+"}, 0, XmlSchemaWhiteSpace.Collapse));
        
        private LocalCollectionAnchorReference() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A ddex:LocalAnchorReference which acts as a reference to a local ddex:Identifier of a ddex:Resource. This ddex:LocalAnchorReference is a xs:string starting with the letter A.
    /// </para>
    /// </summary>
    public sealed class LocalResourceAnchorReference {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "A[\\d\\-_a-zA-Z]+"}, 0, XmlSchemaWhiteSpace.Collapse));
        
        private LocalResourceAnchorReference() {
        }
    }
}
namespace ddex_net.xml._20120404.iso639a2 {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    using ddex_net.xml.ern._341;
    
    
    /// <summary>
    /// <para>
    /// An ISO639-1 two-letter code representing a ddex:Language.
    /// </para>
    /// </summary>
    public sealed class LanguageCode {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "aa",
                        "ab",
                        "af",
                        "ak",
                        "sq",
                        "am",
                        "ar",
                        "an",
                        "hy",
                        "as",
                        "av",
                        "ae",
                        "ay",
                        "az",
                        "ba",
                        "bm",
                        "eu",
                        "be",
                        "bn",
                        "bh",
                        "bi",
                        "bo",
                        "bs",
                        "br",
                        "bg",
                        "my",
                        "ca",
                        "cs",
                        "ch",
                        "ce",
                        "zh",
                        "cu",
                        "cv",
                        "kw",
                        "co",
                        "cr",
                        "cy",
                        "da",
                        "de",
                        "dv",
                        "nl",
                        "dz",
                        "el",
                        "en",
                        "eo",
                        "et",
                        "ee",
                        "fo",
                        "fa",
                        "fj",
                        "fi",
                        "fr",
                        "fy",
                        "ff",
                        "ka",
                        "gd",
                        "ga",
                        "gl",
                        "gv",
                        "gn",
                        "gu",
                        "ht",
                        "ha",
                        "he",
                        "hz",
                        "hi",
                        "ho",
                        "hr",
                        "hu",
                        "ig",
                        "is",
                        "io",
                        "ii",
                        "iu",
                        "ie",
                        "ia",
                        "id",
                        "ik",
                        "it",
                        "jv",
                        "ja",
                        "kl",
                        "kn",
                        "ks",
                        "kr",
                        "kk",
                        "km",
                        "ki",
                        "rw",
                        "ky",
                        "kv",
                        "kg",
                        "ko",
                        "kj",
                        "ku",
                        "lo",
                        "la",
                        "lv",
                        "li",
                        "ln",
                        "lt",
                        "lb",
                        "lu",
                        "lg",
                        "mk",
                        "mh",
                        "ml",
                        "mi",
                        "mr",
                        "ms",
                        "mg",
                        "mt",
                        "mo",
                        "mn",
                        "na",
                        "nv",
                        "nr",
                        "nd",
                        "ng",
                        "ne",
                        "nn",
                        "nb",
                        "no",
                        "ny",
                        "oc",
                        "oj",
                        "or",
                        "om",
                        "os",
                        "pa",
                        "pi",
                        "pl",
                        "pt",
                        "ps",
                        "qu",
                        "rm",
                        "ro",
                        "rn",
                        "ru",
                        "sg",
                        "sa",
                        "sr",
                        "si",
                        "sk",
                        "sl",
                        "se",
                        "sm",
                        "sn",
                        "sd",
                        "so",
                        "st",
                        "es",
                        "sc",
                        "ss",
                        "su",
                        "sw",
                        "sv",
                        "ty",
                        "ta",
                        "tt",
                        "te",
                        "tg",
                        "tl",
                        "th",
                        "ti",
                        "to",
                        "tn",
                        "ts",
                        "tk",
                        "tr",
                        "tw",
                        "ug",
                        "uk",
                        "ur",
                        "uz",
                        "ve",
                        "vi",
                        "vo",
                        "wa",
                        "wo",
                        "xh",
                        "yi",
                        "yo",
                        "za",
                        "zu"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private LanguageCode() {
        }
    }
}
namespace ddex_net.xml._20120404.iso4217a {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    using ddex_net.xml.ern._341;
    
    
    /// <summary>
    /// <para>
    /// An ISO4217 three-letter code representing a ddex:Currency.
    /// </para>
    /// </summary>
    public sealed class CurrencyCode {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "AED",
                        "AFN",
                        "ALL",
                        "AMD",
                        "ANG",
                        "AOA",
                        "ARS",
                        "AUD",
                        "AWG",
                        "AZN",
                        "BAM",
                        "BBD",
                        "BDT",
                        "BGN",
                        "BHD",
                        "BIF",
                        "BMD",
                        "BND",
                        "BOB",
                        "BOV",
                        "BRL",
                        "BSD",
                        "BTN",
                        "BWP",
                        "BYR",
                        "BZD",
                        "CAD",
                        "CDF",
                        "CHF",
                        "CLF",
                        "CLP",
                        "CNY",
                        "COP",
                        "COU",
                        "CRC",
                        "CUC",
                        "CUP",
                        "CVE",
                        "CZK",
                        "DJF",
                        "DKK",
                        "DOP",
                        "DZD",
                        "EEK",
                        "EGP",
                        "ERN",
                        "ETB",
                        "EUR",
                        "FJD",
                        "FKP",
                        "GBP",
                        "GEL",
                        "GHS",
                        "GIP",
                        "GMD",
                        "GNF",
                        "GTQ",
                        "GYD",
                        "HKD",
                        "HNL",
                        "HRK",
                        "HTG",
                        "HUF",
                        "IDR",
                        "ILS",
                        "INR",
                        "IQD",
                        "IRR",
                        "ISK",
                        "JMD",
                        "JOD",
                        "JPY",
                        "KES",
                        "KGS",
                        "KHR",
                        "KMF",
                        "KPW",
                        "KRW",
                        "KWD",
                        "KYD",
                        "KZT",
                        "LAK",
                        "LBP",
                        "LKR",
                        "LRD",
                        "LSL",
                        "LTL",
                        "LVL",
                        "LYD",
                        "MAD",
                        "MDL",
                        "MGA",
                        "MKD",
                        "MMK",
                        "MNT",
                        "MOP",
                        "MRO",
                        "MUR",
                        "MVR",
                        "MWK",
                        "MXN",
                        "MXV",
                        "MYR",
                        "MZM",
                        "NAD",
                        "NGN",
                        "NIO",
                        "NOK",
                        "NPR",
                        "NZD",
                        "OMR",
                        "PAB",
                        "PEN",
                        "PGK",
                        "PHP",
                        "PKR",
                        "PLN",
                        "PYG",
                        "QAR",
                        "RON",
                        "RSD",
                        "RUB",
                        "RWF",
                        "SAR",
                        "SBD",
                        "SCR",
                        "SDG",
                        "SEK",
                        "SGD",
                        "SHP",
                        "SLL",
                        "SOS",
                        "SRD",
                        "STD",
                        "SVC",
                        "SYP",
                        "SZL",
                        "THB",
                        "TJS",
                        "TMT",
                        "TND",
                        "TOP",
                        "TRY",
                        "TTD",
                        "TWD",
                        "TZS",
                        "UAH",
                        "UGX",
                        "USD",
                        "UYI",
                        "UYU",
                        "UZS",
                        "VEF",
                        "VND",
                        "VUV",
                        "WST",
                        "XAF",
                        "XCD",
                        "XOF",
                        "XPF",
                        "YER",
                        "ZAR",
                        "ZMK",
                        "ZWL"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private CurrencyCode() {
        }
    }
}
namespace ddex_net.xml._20120404.iso3166a2 {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    using ddex_net.xml.ern._341;
    
    
    /// <summary>
    /// <para>
    /// An ISO 3166-1 two-letter code representing a ddex:Territory.
    /// </para>
    /// </summary>
    public sealed class TerritoryCode {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "AF",
                        "AX",
                        "AL",
                        "DZ",
                        "AD",
                        "AO",
                        "AG",
                        "AR",
                        "AM",
                        "AU",
                        "AT",
                        "AZ",
                        "BS",
                        "BH",
                        "BD",
                        "BB",
                        "BY",
                        "BE",
                        "BZ",
                        "BJ",
                        "BT",
                        "BO",
                        "BA",
                        "BW",
                        "BR",
                        "BN",
                        "BG",
                        "BF",
                        "BI",
                        "KH",
                        "CM",
                        "CA",
                        "CV",
                        "CF",
                        "TD",
                        "CL",
                        "CN",
                        "CO",
                        "KM",
                        "CG",
                        "CD",
                        "CR",
                        "CI",
                        "HR",
                        "CU",
                        "CY",
                        "CZ",
                        "DK",
                        "DJ",
                        "DM",
                        "DO",
                        "TL",
                        "EC",
                        "EG",
                        "SV",
                        "GQ",
                        "ER",
                        "EE",
                        "ET",
                        "FJ",
                        "FI",
                        "FR",
                        "GA",
                        "GM",
                        "GE",
                        "DE",
                        "GH",
                        "GR",
                        "GD",
                        "GT",
                        "GG",
                        "GN",
                        "GW",
                        "GY",
                        "HT",
                        "VA",
                        "HN",
                        "HU",
                        "IS",
                        "IN",
                        "ID",
                        "IR",
                        "IQ",
                        "IE",
                        "IM",
                        "IL",
                        "IT",
                        "JM",
                        "JP",
                        "JE",
                        "JO",
                        "KZ",
                        "KE",
                        "KI",
                        "KP",
                        "KR",
                        "KW",
                        "KG",
                        "LA",
                        "LV",
                        "LB",
                        "LS",
                        "LR",
                        "LY",
                        "LI",
                        "LT",
                        "LU",
                        "MG",
                        "MW",
                        "MY",
                        "MV",
                        "ML",
                        "MT",
                        "MH",
                        "MR",
                        "MU",
                        "MX",
                        "FM",
                        "MD",
                        "MC",
                        "MN",
                        "ME",
                        "MA",
                        "MZ",
                        "MM",
                        "NA",
                        "NR",
                        "NP",
                        "NL",
                        "NZ",
                        "NI",
                        "NE",
                        "NG",
                        "NO",
                        "OM",
                        "PK",
                        "PW",
                        "PA",
                        "PG",
                        "PY",
                        "PE",
                        "PH",
                        "PL",
                        "PT",
                        "QA",
                        "RO",
                        "RU",
                        "RW",
                        "KN",
                        "LC",
                        "VC",
                        "WS",
                        "SM",
                        "ST",
                        "SA",
                        "SN",
                        "RS",
                        "SC",
                        "SL",
                        "SG",
                        "SK",
                        "SI",
                        "SB",
                        "SO",
                        "ZA",
                        "ES",
                        "LK",
                        "SD",
                        "SR",
                        "SZ",
                        "SE",
                        "CH",
                        "SY",
                        "TJ",
                        "TZ",
                        "TH",
                        "MK",
                        "TG",
                        "TO",
                        "TT",
                        "TN",
                        "TR",
                        "TM",
                        "TV",
                        "UG",
                        "UA",
                        "AE",
                        "GB",
                        "US",
                        "UY",
                        "UZ",
                        "VU",
                        "VE",
                        "VN",
                        "YE",
                        "ZM",
                        "ZW",
                        "AS",
                        "AI",
                        "AQ",
                        "AW",
                        "BM",
                        "BV",
                        "IO",
                        "KY",
                        "CX",
                        "CC",
                        "CK",
                        "FK",
                        "FO",
                        "GF",
                        "PF",
                        "TF",
                        "GI",
                        "GL",
                        "GP",
                        "GU",
                        "HM",
                        "HK",
                        "MO",
                        "MQ",
                        "YT",
                        "MS",
                        "AN",
                        "NC",
                        "NU",
                        "NF",
                        "MP",
                        "PS",
                        "PN",
                        "PR",
                        "RE",
                        "BL",
                        "SH",
                        "MF",
                        "PM",
                        "GS",
                        "SJ",
                        "TW",
                        "TK",
                        "TC",
                        "UM",
                        "VG",
                        "VI",
                        "WF",
                        "EH"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private TerritoryCode() {
        }
    }
}
